{
  "openapi": "3.0.0",
  "info": {
    "title": "Continuum API",
    "version": "0.1",
    "description": "A description of the Continuum API",
    "contact": {
      "name": "Rino",
      "email": "rino.vandam@digital.ai"
    }
  },
  "servers": [
    {
      "url": "http://54.209.208.115:8080/api",
      "description": "QA Automation Server"
    }
  ],
  "components": {
    "securitySchemes": {
      "ctm_token": {
        "name": "Authorization",
        "type": "apiKey",
        "in": "header",
        "description": ""
      }
    },
    "parameters": {},
    "examples": {},
    "responses": {},
    "schemas": {}
  },
  "paths": {
    "/accept_webhook": {
      "post": {
        "summary": "Accepts a webhook and runs it",
        "operationId": "post-accept_webhook",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "handler": {
                    "type": "string",
                    "description": "name of a defined 'Webhook Handler' containing directives to apply to this payload"
                  }
                },
                "required": [
                  "handler"
                ]
              }
            }
          }
        },
        "description": "Accepts any JSON payload submitted, and runs it through the defined list of Directives"
      }
    },
    "/copy_project": {
      "post": {
        "summary": "Copies a Project",
        "operationId": "post-copy_project",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Copies a Project",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "type": "string",
                    "description": "the id or name of a Project"
                  },
                  "newname": {
                    "type": "string",
                    "description": "a name for the new Project"
                  }
                },
                "required": [
                  "project",
                  "newname"
                ]
              }
            }
          }
        }
      }
    },
    "/create_package": {
      "post": {
        "summary": "Creates a Package Definition",
        "operationId": "post-create_package",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a Package Definition",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "the name of a Package"
                  },
                  "team": {
                    "type": "string",
                    "description": "Team to which the Package Definition should belong"
                  },
                  "description": {
                    "type": "string",
                    "description": "a description of the Package Definition"
                  },
                  "progression": {
                    "type": "string",
                    "description": "a Progression to associate with the Package Definition"
                  }
                },
                "required": [
                  "name",
                  "team"
                ]
              }
            }
          }
        }
      }
    },
    "/add_cloud_keypair": {
      "post": {
        "summary": "Adds a Key Pair to a Cloud",
        "operationId": "post-add_cloud_keypair",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cloud": {
                    "type": "string",
                    "description": "Name or ID of the Cloud to update"
                  },
                  "name": {
                    "type": "string",
                    "description": "a name for the Key Pair"
                  },
                  "private_key": {
                    "type": "string",
                    "description": "the private key"
                  },
                  "passphrase": {
                    "type": "string",
                    "description": "a passphrase for this Key Pair"
                  }
                },
                "required": [
                  "cloud",
                  "name",
                  "private_key"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "cloud": "string",
                    "name": "string",
                    "private_key": "string",
                    "passphrase": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/add_object_tag": {
      "post": {
        "summary": "Adds a security Tag to an object",
        "operationId": "post-add_object_tag",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Adds a security Tag to an object\n\nValid and currently implemented `object_type` values are:\n\n* `User` = 1\n* `Asset` = 2\n* `Task` = 3\n* `Canvas Item` = 50",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag": {
                    "type": "string",
                    "description": "The name of the Tag"
                  },
                  "object_id": {
                    "type": "string",
                    "description": "The ID of the object"
                  },
                  "object_type": {
                    "type": "string",
                    "description": "The numeric type of the object"
                  }
                },
                "required": [
                  "tag",
                  "object_id",
                  "object_type"
                ]
              }
            }
          }
        }
      }
    },
    "/add_project_source": {
      "post": {
        "summary": "Marks a Project as a 'Source' Project",
        "operationId": "post-add_project_source",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Given a Project and an Origin this will mark a Project as a \"Source\" Project, mark the Origin as the Projects Changes from, and will return the webhook\n\nValid origin values and their definitions:\n- 'github' - GitHub Webhook\n- 'gitlab' - GitLab Webhook\n- 'ispw' - Compuware ISPW\n- 'tfsgit' - VSTS/TFS Git Webhook\n- 'tfvc' - VSTS/TFS TFVC Webhook\n- 'tfstfvs_soap' - VSTS/TFS 2013 SOAP Webhook\n- 'teamforgegit' - TeamForge Git Webhook\n- 'teamforgesvn' - TeamForge Subversion Webhook\n- 'bitbucket' - BitBucket Cloud Webhook\n- 'bitbucketserver' - BitBucket Server Webhook\n- 'other' - Continuum Format Webhook",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "type": "string",
                    "description": "Name of the Project to alter"
                  },
                  "origin": {
                    "type": "string",
                    "description": "Name of the VCS to mark as the Projects 'Changes From' field",
                    "enum": [
                      "github",
                      "gitlab",
                      "ispw",
                      "tfsgit",
                      "tfvc",
                      "tfstfvs_soap",
                      "teamforgegit",
                      "teamforgesvn",
                      "bitbucket",
                      "bitbucketserver",
                      "other"
                    ]
                  },
                  "secret": {
                    "type": "string",
                    "description": "the 'Webhook Secret.' Valid only when the provided origin is 'github'. If provided with another VCS this will return an error"
                  }
                },
                "required": [
                  "project",
                  "origin"
                ]
              }
            }
          }
        }
      }
    },
    "/add_team_user": {
      "post": {
        "summary": "Add a User to a Team",
        "operationId": "post-add_team_user",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Only a 'Team Administrator' can manage Team membership.  If the credentials used for this API call are not a Team Administrator for the specified Team, the call will not succeed.",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "team": {
                    "type": "string",
                    "description": "Name or ID of the Team to change"
                  },
                  "user": {
                    "type": "string",
                    "description": "Name or ID of the User to add"
                  },
                  "team_role": {
                    "type": "string",
                    "description": "Name of the Role for new user to adopt on new team"
                  }
                },
                "required": [
                  "team",
                  "user",
                  "team_role"
                ]
              }
            }
          }
        }
      }
    },
    "/associate_commits_to_v1_workitem": {
      "post": {
        "summary": "Associate commits to v1 workitem",
        "operationId": "post-associate_commits_to_v1_workitem",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Associate commits to v1 workitem\n\nToDo: commit_shas data shape",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "commit_shas": {
                    "type": "string",
                    "description": "a list of all the Changes to associate to a Workitem"
                  },
                  "associated_by": {
                    "type": "string",
                    "description": "User that made the association in Digital.ai Agility"
                  },
                  "workitem_number": {
                    "type": "string",
                    "description": "Workitem number from Digital.ai Agility"
                  },
                  "instance_url": {
                    "type": "string",
                    "description": "Digital.ai Agility instance url"
                  }
                },
                "required": [
                  "commit_shas",
                  "associated_by",
                  "workitem_number",
                  "instance_url"
                ]
              }
            }
          }
        },
        "tags": [
          "Internal",
          "ToDo"
        ]
      }
    },
    "/build_stream": {
      "post": {
        "summary": "Gets all pipeline instances that a workitem participated in",
        "operationId": "post-build_stream",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets all pipeline instances that a workitem participated in\n\nReturns: Related Pipeline Instances.",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "number": {
                    "type": "string",
                    "description": "a Workitem Identifier"
                  }
                },
                "required": [
                  "number"
                ]
              }
            }
          }
        },
        "tags": [
          "Internal"
        ]
      }
    },
    "/cancel_pipelineinstance": {
      "post": {
        "summary": "Cancels a running Pipeline Instance",
        "operationId": "post-cancel_pipelineinstance",
        "responses": {
          "200": {
            "description": "true"
          }
        },
        "description": "Cancel a running Pipeline Instance\nAll Pending or Processing statuses will be set to Canceled",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pi": {
                    "type": "string",
                    "description": "The Name or ID of a Pipeline Instance"
                  }
                },
                "required": [
                  "pi"
                ]
              }
            }
          }
        }
      }
    },
    "/cancel_transformer_event": {
      "post": {
        "summary": "Cancels a failed event",
        "operationId": "post-cancel_transformer_event",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Cancels a failed event",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inbound_id": {
                    "type": "string",
                    "description": "The inbound id of the failed event"
                  }
                },
                "required": [
                  "inbound_id"
                ]
              }
            }
          }
        }
      }
    },
    "/check_transformer_data_map_name_exists": {
      "post": {
        "summary": "Checks if a mapping name already exists",
        "operationId": "post-check_transformer_data_map_name_exists",
        "responses": {
          "200": {
            "description": "true or false"
          }
        },
        "description": "Checks if a mapping name already exists",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The mapping name to be checked for existence"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/complete_activity": {
      "post": {
        "summary": "Completes an Activity",
        "operationId": "post-complete_activity",
        "responses": {
          "200": {
            "description": "success"
          }
        },
        "description": "Given a Phase, Package Name, Revision (or Full Version), and Activity Name - will complete that Activity with either 'success' or 'failure'",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "package": {
                    "type": "string",
                    "description": "Name of the Package to promote to a progression Phase"
                  },
                  "revision": {
                    "type": "string",
                    "description": "Revision number of a Package to promote, takes precedence over `full_version'"
                  },
                  "full_version": {
                    "type": "string",
                    "description": "Full Version of package to promote, optional alternative selector to `revision`"
                  },
                  "phase": {
                    "type": "string",
                    "description": "Name of the Phase containing the Activity to complete"
                  },
                  "activity": {
                    "type": "string",
                    "description": "Name of the Activity to complete"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Notes to be attached to the Activity. (May be configured to be required.)"
                  },
                  "failure": {
                    "type": "string",
                    "description": "Mark the Activity as a 'failure'.  (`success` if omitted.)"
                  },
                  "forcewith": {
                    "type": "boolean",
                    "description": "Force completion by setting all Controls to `pass` or `fail`"
                  },
                  "completion_time": {
                    "type": "string",
                    "description": "Mark the activity complete at a specified time.\n    * Will default to start time if earlier time is provided.\n    * Will assume UTC if no tz offset provided and nothing passed to 'timezone' argument.\n    * iso8601 or YYYY-MM-DD-HH:mm:SS format perferred"
                  },
                  "timezone": {
                    "type": "string",
                    "description": "Optional modifier for 'completion_time'.\n    * This will allow for the conversion to UTC if completion_time is not UTC.\n    * Format such as \"Europe/Lisbon\" or \"US/Eastern\"\n    * If timezone is provided, but the 'completion_time' contains an offset, timezone will be ignored."
                  }
                },
                "required": [
                  "package",
                  "revision",
                  "full_version",
                  "phase",
                  "activity"
                ]
              }
            }
          }
        }
      }
    },
    "/configure_plugin": {
      "post": {
        "summary": "Configures a specific Plugin",
        "operationId": "post-configure_plugin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "",
                "type": "object",
                "properties": {
                  "plugin": {
                    "type": "object",
                    "properties": {
                      "_plugin": {
                        "type": "string",
                        "minLength": 1
                      },
                      "_enabled": {
                        "type": "boolean"
                      },
                      "instances": {
                        "type": "array",
                        "uniqueItems": true,
                        "minItems": 1,
                        "items": {
                          "required": [],
                          "properties": {}
                        }
                      },
                      "team": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "required": [
                      "_plugin",
                      "_enabled",
                      "instances",
                      "team"
                    ]
                  }
                },
                "required": [
                  "plugin"
                ]
              }
            }
          }
        },
        "security": [
          {
            "ctm_token": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string"
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "ErrorCode": "string",
                      "ErrorDetail": "string",
                      "ErrorMessage": "string",
                      "Method": "string",
                      "Response": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                }
              }
            }
          }
        },
        "description": "The following keys will be encrypted if provided: `api_token`, `password`.\nNOTE:  This is a destructive operation!  Configuring a plugin's instances will replace all previous configured instances for the given team.  If no team is specified, all global instances of the plugin will be replaced with the new configuration instead.  If you wish to reconfigure any one particular instance of the plugin, see 'configure_plugin_instance'."
      }
    },
    "/configure_plugin_instance": {
      "post": {
        "summary": "Adds a new instance for a particular plugin type",
        "operationId": "post-configure_plugin_instance",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Add a new instance for a particular plugin type. \nNote: does not overwrite existing instances.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "",
                "type": "object",
                "properties": {
                  "plugin": {
                    "type": "string",
                    "minLength": 1
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "token": {
                    "type": "string",
                    "minLength": 1
                  },
                  "owner": {
                    "type": "string",
                    "minLength": 1
                  },
                  "is_default": {
                    "type": "boolean"
                  },
                  "team": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": [
                  "plugin",
                  "name"
                ]
              }
            }
          },
          "description": ""
        }
      }
    },
    "/create_account": {
      "post": {
        "summary": "Creates a Cloud Account",
        "operationId": "post-create_account",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a Cloud Account",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/create_asset": {
      "post": {
        "summary": "Creates an Asset",
        "operationId": "post-create_asset",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "description": "Creates an Asset\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "a name for the new Asset"
                  },
                  "status": {
                    "type": "string",
                    "description": "either 'Active' or 'Inactive'. ('Active' if omitted.)"
                  },
                  "db_name": {
                    "type": "string",
                    "description": "a Database name"
                  },
                  "address": {
                    "type": "string",
                    "description": "the network address of the Asset"
                  },
                  "port": {
                    "type": "string",
                    "description": "a service port for the Address"
                  },
                  "conn_string": {
                    "type": "string",
                    "description": "some Assets make their connections via an explicit connection string"
                  },
                  "user": {
                    "type": "string",
                    "description": "a User ID to associate with this Asset"
                  },
                  "password": {
                    "type": "string",
                    "description": "a Password to associate with this Asset"
                  },
                  "shared_credential": {
                    "type": "string",
                    "description": "the name of a Shared Credential to use"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "name": "string",
                    "status": "string",
                    "db_name": "string",
                    "address": "string",
                    "port": "string",
                    "conn_string": "string",
                    "user": "string",
                    "password": "string",
                    "shared_credential": "string"
                  }
                }
              }
            }
          },
          "description": "Regarding Credentials:\n\nCredentials are optional on an Asset, however if provided there are rules.\nExplicit details can be associated with *only this Asset*, or a Shared Credential can be specified.\n\nThe minimum required to create a LOCAL set of credentials on this Asset are:\n\n* `user` - a User ID for the Credential\n* `password` - a Password for the Credential\n\nTo specify a Shared Credential, provide the `shared_credential` argument, which is the name of an existing Credential.\n"
        },
        "security": [
          {
            "ctm_token": []
          }
        ]
      }
    },
    "/create_canvas_item": {
      "post": {
        "summary": "Creates a new Canvas item",
        "operationId": "post-create_canvas_item",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "ctm_token": []
          }
        ],
        "description": "Creates a new Canvas item",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "type": "string",
                    "description": "a Canvas Project name"
                  },
                  "component": {
                    "type": "string",
                    "description": "a Canvas Component name"
                  },
                  "name": {
                    "type": "string",
                    "description": "a Canvas item name"
                  },
                  "resourcedata": {
                    "type": "string",
                    "description": "the content of the item"
                  },
                  "ignoreconflicts": {
                    "type": "boolean",
                    "description": "if 'true' existing items will be overwritten"
                  }
                },
                "required": [
                  "project",
                  "component",
                  "name",
                  "resourcedata"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "project": "string",
                    "component": "string",
                    "name": "string",
                    "resourcedata": "string",
                    "ignoreconflicts": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/create_cloud": {
      "post": {
        "summary": "Creates a cloud",
        "operationId": "post-create_cloud",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a Cloud",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "a name for the new Cloud"
                  },
                  "provider": {
                    "type": "string",
                    "description": "one of the valid cloud providers"
                  },
                  "apiurl": {
                    "type": "string",
                    "description": "URL of the Cloud API endpoint"
                  },
                  "apiprotocol": {
                    "type": "string",
                    "description": "Cloud API endpoint protocol"
                  },
                  "default_account": {
                    "type": "string",
                    "description": "the name of a default Account for this Cloud"
                  }
                },
                "required": [
                  "name",
                  "provider",
                  "apiurl",
                  "apiprotocol"
                ]
              }
            }
          }
        }
      }
    },
    "/create_credential": {
      "post": {
        "summary": "Creates a new Shared Credential",
        "operationId": "post-create_credential",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string"
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "object",
                      "properties": {
                        "Description": {
                          "type": "string",
                          "minLength": 1
                        },
                        "Domain": {
                          "type": "string",
                          "minLength": 1
                        },
                        "ID": {
                          "type": "string",
                          "minLength": 1
                        },
                        "Name": {
                          "type": "string",
                          "minLength": 1
                        },
                        "SharedOrLocal": {
                          "type": "number"
                        },
                        "Type": {
                          "type": "string",
                          "minLength": 1
                        },
                        "Username": {
                          "type": "string",
                          "minLength": 1
                        }
                      },
                      "required": [
                        "Description",
                        "Domain",
                        "ID",
                        "Name",
                        "SharedOrLocal",
                        "Type",
                        "Username"
                      ]
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorDetail": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The full name of the user"
                  },
                  "username": {
                    "type": "string",
                    "description": "A login name for the user"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for the user. If password is not provided, a random password will be generated"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the Credential"
                  },
                  "domain": {
                    "type": "string",
                    "description": "A domain for the Credential"
                  }
                },
                "required": [
                  "name",
                  "username",
                  "password"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "name": "string",
                    "username": "string",
                    "password": "string",
                    "description": "string",
                    "domain": "string"
                  }
                }
              }
            }
          }
        },
        "description": "Creates a new Shared Credential\nNote: only a 'Developer' can create Credentials",
        "security": [
          {
            "ctm_token": []
          }
        ]
      }
    },
    "/create_data_map": {
      "post": {
        "summary": "Creates a data map for assets",
        "operationId": "post-create_data_map",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a data map for assets\n\nToDo: projects list argument",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of mapping used to associate"
                  },
                  "source": {
                    "type": "string",
                    "description": "Source system from which sync has to happen"
                  },
                  "destinations": {
                    "type": "string",
                    "description": "Destination systems to which the sync has to happen"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of mapping"
                  },
                  "projects": {
                    "type": "string",
                    "description": "List of project mappings across external systems"
                  }
                },
                "required": [
                  "name",
                  "source",
                  "destinations",
                  "description",
                  "projects"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "name": "string",
                    "source": "string",
                    "destinations": "string",
                    "description": "string",
                    "projects": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/create_pipeline": {
      "post": {
        "summary": "Creates a Pipeline Definition",
        "operationId": "post-create_pipeline",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a Pipeline Definition\n\nToDo: template definition",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "template": {
                    "type": "object"
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "template": {}
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/create_progression": {
      "post": {
        "summary": "",
        "operationId": "post-create_progression",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "the name of a Progression"
                  },
                  "description": {
                    "type": "string",
                    "description": "a description of the Progression"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "name": "string",
                    "description": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/create_project": {
      "post": {
        "summary": "Create a Project",
        "operationId": "post-create_project",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Create a Project\n\nToDo: response object",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": " Name of the Project"
                  },
                  "team": {
                    "type": "string",
                    "description": "Team which the Project belongs to"
                  }
                },
                "required": [
                  "name",
                  "team"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/create_tag": {
      "post": {
        "summary": "Creates a new Assignment Group",
        "operationId": "post-create_tag",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a new Assignment Group for grouping Users\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the new Tag.  (AlphaNumeric ONLY. Cannot contain spaces, punctuation or special characters.)"
                  },
                  "description": {
                    "type": "string",
                    "description": "Describe the Tag"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "name": "string",
                    "description": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/create_task": {
      "post": {
        "summary": "Creates a new Task",
        "operationId": "post-create_task",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a new Task\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "a name for the new Task"
                  },
                  "team": {
                    "type": "string",
                    "description": "Team which the task belongs to"
                  },
                  "code": {
                    "type": "string",
                    "description": "a Task code"
                  },
                  "desc": {
                    "type": "string",
                    "description": "a Task description"
                  }
                },
                "required": [
                  "name",
                  "team"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/create_task_from_json": {
      "post": {
        "summary": "Creates a new Task from a JSON",
        "operationId": "post-create_task_from_json",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a new Task from a JSON Task backup document\n\nToDo: payload and responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "json": {
                    "type": "object",
                    "description": "A properly formatted JSON representation of a Task"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/create_team": {
      "post": {
        "summary": "Creates a new team",
        "operationId": "post-create_team",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a new team\n\nToDo: reponses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "A name for the new Team"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the new Team"
                  }
                },
                "required": [
                  "name"
                ]
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "A name for the new Team"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the new Team"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "description": "Only an 'Administrator' can create teams.  If the credentials used for this API call\nare not an Administrator, the call will not succeed."
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/create_transformer_data_map": {
      "post": {
        "summary": "Creates a new data map",
        "operationId": "post-create_transformer_data_map",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a new data map\n\nToDo: field mappings for forward and backward-direction fields\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the data map"
                  },
                  "direction_type": {
                    "type": "string",
                    "description": "The direction of the mapping (forward-direction, backward-direction or bi-direction)",
                    "enum": [
                      "forward-direction",
                      "backward-direction",
                      "bi-direction"
                    ]
                  },
                  "forward-direction": {
                    "type": "string",
                    "description": "The field mappings for the forward direction"
                  },
                  "backward-direction": {
                    "type": "string",
                    "description": "The field mappings for the backward direction"
                  }
                },
                "required": [
                  "name",
                  "direction_type",
                  "forward-direction",
                  "backward-direction"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/create_user": {
      "post": {
        "summary": "Creates a new user account",
        "operationId": "post-create_user",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a new user account\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "string",
                    "description": "A login name for the user"
                  },
                  "name": {
                    "type": "string",
                    "description": "The full name of the user"
                  },
                  "role": {
                    "type": "string",
                    "description": "The user's role",
                    "enum": [
                      "Administrator",
                      "Developer",
                      "User"
                    ]
                  },
                  "teams": {
                    "type": "string",
                    "description": "A list of teams the user belongs to, along with a role for each team. Teams and roles are separated by a colon. Team/role pairs are separated by commas.",
                    "enum": [
                      "Team Administrator",
                      "Developer",
                      "User"
                    ]
                  },
                  "is_system_administrator": {
                    "type": "boolean",
                    "description": "Whether the user should have system administrator privileges. Default is false."
                  },
                  "is_shared_asset_manager": {
                    "type": "boolean",
                    "description": "Whether the user should have shared asset manager privileges. Default is false."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for the user. If password is not provided, a random password will be generated."
                  },
                  "email": {
                    "type": "string",
                    "description": "Email address for the user.  Required if 'password' is omitted."
                  },
                  "authtype": {
                    "type": "string",
                    "enum": [
                      "local",
                      "ldap"
                    ],
                    "description": "Default is 'local' if omitted."
                  },
                  "forcechange": {
                    "type": "boolean",
                    "description": "Require user to change password. Default is 'true' if omitted."
                  },
                  "status": {
                    "type": "string",
                    "description": "Status of the new account",
                    "enum": [
                      "enabled",
                      "disabled",
                      "locked"
                    ]
                  },
                  "expires": {
                    "type": "string",
                    "description": "Expiration date for this account.  Default is 'never expires'. Must be in mm/dd/yyyy format."
                  },
                  "groups": {
                    "type": "string",
                    "description": "A list of assignment groups the user belongs to. Group names cannot contain spaces. Comma delimited list."
                  },
                  "get_token": {
                    "type": "string",
                    "description": "If true, will return an automatic login token",
                    "enum": [
                      "1",
                      "yes",
                      "true"
                    ]
                  },
                  "contributors": {
                    "type": "string",
                    "description": "A list of contributors the user is mapped to. Contributors cannot contain spaces. Comma delimited list."
                  }
                },
                "required": [
                  "user",
                  "name",
                  "role",
                  "teams"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "user": "string",
                    "name": "string",
                    "role": "Administrator",
                    "teams": "Team Administrator"
                  }
                },
                "example-2": {
                  "value": {
                    "user": "string",
                    "name": "string",
                    "role": "Administrator",
                    "teams": "Team Administrator",
                    "is_system_administrator": true,
                    "is_shared_asset_manager": true,
                    "password": "string",
                    "email": "string",
                    "authtype": "local",
                    "forcechange": true,
                    "status": "enabled",
                    "expires": "string",
                    "groups": "string",
                    "get_token": "1",
                    "contributors": "string"
                  }
                }
              }
            }
          },
          "description": "Only users with the role \"System Administrator\" can create other users.  If the credentials used for this API call\ndo not have the proper permission, the call will not succeed."
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/create_webhook": {
      "post": {
        "summary": "Creates a new outbound Webhook configuration.",
        "operationId": "post-create_webhook",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a new outbound Webhook configuration.\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the Webhook configuration"
                  },
                  "destinationurl": {
                    "type": "string",
                    "description": "The URL to which events will be posted"
                  }
                },
                "required": [
                  "name",
                  "destinationurl"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_asset": {
      "post": {
        "summary": "Deletes an Asset",
        "operationId": "post-delete_asset",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Deletes an Asset\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "asset": {
                    "type": "string",
                    "description": "Either the Asset ID or Name"
                  }
                },
                "required": [
                  "asset"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_cloud_keypair": {
      "post": {
        "summary": "Removes a Key Pair from a Cloud",
        "operationId": "post-delete_cloud_keypair",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Removes a Key Pair from a Cloud\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cloud": {
                    "type": "string",
                    "description": "Name or ID of the Cloud"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the Key Pair to delete"
                  }
                },
                "required": [
                  "cloud",
                  "name"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_credential": {
      "post": {
        "summary": "Removes a Shared Credential",
        "operationId": "post-delete_credential",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Removes a Shared Credential\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "credential": {
                    "type": "string",
                    "description": "Name or ID of the Credential to delete"
                  }
                },
                "required": [
                  "credential"
                ]
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            },
            "text/html": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            },
            "text/plain": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "description": ""
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_data_map": {
      "post": {
        "summary": "Deletes data map",
        "operationId": "post-delete_data_map",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Deletes data map\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mapping_id": {
                    "type": "string",
                    "description": "data mapping to delete"
                  }
                },
                "required": [
                  "mapping_id"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_package": {
      "post": {
        "summary": "Delete a Package Definition",
        "operationId": "post-delete_package",
        "responses": {
          "200": {
            "description": "true"
          }
        },
        "description": "Delete a Package Definition. Destructive of history, and there is no undo.\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "package": {
                    "type": "string",
                    "description": "the id or name of a Package"
                  },
                  "preserve": {
                    "type": "boolean",
                    "description": "If `true`, will delete all data but preserve the actual package definition"
                  }
                },
                "required": [
                  "package"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_pipeline": {
      "post": {
        "summary": "Delete a Pipeline Definition",
        "operationId": "post-delete_pipeline",
        "responses": {
          "200": {
            "description": "true"
          }
        },
        "description": "Permanently delete a Pipeline Definition",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pipeline": {
                    "type": "string",
                    "description": "the id or name of a Pipeline Definition"
                  }
                },
                "required": [
                  "pipeline"
                ]
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/delete_pipelinegroup": {
      "post": {
        "summary": "Deletes a Pipeline Instance Group",
        "operationId": "post-delete_pipelinegroup",
        "responses": {
          "200": {
            "description": "true"
          }
        },
        "description": "Permanently delete a Pipeline Instance Group\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pg": {
                    "type": "string",
                    "description": "the '_id' of the Pipeline Instance Group"
                  }
                },
                "required": [
                  "pg"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_pipelineinstance": {
      "post": {
        "summary": "Deletes a Pipeline Instance",
        "operationId": "post-delete_pipelineinstance",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Permanently delete a Pipeline Instance\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pi": {
                    "type": "string",
                    "description": "The Name or ID of a Pipeline Instance"
                  }
                },
                "required": [
                  "pi"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_plan": {
      "post": {
        "summary": "Deletes a specific queued execution Plan",
        "operationId": "post-delete_plan",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Deletes a specific queued execution Plan\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "plan_id": {
                    "type": "string",
                    "description": "The integer ID of the Plan to delete"
                  }
                },
                "required": [
                  "plan_id"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_progression": {
      "post": {
        "summary": "Deletes a Progression Definition",
        "operationId": "post-delete_progression",
        "responses": {
          "200": {
            "description": "true"
          }
        },
        "description": "Delete a Progression Definition. Destructive of history, and there is no undo.\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "progression": {
                    "type": "string",
                    "description": "the id or name of a Progression"
                  }
                },
                "required": [
                  "progression"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_project": {
      "post": {
        "summary": "Deletes a Project",
        "operationId": "post-delete_project",
        "responses": {
          "200": {
            "description": "true or errors"
          }
        },
        "description": "Permanently deletes a Project\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "type": "string",
                    "description": "the id or name of a Project"
                  },
                  "preserve": {
                    "type": "boolean",
                    "description": "If `true`, will delete all data but preserve the actual project"
                  }
                },
                "required": [
                  "project"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_registry": {
      "post": {
        "summary": "Deletes a registry",
        "operationId": "post-delete_registry",
        "responses": {
          "200": {
            "description": "true/errors"
          }
        },
        "description": "Permanently delete a registry\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "registry": {
                    "type": "string",
                    "description": "Name of the Registry document"
                  }
                },
                "required": [
                  "registry"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_schedule": {
      "post": {
        "summary": "Deletes a Task Schedule and all queued execution Plans",
        "operationId": "post-delete_schedule",
        "responses": {
          "200": {
            "description": "nothing/error"
          }
        },
        "description": "Deletes a Task Schedule and all queued execution Plans\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "schedule_id": {
                    "type": "string",
                    "description": "The UUID of the Schedule to delete"
                  }
                },
                "required": [
                  "schedule_id"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_tag": {
      "post": {
        "summary": "Deletes a security Tag",
        "operationId": "post-delete_tag",
        "responses": {
          "200": {
            "description": "success/error"
          }
        },
        "description": "Deletes a security Tag\n\nToDo: responses\nToDo: is this a different Tag from what we now call Assignment Groups?",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the Tag"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_task": {
      "post": {
        "summary": "Deletes a Task",
        "operationId": "post-delete_task",
        "responses": {
          "200": {
            "description": "nothing/error"
          }
        },
        "description": "Deletes all versions of a Task\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "task": {
                    "type": "string",
                    "description": "Either the Task ID or Name"
                  },
                  "force_delete": {
                    "type": "string",
                    "description": "Delete the Task, even if there are historical rows and references",
                    "enum": [
                      "1",
                      "yes",
                      "true"
                    ]
                  }
                },
                "required": [
                  "task"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_transformer_data_map": {
      "post": {
        "summary": "Deletes the data map",
        "operationId": "post-delete_transformer_data_map",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Deletes the data map\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the data map"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_user": {
      "post": {
        "summary": "Deletes a user account",
        "operationId": "post-delete_user",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Deletes a user account\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "string",
                    "description": "ID or Name of the User to delete"
                  }
                },
                "required": [
                  "user"
                ]
              }
            }
          },
          "description": "Only users with the role \"System Administrator\" can delete users.  If the credentials used for this API call do not have the proper permission, the call will not succeed."
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_workitems": {
      "post": {
        "summary": "Deletes a matched set of Workitems",
        "operationId": "post-delete_workitems",
        "responses": {
          "200": {
            "description": "true/errors"
          }
        },
        "tags": [
          "Internal",
          "ToDo"
        ],
        "description": "Permanently delete a matched set of Workitems\n\nToDo: responses\nToDo: the description and argument list seems incomplete?",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "origin_project": {
                    "type": "string",
                    "description": "The Name or ID of the Project where the workitem originated"
                  }
                }
              }
            }
          },
          "description": "At least one of the following options must be provided.  These are matching criteria for the workitems to delete."
        }
      }
    },
    "/deliver_revision": {
      "post": {
        "summary": "Delivers a Package Revision",
        "operationId": "post-deliver_revision",
        "responses": {
          "200": {
            "description": "success/errors"
          }
        },
        "description": "Delivers a Package Revision out of a Progression into a Delivered condition\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "package": {
                    "type": "string",
                    "description": "Name of the Package"
                  },
                  "revision": {
                    "type": "string",
                    "description": "Revision number of a Package to deliver, takes precedence over `full_version`"
                  },
                  "full_version": {
                    "type": "string",
                    "description": "Optional Full Version of package to deliver, optional alternative selector to `revision`"
                  }
                },
                "required": [
                  "package",
                  "revision"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/describe_task_parameters": {
      "post": {
        "summary": "Describes the Parameters for a Task",
        "operationId": "post-describe_task_parameters",
        "responses": {
          "200": {
            "description": "A help document describing the Task Parameters"
          }
        },
        "description": "Describes the Parameters for a Task\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "task": {
                    "type": "string",
                    "description": "Value can be either a Task ID, Code or Name"
                  }
                },
                "required": [
                  "task"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Internal"
    },
    {
      "name": "ToDo"
    }
  ],
  "security": [
    {
      "Token 559589e35fb284021f6aa2ca": []
    }
  ]
}