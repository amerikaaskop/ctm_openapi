{
  "openapi": "3.0.0",
  "info": {
    "title": "Continuum API",
    "version": "0.1",
    "description": "A description of the Continuum API",
    "contact": {
      "name": "Rino",
      "email": "rino.vandam@digital.ai"
    }
  },
  "servers": [
    {
      "url": "http://54.209.208.115:8080/api",
      "description": "QA Automation Server"
    },
    {
      "url": "http://192.168.86.49:8080/api",
      "description": "local server"
    }
  ],
  "components": {
    "securitySchemes": {
      "ctm_token": {
        "name": "Authorization",
        "type": "apiKey",
        "in": "header",
        "description": ""
      }
    },
    "parameters": {},
    "examples": {},
    "responses": {},
    "schemas": {}
  },
  "paths": {
    "/accept_webhook": {
      "post": {
        "summary": "Accepts a webhook and runs it",
        "operationId": "post-accept_webhook",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string"
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                },
                "examples": {
                  "Valid Handler name": {
                    "value": {
                      "ErrorCode": "string",
                      "ErrorDetail": "string",
                      "ErrorMessage": "string",
                      "Method": "accept_webhook",
                      "Response": "Payload accepted"
                    }
                  },
                  "Invalid Handler name": {
                    "value": {
                      "ErrorCode": "string",
                      "ErrorDetail": "string",
                      "ErrorMessage": "string",
                      "Method": "accept_webhook",
                      "Response": "Payload accepted"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ctm_token": []
          }
        ],
        "description": "Accepts any JSON payload submitted, and runs it through the defined list of Directives",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "handler",
            "description": "name of a defined 'Webhook Handler' containing directives to apply to this payload",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "any JSON payload"
              },
              "examples": {}
            }
          }
        }
      }
    },
    "/copy_project": {
      "post": {
        "summary": "Copies a Project",
        "operationId": "post-copy_project",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Copies a Project",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "type": "string",
                    "description": "the id or name of a Project"
                  },
                  "newname": {
                    "type": "string",
                    "description": "a name for the new Project"
                  }
                },
                "required": [
                  "project",
                  "newname"
                ]
              }
            }
          }
        }
      }
    },
    "/create_package": {
      "post": {
        "summary": "Creates a Package Definition",
        "operationId": "post-create_package",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a Package Definition",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "the name of a Package"
                  },
                  "team": {
                    "type": "string",
                    "description": "Team to which the Package Definition should belong"
                  },
                  "description": {
                    "type": "string",
                    "description": "a description of the Package Definition"
                  },
                  "progression": {
                    "type": "string",
                    "description": "a Progression to associate with the Package Definition"
                  }
                },
                "required": [
                  "name",
                  "team"
                ]
              }
            }
          }
        }
      }
    },
    "/add_cloud_keypair": {
      "post": {
        "summary": "Adds a Key Pair to an existing Cloud",
        "operationId": "post-add_cloud_keypair",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string"
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "array",
                      "uniqueItems": true,
                      "minItems": 1,
                      "items": {
                        "required": [
                          "HasPassphrase",
                          "HasPrivateKey",
                          "ID",
                          "Name"
                        ],
                        "properties": {
                          "HasPassphrase": {
                            "type": "string",
                            "minLength": 1
                          },
                          "HasPrivateKey": {
                            "type": "string",
                            "minLength": 1
                          },
                          "ID": {
                            "type": "string",
                            "minLength": 1
                          },
                          "Name": {
                            "type": "string",
                            "minLength": 1
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                },
                "examples": {
                  "example": {
                    "value": {
                      "ErrorCode": "",
                      "ErrorDetail": "",
                      "ErrorMessage": "",
                      "Method": "add_cloud_keypair",
                      "Response": [
                        {
                          "HasPassphrase": "true",
                          "HasPrivateKey": "true",
                          "ID": "603fe2f2ea75d44040dd421b",
                          "Name": "Skytap"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Method": {
                      "type": "string"
                    },
                    "Response": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                },
                "examples": {
                  "example": {
                    "value": {
                      "ErrorCode": "string",
                      "ErrorDetail": "string",
                      "ErrorMessage": "string",
                      "Method": "string",
                      "Response": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cloud": {
                    "type": "string",
                    "description": "Name or ID of the Cloud to update"
                  },
                  "name": {
                    "type": "string",
                    "description": "a name for the Key Pair"
                  },
                  "private_key": {
                    "type": "string",
                    "description": "the private key"
                  },
                  "passphrase": {
                    "type": "string",
                    "description": "a passphrase for this Key Pair"
                  }
                },
                "required": [
                  "cloud",
                  "name",
                  "private_key"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "cloud": "string",
                    "name": "string",
                    "private_key": "string",
                    "passphrase": "string"
                  }
                }
              }
            }
          }
        },
        "description": "Adds a Key Pair to an existing Cloud"
      }
    },
    "/add_object_tag": {
      "post": {
        "summary": "Adds a security Tag to an object",
        "operationId": "post-add_object_tag",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string"
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                },
                "examples": {
                  "User Assignment Group": {
                    "value": {
                      "ErrorCode": "",
                      "ErrorDetail": "",
                      "ErrorMessage": "",
                      "Method": "add_object_tag",
                      "Response": "Assignment Group successfully added to object."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Method": {
                      "type": "string"
                    },
                    "Response": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                },
                "examples": {
                  "No Token": {
                    "value": {
                      "ErrorCode": "Unauthorized",
                      "ErrorDetail": "",
                      "ErrorMessage": "Authentication Failure",
                      "Method": "",
                      "Response": ""
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Adds a security Tag to an object\n",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag": {
                    "type": "string",
                    "description": "The name of the Tag"
                  },
                  "object_id": {
                    "type": "string",
                    "description": "The ID of the object"
                  },
                  "object_type": {
                    "type": "integer",
                    "description": "The numeric type of the object",
                    "enum": [
                      "1",
                      "2",
                      "3",
                      "50"
                    ]
                  }
                },
                "required": [
                  "tag",
                  "object_id",
                  "object_type"
                ]
              },
              "examples": {
                "Add Assignment Group to User": {
                  "value": {
                    "tag": "TagOne",
                    "object_id": "gsfgstaj5h2ak8",
                    "object_type": "1"
                  }
                }
              }
            }
          },
          "description": "Valid and currently implemented `object_type` values are:\n\n* 1 (User)\n* 2 (Asset)\n* 3 (Task)\n* 50 (Canvas Item)"
        },
        "parameters": []
      }
    },
    "/add_project_source": {
      "post": {
        "summary": "Marks a Project as a 'Source' Project",
        "operationId": "post-add_project_source",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string"
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "object",
                      "properties": {
                        "Message": {
                          "type": "string",
                          "minLength": 1
                        },
                        "New Endpoint": {
                          "type": "string",
                          "minLength": 1
                        }
                      },
                      "required": [
                        "Message",
                        "New Endpoint"
                      ]
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                },
                "examples": {
                  "GitHub as source": {
                    "value": {
                      "ErrorCode": "",
                      "ErrorDetail": "",
                      "ErrorMessage": "",
                      "Method": "add_project_source",
                      "Response": {
                        "Message": "[github] added as Source for Project [ProjectSourceTest]",
                        "New Endpoint": "http://192.168.86.49:8080/api/submit_change?toproject=ProjectSourceTest&token=<api-token>"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorDetail": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                },
                "examples": {
                  "No Content Type": {
                    "value": {
                      "ErrorCode": "MissingParameter",
                      "ErrorDetail": "Required parameter 'project' missing.",
                      "ErrorMessage": "",
                      "Method": "add_project_source",
                      "Response": ""
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Given a Project and an Origin this will mark a Project as a \"Source\" Project, mark the Origin as the Project's 'Changes from', and will return the webhook.",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "type": "string",
                    "description": "Name of the Project to alter"
                  },
                  "origin": {
                    "type": "string",
                    "description": "Name of the VCS to mark as the Projects 'Changes From' field",
                    "enum": [
                      "github",
                      "gitlab",
                      "ispw",
                      "tfsgit",
                      "tfvc",
                      "tfstfvs_soap",
                      "teamforgegit",
                      "teamforgesvn",
                      "bitbucket",
                      "bitbucketserver",
                      "other"
                    ]
                  },
                  "secret": {
                    "type": "string",
                    "description": "the 'Webhook Secret.' Valid only when the provided origin is 'github'. If provided with another VCS this will return an error"
                  }
                },
                "required": [
                  "project",
                  "origin"
                ]
              }
            }
          },
          "description": "Valid origin values and their definitions:\n- 'github' - GitHub Webhook\n- 'gitlab' - GitLab Webhook\n- 'ispw' - Compuware ISPW\n- 'tfsgit' - VSTS/TFS Git Webhook\n- 'tfvc' - VSTS/TFS TFVC Webhook\n- 'tfstfvs_soap' - VSTS/TFS 2013 SOAP Webhook\n- 'teamforgegit' - TeamForge Git Webhook\n- 'teamforgesvn' - TeamForge Subversion Webhook\n- 'bitbucket' - BitBucket Cloud Webhook\n- 'bitbucketserver' - BitBucket Server Webhook\n- 'other' - Continuum Format Webhook"
        },
        "parameters": []
      }
    },
    "/add_team_user": {
      "post": {
        "summary": "Add a User to a Team",
        "operationId": "post-add_team_user",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string"
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                },
                "examples": {
                  "Success": {
                    "value": {
                      "ErrorCode": "",
                      "ErrorDetail": "",
                      "ErrorMessage": "",
                      "Method": "add_team_user",
                      "Response": "Add operation successful."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                },
                "examples": {
                  "No Such Team": {
                    "value": {
                      "ErrorCode": "GetError",
                      "ErrorDetail": "",
                      "ErrorMessage": "Specified Team not found.",
                      "Method": "add_team_user",
                      "Response": ""
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Method": {
                      "type": "string"
                    },
                    "Response": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                },
                "examples": {
                  "Auth Failure": {
                    "value": {
                      "ErrorCode": "Unauthorized",
                      "ErrorDetail": "",
                      "ErrorMessage": "Authentication Failure",
                      "Method": "",
                      "Response": ""
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Only a 'Team Administrator' can manage Team membership.  If the credentials used for this API call are not a Team Administrator for the specified Team, the call will not succeed.",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "team": {
                    "type": "string",
                    "description": "Name or ID of the Team to change"
                  },
                  "user": {
                    "type": "string",
                    "description": "Name or ID of the User to add"
                  },
                  "team_role": {
                    "type": "string",
                    "description": "Name of the Role for new user to adopt on new team"
                  }
                },
                "required": [
                  "team",
                  "user",
                  "team_role"
                ]
              }
            }
          },
          "description": ""
        }
      }
    },
    "/associate_commits_to_v1_workitem": {
      "post": {
        "summary": "Associate commits to v1 workitem",
        "operationId": "post-associate_commits_to_v1_workitem",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string"
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                },
                "examples": {
                  "Changes Updated": {
                    "value": {
                      "ErrorCode": "",
                      "ErrorDetail": "",
                      "ErrorMessage": "",
                      "Method": "associate_commits_to_v1_workitem",
                      "Response": "Successfully updated Changes [[u'603eaa74681078188b4a6d4f']] with Workitem [B-0114]"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorDetail": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                },
                "examples": {
                  "Missing Param": {
                    "value": {
                      "ErrorCode": "MissingParameter",
                      "ErrorDetail": "Required parameter 'commit_shas' missing.",
                      "ErrorMessage": "",
                      "Method": "associate_commits_to_v1_workitem",
                      "Response": ""
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Method": {
                      "type": "string"
                    },
                    "Response": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                },
                "examples": {
                  "Unauthorized": {
                    "value": {
                      "ErrorCode": "Unauthorized",
                      "ErrorDetail": "",
                      "ErrorMessage": "Authentication Failure",
                      "Method": "",
                      "Response": ""
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Associate commits to v1 workitem",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "commit_shas": {
                    "type": "array",
                    "description": "a list of all the Changes to associate to a Workitem",
                    "items": {
                      "type": "string"
                    }
                  },
                  "workitem_associated_by": {
                    "type": "string",
                    "description": "User that made the association in Digital.ai Agility"
                  },
                  "workitem_number": {
                    "type": "string",
                    "description": "Workitem number from Digital.ai Agility"
                  },
                  "instance_url": {
                    "type": "string",
                    "description": "Digital.ai Agility instance url"
                  }
                },
                "required": [
                  "commit_shas",
                  "workitem_associated_by",
                  "workitem_number",
                  "instance_url"
                ]
              }
            }
          },
          "description": ""
        },
        "tags": [
          "Internal"
        ]
      }
    },
    "/build_stream": {
      "post": {
        "summary": "Gets all pipeline instances that a workitem participated in",
        "operationId": "post-build_stream",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string"
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "array",
                      "items": {
                        "required": [],
                        "properties": {}
                      }
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorDetail": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                },
                "examples": {
                  "Param Missing": {
                    "value": {
                      "ErrorCode": "MissingParameter",
                      "ErrorDetail": "Required parameter 'number' missing.",
                      "ErrorMessage": "",
                      "Method": "build_stream",
                      "Response": ""
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Method": {
                      "type": "string"
                    },
                    "Response": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                }
              }
            }
          }
        },
        "description": "Gets all pipeline instances that a workitem participated in\n",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "number": {
                    "type": "string",
                    "description": "a Workitem Identifier"
                  }
                },
                "required": [
                  "number"
                ]
              }
            }
          }
        },
        "tags": [
          "Internal"
        ]
      }
    },
    "/cancel_pipelineinstance": {
      "post": {
        "summary": "Cancels a running Pipeline Instance",
        "operationId": "post-cancel_pipelineinstance",
        "responses": {
          "200": {
            "description": "true"
          }
        },
        "description": "Cancel a running Pipeline Instance\nAll Pending or Processing statuses will be set to Canceled",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pi": {
                    "type": "string",
                    "description": "The Name or ID of a Pipeline Instance"
                  }
                },
                "required": [
                  "pi"
                ]
              }
            }
          }
        }
      }
    },
    "/cancel_transformer_event": {
      "post": {
        "summary": "Cancels a failed event",
        "operationId": "post-cancel_transformer_event",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Cancels a failed event",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inbound_id": {
                    "type": "string",
                    "description": "The inbound id of the failed event"
                  }
                },
                "required": [
                  "inbound_id"
                ]
              }
            }
          }
        }
      }
    },
    "/check_transformer_data_map_name_exists": {
      "post": {
        "summary": "Checks if a mapping name already exists",
        "operationId": "post-check_transformer_data_map_name_exists",
        "responses": {
          "200": {
            "description": "true or false"
          }
        },
        "description": "Checks if a mapping name already exists",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The mapping name to be checked for existence"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/complete_activity": {
      "post": {
        "summary": "Completes an Activity",
        "operationId": "post-complete_activity",
        "responses": {
          "200": {
            "description": "success"
          }
        },
        "description": "Given a Phase, Package Name, Revision (or Full Version), and Activity Name - will complete that Activity with either 'success' or 'failure'",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "package": {
                    "type": "string",
                    "description": "Name of the Package to promote to a progression Phase"
                  },
                  "revision": {
                    "type": "string",
                    "description": "Revision number of a Package to promote, takes precedence over `full_version'"
                  },
                  "full_version": {
                    "type": "string",
                    "description": "Full Version of package to promote, optional alternative selector to `revision`"
                  },
                  "phase": {
                    "type": "string",
                    "description": "Name of the Phase containing the Activity to complete"
                  },
                  "activity": {
                    "type": "string",
                    "description": "Name of the Activity to complete"
                  },
                  "notes": {
                    "type": "string",
                    "description": "Notes to be attached to the Activity. (May be configured to be required.)"
                  },
                  "failure": {
                    "type": "string",
                    "description": "Mark the Activity as a 'failure'.  (`success` if omitted.)"
                  },
                  "forcewith": {
                    "type": "boolean",
                    "description": "Force completion by setting all Controls to `pass` or `fail`"
                  },
                  "completion_time": {
                    "type": "string",
                    "description": "Mark the activity complete at a specified time.\n    * Will default to start time if earlier time is provided.\n    * Will assume UTC if no tz offset provided and nothing passed to 'timezone' argument.\n    * iso8601 or YYYY-MM-DD-HH:mm:SS format perferred"
                  },
                  "timezone": {
                    "type": "string",
                    "description": "Optional modifier for 'completion_time'.\n    * This will allow for the conversion to UTC if completion_time is not UTC.\n    * Format such as \"Europe/Lisbon\" or \"US/Eastern\"\n    * If timezone is provided, but the 'completion_time' contains an offset, timezone will be ignored."
                  }
                },
                "required": [
                  "package",
                  "revision",
                  "full_version",
                  "phase",
                  "activity"
                ]
              }
            }
          }
        }
      }
    },
    "/configure_plugin": {
      "post": {
        "summary": "Configures a specific Plugin",
        "operationId": "post-configure_plugin",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "",
                "type": "object",
                "properties": {
                  "plugin": {
                    "type": "object",
                    "properties": {
                      "_plugin": {
                        "type": "string",
                        "minLength": 1
                      },
                      "_enabled": {
                        "type": "boolean"
                      },
                      "instances": {
                        "type": "array",
                        "uniqueItems": true,
                        "minItems": 1,
                        "items": {
                          "required": [],
                          "properties": {}
                        }
                      },
                      "team": {
                        "type": "string",
                        "minLength": 1
                      }
                    },
                    "required": [
                      "_plugin",
                      "_enabled",
                      "instances",
                      "team"
                    ]
                  }
                },
                "required": [
                  "plugin"
                ]
              }
            }
          }
        },
        "security": [
          {
            "ctm_token": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string"
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "string",
                      "minLength": 1
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "ErrorCode": "string",
                      "ErrorDetail": "string",
                      "ErrorMessage": "string",
                      "Method": "string",
                      "Response": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                }
              }
            }
          }
        },
        "description": "The following keys will be encrypted if provided: `api_token`, `password`.\nNOTE:  This is a destructive operation!  Configuring a plugin's instances will replace all previous configured instances for the given team.  If no team is specified, all global instances of the plugin will be replaced with the new configuration instead.  If you wish to reconfigure any one particular instance of the plugin, see 'configure_plugin_instance'."
      }
    },
    "/configure_plugin_instance": {
      "post": {
        "summary": "Adds a new instance for a particular plugin type",
        "operationId": "post-configure_plugin_instance",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Add a new instance for a particular plugin type. \nNote: does not overwrite existing instances.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "",
                "type": "object",
                "properties": {
                  "plugin": {
                    "type": "string",
                    "minLength": 1
                  },
                  "name": {
                    "type": "string",
                    "minLength": 1
                  },
                  "url": {
                    "type": "string",
                    "minLength": 1
                  },
                  "token": {
                    "type": "string",
                    "minLength": 1
                  },
                  "owner": {
                    "type": "string",
                    "minLength": 1
                  },
                  "is_default": {
                    "type": "boolean"
                  },
                  "team": {
                    "type": "string",
                    "minLength": 1
                  }
                },
                "required": [
                  "plugin",
                  "name"
                ]
              }
            }
          },
          "description": ""
        }
      }
    },
    "/create_account": {
      "post": {
        "summary": "Creates a Cloud Account",
        "operationId": "post-create_account",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a Cloud Account",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/create_asset": {
      "post": {
        "summary": "Creates an Asset",
        "operationId": "post-create_asset",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "description": "Creates an Asset\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "a name for the new Asset"
                  },
                  "status": {
                    "type": "string",
                    "description": "either 'Active' or 'Inactive'. ('Active' if omitted.)"
                  },
                  "db_name": {
                    "type": "string",
                    "description": "a Database name"
                  },
                  "address": {
                    "type": "string",
                    "description": "the network address of the Asset"
                  },
                  "port": {
                    "type": "string",
                    "description": "a service port for the Address"
                  },
                  "conn_string": {
                    "type": "string",
                    "description": "some Assets make their connections via an explicit connection string"
                  },
                  "user": {
                    "type": "string",
                    "description": "a User ID to associate with this Asset"
                  },
                  "password": {
                    "type": "string",
                    "description": "a Password to associate with this Asset"
                  },
                  "shared_credential": {
                    "type": "string",
                    "description": "the name of a Shared Credential to use"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "name": "string",
                    "status": "string",
                    "db_name": "string",
                    "address": "string",
                    "port": "string",
                    "conn_string": "string",
                    "user": "string",
                    "password": "string",
                    "shared_credential": "string"
                  }
                }
              }
            }
          },
          "description": "Regarding Credentials:\n\nCredentials are optional on an Asset, however if provided there are rules.\nExplicit details can be associated with *only this Asset*, or a Shared Credential can be specified.\n\nThe minimum required to create a LOCAL set of credentials on this Asset are:\n\n* `user` - a User ID for the Credential\n* `password` - a Password for the Credential\n\nTo specify a Shared Credential, provide the `shared_credential` argument, which is the name of an existing Credential.\n"
        },
        "security": [
          {
            "ctm_token": []
          }
        ]
      }
    },
    "/create_canvas_item": {
      "post": {
        "summary": "Creates a new Canvas item",
        "operationId": "post-create_canvas_item",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "ctm_token": []
          }
        ],
        "description": "Creates a new Canvas item",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "type": "string",
                    "description": "a Canvas Project name"
                  },
                  "component": {
                    "type": "string",
                    "description": "a Canvas Component name"
                  },
                  "name": {
                    "type": "string",
                    "description": "a Canvas item name"
                  },
                  "resourcedata": {
                    "type": "string",
                    "description": "the content of the item"
                  },
                  "ignoreconflicts": {
                    "type": "boolean",
                    "description": "if 'true' existing items will be overwritten"
                  }
                },
                "required": [
                  "project",
                  "component",
                  "name",
                  "resourcedata"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "project": "string",
                    "component": "string",
                    "name": "string",
                    "resourcedata": "string",
                    "ignoreconflicts": true
                  }
                }
              }
            }
          }
        }
      }
    },
    "/create_cloud": {
      "post": {
        "summary": "Creates a cloud",
        "operationId": "post-create_cloud",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a Cloud",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "a name for the new Cloud"
                  },
                  "provider": {
                    "type": "string",
                    "description": "one of the valid cloud providers"
                  },
                  "apiurl": {
                    "type": "string",
                    "description": "URL of the Cloud API endpoint"
                  },
                  "apiprotocol": {
                    "type": "string",
                    "description": "Cloud API endpoint protocol"
                  },
                  "default_account": {
                    "type": "string",
                    "description": "the name of a default Account for this Cloud"
                  }
                },
                "required": [
                  "name",
                  "provider",
                  "apiurl",
                  "apiprotocol"
                ]
              }
            }
          }
        }
      }
    },
    "/create_credential": {
      "post": {
        "summary": "Creates a new Shared Credential",
        "operationId": "post-create_credential",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string"
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "object",
                      "properties": {
                        "Description": {
                          "type": "string",
                          "minLength": 1
                        },
                        "Domain": {
                          "type": "string",
                          "minLength": 1
                        },
                        "ID": {
                          "type": "string",
                          "minLength": 1
                        },
                        "Name": {
                          "type": "string",
                          "minLength": 1
                        },
                        "SharedOrLocal": {
                          "type": "number"
                        },
                        "Type": {
                          "type": "string",
                          "minLength": 1
                        },
                        "Username": {
                          "type": "string",
                          "minLength": 1
                        }
                      },
                      "required": [
                        "Description",
                        "Domain",
                        "ID",
                        "Name",
                        "SharedOrLocal",
                        "Type",
                        "Username"
                      ]
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorDetail": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The full name of the user"
                  },
                  "username": {
                    "type": "string",
                    "description": "A login name for the user"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for the user. If password is not provided, a random password will be generated"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the Credential"
                  },
                  "domain": {
                    "type": "string",
                    "description": "A domain for the Credential"
                  }
                },
                "required": [
                  "name",
                  "username",
                  "password"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "name": "string",
                    "username": "string",
                    "password": "string",
                    "description": "string",
                    "domain": "string"
                  }
                }
              }
            }
          }
        },
        "description": "Creates a new Shared Credential\nNote: only a 'Developer' can create Credentials",
        "security": [
          {
            "ctm_token": []
          }
        ]
      }
    },
    "/create_data_map": {
      "post": {
        "summary": "Creates a data map for assets",
        "operationId": "post-create_data_map",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a data map for assets\n\nToDo: projects list argument",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of mapping used to associate"
                  },
                  "source": {
                    "type": "string",
                    "description": "Source system from which sync has to happen"
                  },
                  "destinations": {
                    "type": "string",
                    "description": "Destination systems to which the sync has to happen"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of mapping"
                  },
                  "projects": {
                    "type": "string",
                    "description": "List of project mappings across external systems"
                  }
                },
                "required": [
                  "name",
                  "source",
                  "destinations",
                  "description",
                  "projects"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "name": "string",
                    "source": "string",
                    "destinations": "string",
                    "description": "string",
                    "projects": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/create_pipeline": {
      "post": {
        "summary": "Creates a Pipeline Definition",
        "operationId": "post-create_pipeline",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a Pipeline Definition\n\nToDo: template definition",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "template": {
                    "type": "object"
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "template": {}
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/create_progression": {
      "post": {
        "summary": "",
        "operationId": "post-create_progression",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "the name of a Progression"
                  },
                  "description": {
                    "type": "string",
                    "description": "a description of the Progression"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "name": "string",
                    "description": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/create_project": {
      "post": {
        "summary": "Create a Project",
        "operationId": "post-create_project",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Create a Project\n\nToDo: response object",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": " Name of the Project"
                  },
                  "team": {
                    "type": "string",
                    "description": "Team which the Project belongs to"
                  }
                },
                "required": [
                  "name",
                  "team"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/create_tag": {
      "post": {
        "summary": "Creates a new Assignment Group",
        "operationId": "post-create_tag",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a new Assignment Group for grouping Users\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the new Tag.  (AlphaNumeric ONLY. Cannot contain spaces, punctuation or special characters.)"
                  },
                  "description": {
                    "type": "string",
                    "description": "Describe the Tag"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "name": "string",
                    "description": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/create_task": {
      "post": {
        "summary": "Creates a new Task",
        "operationId": "post-create_task",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a new Task\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "a name for the new Task"
                  },
                  "team": {
                    "type": "string",
                    "description": "Team which the task belongs to"
                  },
                  "code": {
                    "type": "string",
                    "description": "a Task code"
                  },
                  "desc": {
                    "type": "string",
                    "description": "a Task description"
                  }
                },
                "required": [
                  "name",
                  "team"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/create_task_from_json": {
      "post": {
        "summary": "Creates a new Task from a JSON",
        "operationId": "post-create_task_from_json",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a new Task from a JSON Task backup document\n\nToDo: payload and responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "json": {
                    "type": "object",
                    "description": "A properly formatted JSON representation of a Task"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/create_team": {
      "post": {
        "summary": "Creates a new team",
        "operationId": "post-create_team",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a new team\n\nToDo: reponses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "A name for the new Team"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the new Team"
                  }
                },
                "required": [
                  "name"
                ]
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "A name for the new Team"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description of the new Team"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "description": "Only an 'Administrator' can create teams.  If the credentials used for this API call\nare not an Administrator, the call will not succeed."
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/create_transformer_data_map": {
      "post": {
        "summary": "Creates a new data map",
        "operationId": "post-create_transformer_data_map",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a new data map\n\nToDo: field mappings for forward and backward-direction fields\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the data map"
                  },
                  "direction_type": {
                    "type": "string",
                    "description": "The direction of the mapping (forward-direction, backward-direction or bi-direction)",
                    "enum": [
                      "forward-direction",
                      "backward-direction",
                      "bi-direction"
                    ]
                  },
                  "forward-direction": {
                    "type": "string",
                    "description": "The field mappings for the forward direction"
                  },
                  "backward-direction": {
                    "type": "string",
                    "description": "The field mappings for the backward direction"
                  }
                },
                "required": [
                  "name",
                  "direction_type",
                  "forward-direction",
                  "backward-direction"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/create_user": {
      "post": {
        "summary": "Creates a new user account",
        "operationId": "post-create_user",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a new user account\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "string",
                    "description": "A login name for the user"
                  },
                  "name": {
                    "type": "string",
                    "description": "The full name of the user"
                  },
                  "role": {
                    "type": "string",
                    "description": "The user's role",
                    "enum": [
                      "Administrator",
                      "Developer",
                      "User"
                    ]
                  },
                  "teams": {
                    "type": "string",
                    "description": "A list of teams the user belongs to, along with a role for each team. Teams and roles are separated by a colon. Team/role pairs are separated by commas.",
                    "enum": [
                      "Team Administrator",
                      "Developer",
                      "User"
                    ]
                  },
                  "is_system_administrator": {
                    "type": "boolean",
                    "description": "Whether the user should have system administrator privileges. Default is false."
                  },
                  "is_shared_asset_manager": {
                    "type": "boolean",
                    "description": "Whether the user should have shared asset manager privileges. Default is false."
                  },
                  "password": {
                    "type": "string",
                    "description": "Password for the user. If password is not provided, a random password will be generated."
                  },
                  "email": {
                    "type": "string",
                    "description": "Email address for the user.  Required if 'password' is omitted."
                  },
                  "authtype": {
                    "type": "string",
                    "enum": [
                      "local",
                      "ldap"
                    ],
                    "description": "Default is 'local' if omitted."
                  },
                  "forcechange": {
                    "type": "boolean",
                    "description": "Require user to change password. Default is 'true' if omitted."
                  },
                  "status": {
                    "type": "string",
                    "description": "Status of the new account",
                    "enum": [
                      "enabled",
                      "disabled",
                      "locked"
                    ]
                  },
                  "expires": {
                    "type": "string",
                    "description": "Expiration date for this account.  Default is 'never expires'. Must be in mm/dd/yyyy format."
                  },
                  "groups": {
                    "type": "string",
                    "description": "A list of assignment groups the user belongs to. Group names cannot contain spaces. Comma delimited list."
                  },
                  "get_token": {
                    "type": "string",
                    "description": "If true, will return an automatic login token",
                    "enum": [
                      "1",
                      "yes",
                      "true"
                    ]
                  },
                  "contributors": {
                    "type": "string",
                    "description": "A list of contributors the user is mapped to. Contributors cannot contain spaces. Comma delimited list."
                  }
                },
                "required": [
                  "user",
                  "name",
                  "role",
                  "teams"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "user": "string",
                    "name": "string",
                    "role": "Administrator",
                    "teams": "Team Administrator"
                  }
                },
                "example-2": {
                  "value": {
                    "user": "string",
                    "name": "string",
                    "role": "Administrator",
                    "teams": "Team Administrator",
                    "is_system_administrator": true,
                    "is_shared_asset_manager": true,
                    "password": "string",
                    "email": "string",
                    "authtype": "local",
                    "forcechange": true,
                    "status": "enabled",
                    "expires": "string",
                    "groups": "string",
                    "get_token": "1",
                    "contributors": "string"
                  }
                }
              }
            }
          },
          "description": "Only users with the role \"System Administrator\" can create other users.  If the credentials used for this API call\ndo not have the proper permission, the call will not succeed."
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/create_webhook": {
      "post": {
        "summary": "Creates a new outbound Webhook configuration.",
        "operationId": "post-create_webhook",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a new outbound Webhook configuration.\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the Webhook configuration"
                  },
                  "destinationurl": {
                    "type": "string",
                    "description": "The URL to which events will be posted"
                  }
                },
                "required": [
                  "name",
                  "destinationurl"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_asset": {
      "post": {
        "summary": "Deletes an Asset",
        "operationId": "post-delete_asset",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Deletes an Asset\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "asset": {
                    "type": "string",
                    "description": "Either the Asset ID or Name"
                  }
                },
                "required": [
                  "asset"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_cloud_keypair": {
      "post": {
        "summary": "Removes a Key Pair from a Cloud",
        "operationId": "post-delete_cloud_keypair",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Removes a Key Pair from a Cloud\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cloud": {
                    "type": "string",
                    "description": "Name or ID of the Cloud"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the Key Pair to delete"
                  }
                },
                "required": [
                  "cloud",
                  "name"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_credential": {
      "post": {
        "summary": "Removes a Shared Credential",
        "operationId": "post-delete_credential",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Removes a Shared Credential\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "credential": {
                    "type": "string",
                    "description": "Name or ID of the Credential to delete"
                  }
                },
                "required": [
                  "credential"
                ]
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            },
            "text/html": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            },
            "text/plain": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "description": ""
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_data_map": {
      "post": {
        "summary": "Deletes data map",
        "operationId": "post-delete_data_map",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Deletes data map\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mapping_id": {
                    "type": "string",
                    "description": "data mapping to delete"
                  }
                },
                "required": [
                  "mapping_id"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_package": {
      "post": {
        "summary": "Delete a Package Definition",
        "operationId": "post-delete_package",
        "responses": {
          "200": {
            "description": "true"
          }
        },
        "description": "Delete a Package Definition. Destructive of history, and there is no undo.\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "package": {
                    "type": "string",
                    "description": "the id or name of a Package"
                  },
                  "preserve": {
                    "type": "boolean",
                    "description": "If `true`, will delete all data but preserve the actual package definition"
                  }
                },
                "required": [
                  "package"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_pipeline": {
      "post": {
        "summary": "Delete a Pipeline Definition",
        "operationId": "post-delete_pipeline",
        "responses": {
          "200": {
            "description": "true"
          }
        },
        "description": "Permanently delete a Pipeline Definition",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pipeline": {
                    "type": "string",
                    "description": "the id or name of a Pipeline Definition"
                  }
                },
                "required": [
                  "pipeline"
                ]
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/delete_pipelinegroup": {
      "post": {
        "summary": "Deletes a Pipeline Instance Group",
        "operationId": "post-delete_pipelinegroup",
        "responses": {
          "200": {
            "description": "true"
          }
        },
        "description": "Permanently delete a Pipeline Instance Group\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pg": {
                    "type": "string",
                    "description": "the '_id' of the Pipeline Instance Group"
                  }
                },
                "required": [
                  "pg"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_pipelineinstance": {
      "post": {
        "summary": "Deletes a Pipeline Instance",
        "operationId": "post-delete_pipelineinstance",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Permanently delete a Pipeline Instance\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pi": {
                    "type": "string",
                    "description": "The Name or ID of a Pipeline Instance"
                  }
                },
                "required": [
                  "pi"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_plan": {
      "post": {
        "summary": "Deletes a specific queued execution Plan",
        "operationId": "post-delete_plan",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Deletes a specific queued execution Plan\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "plan_id": {
                    "type": "string",
                    "description": "The integer ID of the Plan to delete"
                  }
                },
                "required": [
                  "plan_id"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_progression": {
      "post": {
        "summary": "Deletes a Progression Definition",
        "operationId": "post-delete_progression",
        "responses": {
          "200": {
            "description": "true"
          }
        },
        "description": "Delete a Progression Definition. Destructive of history, and there is no undo.\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "progression": {
                    "type": "string",
                    "description": "the id or name of a Progression"
                  }
                },
                "required": [
                  "progression"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_project": {
      "post": {
        "summary": "Deletes a Project",
        "operationId": "post-delete_project",
        "responses": {
          "200": {
            "description": "true or errors"
          }
        },
        "description": "Permanently deletes a Project\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "type": "string",
                    "description": "the id or name of a Project"
                  },
                  "preserve": {
                    "type": "boolean",
                    "description": "If `true`, will delete all data but preserve the actual project"
                  }
                },
                "required": [
                  "project"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_registry": {
      "post": {
        "summary": "Deletes a registry",
        "operationId": "post-delete_registry",
        "responses": {
          "200": {
            "description": "true/errors"
          }
        },
        "description": "Permanently delete a registry\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "registry": {
                    "type": "string",
                    "description": "Name of the Registry document"
                  }
                },
                "required": [
                  "registry"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_schedule": {
      "post": {
        "summary": "Deletes a Task Schedule and all queued execution Plans",
        "operationId": "post-delete_schedule",
        "responses": {
          "200": {
            "description": "nothing/error"
          }
        },
        "description": "Deletes a Task Schedule and all queued execution Plans\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "schedule_id": {
                    "type": "string",
                    "description": "The UUID of the Schedule to delete"
                  }
                },
                "required": [
                  "schedule_id"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_tag": {
      "post": {
        "summary": "Deletes a security Tag",
        "operationId": "post-delete_tag",
        "responses": {
          "200": {
            "description": "success/error"
          }
        },
        "description": "Deletes a security Tag\n\nToDo: responses\nToDo: is this a different Tag from what we now call Assignment Groups?",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the Tag"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_task": {
      "post": {
        "summary": "Deletes a Task",
        "operationId": "post-delete_task",
        "responses": {
          "200": {
            "description": "nothing/error"
          }
        },
        "description": "Deletes all versions of a Task\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "task": {
                    "type": "string",
                    "description": "Either the Task ID or Name"
                  },
                  "force_delete": {
                    "type": "string",
                    "description": "Delete the Task, even if there are historical rows and references",
                    "enum": [
                      "1",
                      "yes",
                      "true"
                    ]
                  }
                },
                "required": [
                  "task"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_transformer_data_map": {
      "post": {
        "summary": "Deletes the data map",
        "operationId": "post-delete_transformer_data_map",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Deletes the data map\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the data map"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_user": {
      "post": {
        "summary": "Deletes a user account",
        "operationId": "post-delete_user",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Deletes a user account\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "string",
                    "description": "ID or Name of the User to delete"
                  }
                },
                "required": [
                  "user"
                ]
              }
            }
          },
          "description": "Only users with the role \"System Administrator\" can delete users.  If the credentials used for this API call do not have the proper permission, the call will not succeed."
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/delete_workitems": {
      "post": {
        "summary": "Deletes a matched set of Workitems",
        "operationId": "post-delete_workitems",
        "responses": {
          "200": {
            "description": "true/errors"
          }
        },
        "tags": [
          "Internal",
          "ToDo"
        ],
        "description": "Permanently delete a matched set of Workitems\n\nToDo: responses\nToDo: the description and argument list seems incomplete?",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "origin_project": {
                    "type": "string",
                    "description": "The Name or ID of the Project where the workitem originated"
                  }
                }
              }
            }
          },
          "description": "At least one of the following options must be provided.  These are matching criteria for the workitems to delete."
        }
      }
    },
    "/deliver_revision": {
      "post": {
        "summary": "Delivers a Package Revision",
        "operationId": "post-deliver_revision",
        "responses": {
          "200": {
            "description": "success/errors"
          }
        },
        "description": "Delivers a Package Revision out of a Progression into a Delivered condition\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "package": {
                    "type": "string",
                    "description": "Name of the Package"
                  },
                  "revision": {
                    "type": "string",
                    "description": "Revision number of a Package to deliver, takes precedence over `full_version`"
                  },
                  "full_version": {
                    "type": "string",
                    "description": "Optional Full Version of package to deliver, optional alternative selector to `revision`"
                  }
                },
                "required": [
                  "package",
                  "revision"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/describe_task_parameters": {
      "post": {
        "summary": "Describes the Parameters for a Task",
        "operationId": "post-describe_task_parameters",
        "responses": {
          "200": {
            "description": "A help document describing the Task Parameters"
          }
        },
        "description": "Describes the Parameters for a Task\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "task": {
                    "type": "string",
                    "description": "Value can be either a Task ID, Code or Name"
                  }
                },
                "required": [
                  "task"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/edit_email_configuration": {
      "post": {
        "summary": "Configure email notification",
        "operationId": "post-edit_email_configuration",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Configure email notification for the data map\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the data map"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/export_canvas": {
      "post": {
        "summary": "Exports a document with all Canvas items",
        "operationId": "post-export_canvas",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Generates an export JSON document all Canvas items.\n\nThis function is capable of exporting items from the \"filesystem\" repository, which is an administrative feature.\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "type": "string",
                    "description": "filter by a Canvas Project name"
                  },
                  "component": {
                    "type": "string",
                    "description": "filter by a Canvas Component. (Project is required)"
                  },
                  "repository": {
                    "type": "string",
                    "description": "specify the repository ('file' or 'db', 'db' if omitted)"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/export_catalog": {
      "post": {
        "summary": "Export Catalog",
        "operationId": "post-export_catalog",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Export all Project, Pipeline, Package, and Task definitions to a catalog as a JSON document\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "tags": [
          "ToDo"
        ]
      }
    },
    "/export_package": {
      "post": {
        "summary": "Export a Package Definition",
        "operationId": "post-export_package",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Export a Package Definition as a portable backup JSON document\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "package": {
                    "type": "string",
                    "description": "the id or name of a Package"
                  }
                },
                "required": [
                  "package"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/export_pipeline": {
      "post": {
        "summary": "Export a Pipeline Definition",
        "operationId": "post-export_pipeline",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Export a Pipeline Definition as a portable backup JSON document\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pipeline": {
                    "type": "string",
                    "description": "the id or name of a Pipeline Definition"
                  }
                },
                "required": [
                  "pipeline"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/export_plugins": {
      "get": {
        "summary": "Your GET endpoint",
        "tags": [
          "ToDo"
        ],
        "responses": {},
        "operationId": "get-export_plugins",
        "description": "ToDo: currently no documentation in /api at all for this path"
      }
    },
    "/export_progression": {
      "post": {
        "summary": "Export a Progression Definition",
        "operationId": "post-export_progression",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Export a Progression Definition as a portable backup JSON document\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "progression": {
                    "type": "string",
                    "description": "the id or name of a Progression"
                  }
                },
                "required": [
                  "progression"
                ]
              }
            }
          },
          "description": ""
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/export_project": {
      "post": {
        "summary": "Gets a Project object for export",
        "operationId": "post-export_project",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets a Project object for export.  (Will not include the `_id`)\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "type": "string",
                    "description": "the id or name of a Project"
                  }
                },
                "required": [
                  "project"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/export_task": {
      "post": {
        "summary": "Create a backup file for a single Task",
        "operationId": "post-export_task",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Create a backup file for a single Task\n\nToDo: responses\n",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "task": {
                    "type": "string",
                    "description": "Value can be either a Task ID, Code or Name"
                  },
                  "include_refs": {
                    "type": "boolean",
                    "description": "If true, will analyze each task and include any referenced Tasks"
                  }
                },
                "required": [
                  "task"
                ]
              }
            }
          },
          "description": "The behavior of this command is different depending on the `Accept` header.\n\n- If 'application/json' (default), it will return a JSON list of individual Task documents\n- If 'application/xml' OR 'text/plain', it will return an XML document of Tasks"
        }
      }
    },
    "/get_account": {
      "post": {
        "summary": "Gets a Cloud Account",
        "operationId": "post-get_account",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets a Cloud Account\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": " a Cloud Account name or ID"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/get_asset": {
      "post": {
        "summary": "Gets an Asset",
        "operationId": "post-get_asset",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets an Asset\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "asset": {
                    "type": "string",
                    "description": "an Asset Name or ID"
                  }
                },
                "required": [
                  "asset"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/get_cloud": {
      "post": {
        "summary": "Gets a Cloud object",
        "operationId": "post-get_cloud",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets a Cloud object\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "a Cloud name or ID"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/get_data_map": {
      "post": {
        "summary": "Gets list of data mappings",
        "operationId": "post-get_data_map",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets list of data mappings\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mapping_id": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "description": "If no 'mapping_id' is supplied, return all mappings"
        }
      }
    },
    "/get_feature_deliverycategory": {
      "post": {
        "summary": "Get the `effective delivery category` for a feature",
        "operationId": "post-get_feature_deliverycategory",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Get the `effective delivery category` for a feature, as determined by the condition of all that features workitems\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The internal `_id` OR the authoritative `ID` from the origin system OR the `key` (user facing identifier) from the origin system"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        }
      }
    },
    "/get_license": {
      "post": {
        "summary": "Gets the license details",
        "operationId": "post-get_license",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets the license details\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "license": {
                    "type": "string",
                    "description": "The text of a license key provided by Continuum"
                  }
                },
                "required": [
                  "license"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/get_log": {
      "post": {
        "summary": "Gets the log for a specific service or automation instance",
        "operationId": "post-get_log",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets the log for a specific service or automation instance\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "process": {
                    "type": "string",
                    "description": "the name of the process of the log to retrieve"
                  },
                  "instance": {
                    "type": "string",
                    "description": "If process represents instanced data (such as pipelines or tasks), the `instance` is also required"
                  },
                  "lines": {
                    "type": "string",
                    "description": "The number of log lines to retrieve.  (An integer, or the word `all`.  100 lines if omitted)"
                  },
                  "level": {
                    "type": "string",
                    "description": "Filter lines to a specific debug logging level _and higher_.  Default is all levels.  (Valid values: 10 (DEBUG), 20 (INFO), 30 (WARNING), 40 (ERROR), 50 (CRITICAL))"
                  },
                  "concatenate": {
                    "type": "string",
                    "description": "Concatenate log lines into a single text value.  Default is 'false' - returning an array of rows - if omitted. (Valid values: 'true' or 'false')"
                  }
                },
                "required": [
                  "process"
                ]
              }
            }
          },
          "description": "NOTE: specifying `lines=all` can return a very large amount of data"
        }
      }
    },
    "/get_mappings_for_relationship": {
      "parameters": [],
      "post": {
        "summary": "Gets all the available data maps for given instances",
        "operationId": "post-get_mappings_for_relationship",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets all the available data maps for given instances",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inbound_instance": {
                    "type": "string",
                    "description": "The system 1 instance id"
                  },
                  "outbound_instance": {
                    "type": "string",
                    "description": "The system 2 instance id"
                  },
                  "mappingId": {
                    "type": "string",
                    "description": "Id of current data map"
                  }
                },
                "required": [
                  "inbound_instance",
                  "outbound_instance",
                  "mappingId"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/get_next_id": {
      "post": {
        "summary": "Get the next integer `id` in a named ID set",
        "operationId": "post-get_next_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Get the next integer `id` in a named ID set\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "the name of the ID set"
                  },
                  "reseed": {
                    "type": "integer",
                    "description": "If provided, reset the pool to the specified value.  (This is the value that will be returned.)"
                  },
                  "fallback": {
                    "type": "integer",
                    "description": "In the case of any errors, the provided `fallback` number will be returned. `0` if omitted"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        }
      }
    },
    "/get_package": {
      "post": {
        "summary": "Returns the definition of the specified Package",
        "operationId": "post-get_package",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Returns the definition of the specified Package\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "package": {
                    "type": "string",
                    "description": "Name of the Package"
                  }
                },
                "required": [
                  "package"
                ]
              }
            }
          }
        }
      }
    },
    "/get_package_activities": {
      "post": {
        "summary": "Lists Activities for a Package",
        "operationId": "post-get_package_activities",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Lists Activities for a Package\n\nToDo: responses",
        "tags": [
          "ToDo",
          "Internal"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "package": {
                    "type": "string",
                    "description": "Name of the Package for which to retrieve Activities"
                  },
                  "activity_type": {
                    "type": "string",
                    "description": "The type of Activities to retrieve. Will retrieve all if omitted",
                    "enum": [
                      "manual_activity",
                      "initiate_pipeline"
                    ]
                  },
                  "activity_status": {
                    "type": "string",
                    "description": "The status of Activities to retrieve. will retrieve all if omitted",
                    "enum": [
                      "pending",
                      "success",
                      "failure"
                    ]
                  }
                },
                "required": [
                  "package"
                ]
              }
            }
          }
        }
      }
    },
    "/get_package_manifest": {
      "post": {
        "summary": "Returns the complete Manifest of a Package Version",
        "operationId": "post-get_package_manifest",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Returns the complete Manifest of a Package Version, given a range of Revisions\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "package": {
                    "type": "string",
                    "description": "Name of the Package"
                  },
                  "version": {
                    "type": "string",
                    "description": "Version of the Package"
                  },
                  "version_of_rev": {
                    "type": "string",
                    "description": "(integer) A specific Revision. If provided, discover and use the Version of this specific Revision"
                  }
                },
                "required": [
                  "package"
                ]
              }
            }
          },
          "description": "Use either `version` or `version_of_rev`. If both `version` and `version_of_rev` are provided, `version` takes precedence."
        }
      }
    },
    "/get_package_revision_manifest": {
      "post": {
        "summary": "Returns the complete Manifest of a Package Version",
        "operationId": "post-get_package_revision_manifest",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Returns the complete Manifest of a Package Version, given a range of Revisions\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "package": {
                    "type": "string",
                    "description": "Name of the Package"
                  },
                  "revision": {
                    "type": "string",
                    "description": "A specific Package Revision"
                  },
                  "verbose": {
                    "type": "boolean",
                    "description": "Return verbose Manifest details. `false` if omitted"
                  }
                },
                "required": [
                  "package",
                  "revision"
                ]
              }
            }
          }
        }
      }
    },
    "/get_package_revision_phase_doc": {
      "post": {
        "summary": "Creates a new Revision of a specified Version of a Package",
        "operationId": "post-get_package_revision_phase_doc",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a new Revision of a specified Version of a Package\n\nToDo: description seems wrong?  should probably be \"Returns: Data about the current Revisions relationships in its Progression\"?\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "package": {
                    "type": "string",
                    "description": "Name of the Package"
                  },
                  "revision": {
                    "type": "string",
                    "description": "A specific Package Revision"
                  }
                },
                "required": [
                  "package",
                  "revision"
                ]
              }
            }
          }
        }
      }
    },
    "/get_package_revision_progression": {
      "post": {
        "summary": "Returns the Progression definition for a specific Package Revision",
        "operationId": "post-get_package_revision_progression",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Returns the Progression definition for a specific Package Revision.  (Name, Phase names and order, etc.)\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "package": {
                    "type": "string",
                    "description": "Name of the Package"
                  },
                  "revision": {
                    "type": "string",
                    "description": "A specific Package Revision"
                  }
                },
                "required": [
                  "package",
                  "revision"
                ]
              }
            }
          }
        }
      }
    },
    "/get_pi_artifacts": {
      "post": {
        "summary": "Gets the Changes from the Manifest of a Pipeline Instance",
        "operationId": "post-get_pi_artifacts",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Gets the Changes from the Manifest of a Pipeline Instance\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pi": {
                    "type": "string",
                    "description": "the id or name of a Pipeline Instance"
                  }
                },
                "required": [
                  "pi"
                ]
              }
            }
          },
          "description": "Note: the response is 'json' - 'text' and 'xml' object_output options are not supporte"
        }
      }
    },
    "/get_pi_changes": {
      "post": {
        "summary": "Gets the Changes from the Manifest of a Pipeline Instance",
        "operationId": "post-get_pi_changes",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets the Changes from the Manifest of a Pipeline Instance\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pi": {
                    "type": "string",
                    "description": "the id or name of a Pipeline Instance"
                  }
                },
                "required": [
                  "pi"
                ]
              }
            }
          },
          "description": "Note: the response is 'json' - 'text' and 'xml' object_output options are not supported"
        }
      }
    },
    "/get_pi_data": {
      "post": {
        "summary": "Gets a Pipeline Instance Data object",
        "operationId": "post-get_pi_data",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets a Pipeline Instance Data object\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pi": {
                    "type": "string",
                    "description": "the id or name of a Pipeline Instance"
                  },
                  "lookup": {
                    "type": "string",
                    "description": "Lookup using an expression that evaluates to a subsection of the document"
                  }
                },
                "required": [
                  "pi"
                ]
              }
            }
          },
          "description": "Note: the response is 'json' - 'text' and 'xml' object_output options are not supported"
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/get_pi_workitems": {
      "post": {
        "summary": "Gets the Workitems from the Manifest of a Pipeline Instance",
        "operationId": "post-get_pi_workitems",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pi": {
                    "type": "string",
                    "description": "the id or name of a Pipeline Instance"
                  }
                },
                "required": [
                  "pi"
                ]
              }
            }
          },
          "description": "Note: the response is 'json' - 'text' and 'xml' object_output options are not supported."
        },
        "description": "Gets the Workitems from the Manifest of a Pipeline Instance\n\nToDo: responses",
        "tags": [
          "ToDo"
        ]
      }
    },
    "/get_pipeline": {
      "post": {
        "summary": "Gets a Pipeline Definition object",
        "operationId": "post-get_pipeline",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Gets a Pipeline Definition object\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pipeline": {
                    "type": "string",
                    "description": "the id or name of a Pipeline Definition"
                  }
                },
                "required": [
                  "pipeline"
                ]
              }
            }
          }
        }
      }
    },
    "/get_pipelineinstance": {
      "post": {
        "summary": "Gets a Pipeline Instance object",
        "operationId": "post-get_pipelineinstance",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets a Pipeline Instance object\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pi": {
                    "type": "string",
                    "description": "the id or name of a Pipeline Instance"
                  },
                  "include_stages": {
                    "type": "string",
                    "description": "include Stage, Step and Plugin data and status"
                  }
                },
                "required": [
                  "pi"
                ]
              }
            }
          }
        }
      }
    },
    "/get_plugin_schema": {
      "post": {
        "summary": "Returns the Schema for a given plugin",
        "operationId": "post-get_plugin_schema",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Returns the Schema for a given plugin\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "plugin_name": {
                    "type": "string",
                    "description": "The name of the plugin to be returned"
                  }
                },
                "required": [
                  "plugin_name"
                ]
              }
            }
          }
        }
      }
    },
    "/get_progression_details": {
      "post": {
        "summary": "Gets details about a Progression",
        "operationId": "post-get_progression_details",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets details about a Progression suitable for populating the display of a Progression Board\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "progression": {
                    "type": "string",
                    "description": "the id or name of a Progression"
                  },
                  "packages": {
                    "type": "string",
                    "description": "a comma-delimited list of Package ids to include in the results. If not provided, all readable packages will be selected"
                  },
                  "teams": {
                    "type": "string",
                    "description": "a comma-delimited list of Package ids/names to include in the results. If not provided, all teams associated with the API user will be selected"
                  }
                },
                "required": [
                  "progression"
                ]
              }
            }
          }
        }
      }
    },
    "/get_project": {
      "post": {
        "summary": "Returns a Project object",
        "operationId": "post-get_project",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Returns a Project object\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "type": "string",
                    "description": "the id or name of a Project"
                  }
                },
                "required": [
                  "project"
                ]
              }
            }
          }
        }
      }
    },
    "/get_project_changes": {
      "post": {
        "summary": "Returns all the changes submitted to a Project",
        "operationId": "post-get_project_changes",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Returns all the changes submitted to a Project\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "type": "string",
                    "description": "the id or name of a Project"
                  }
                },
                "required": [
                  "project"
                ]
              }
            }
          }
        }
      }
    },
    "/get_registry": {
      "post": {
        "summary": "Gets a registry document by name",
        "operationId": "post-get_registry",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets a registry document by name\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the Registry document"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/get_settings": {
      "post": {
        "summary": "Lists all the settings of modules",
        "operationId": "post-get_settings",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Lists all the settings of modules\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "module": {
                    "type": "string",
                    "description": "name of the module. If omitted, all module settings are returned"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get_submission": {
      "post": {
        "summary": "Gets a raw 'Submission' payload using a query",
        "operationId": "post-get_submission",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets a raw 'Submission' payload using a query",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "Valid MongoDB query to identify the previous payload to resubmit"
                  }
                },
                "required": [
                  "query"
                ]
              }
            }
          },
          "description": "Note: if the query would return multiple submissions, the newest one is matched"
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/get_system_log": {
      "post": {
        "summary": "Gets the system log",
        "operationId": "post-get_system_log",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets the system log\nIf all arguments are omitted, will return the most recent 100 entries\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "object_id": {
                    "type": "string",
                    "description": "An object_id filter to limit the results"
                  },
                  "object_type": {
                    "type": "string",
                    "description": "An object_type filter to limit the results"
                  },
                  "log_type": {
                    "type": "string",
                    "description": "A log_type filte",
                    "enum": [
                      "Security",
                      "Object"
                    ]
                  },
                  "action": {
                    "type": "string",
                    "description": "An action filter"
                  },
                  "filter": {
                    "type": "string",
                    "description": "A filter to limit the results"
                  },
                  "from": {
                    "type": "string",
                    "description": "a date string to set as the \"from\" marker. (mm/dd/yyyy format)"
                  },
                  "to": {
                    "type": "string",
                    "description": " a date string to set as the \"to\" marker. (mm/dd/yyyy format)"
                  },
                  "records": {
                    "type": "string",
                    "description": "a maximum number of results to get"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/get_task": {
      "post": {
        "summary": "Returns a Task object",
        "operationId": "post-get_task",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Returns a Task object\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "task": {
                    "type": "string",
                    "description": "Value can be either a Task ID or Name"
                  },
                  "include_code": {
                    "type": "boolean",
                    "description": "Whether to include Codeblocks and Steps.  (Only included if 'output_format' is 'json' or 'xml'.  'False' if omitted.)"
                  }
                },
                "required": [
                  "task"
                ]
              }
            }
          }
        }
      }
    },
    "/get_task_instance": {
      "post": {
        "summary": "Returns the details of a Task Instance",
        "operationId": "post-get_task_instance",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Returns the details of a Task Instance\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "instance": {
                    "type": "string",
                    "description": "The Task Instance identifier"
                  }
                },
                "required": [
                  "instance"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "instance": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get_task_instance_status": {
      "post": {
        "summary": "Returns the Status of a Task Instance",
        "operationId": "post-get_task_instance_status",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Returns the Status of a Task Instance\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "instance": {
                    "type": "string",
                    "description": "The Task Instance identifier"
                  }
                },
                "required": [
                  "instance"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/get_task_instances": {
      "post": {
        "summary": "Returns a list of Task Instances",
        "operationId": "post-get_task_instances",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Returns a list of Task Instances\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "type": "string",
                    "description": "A filter to limit the results"
                  },
                  "status": {
                    "type": "string",
                    "description": "A comma separated list of statuses to filter the results"
                  },
                  "from": {
                    "type": "string",
                    "description": "a date string to set as the \"from\" marker. (mm/dd/yyyy format)"
                  },
                  "to": {
                    "type": "string",
                    "description": "a date string to set as the \"to\" marker. (mm/dd/yyyy format)"
                  },
                  "records": {
                    "type": "string",
                    "description": "a maximum number of results to get"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get_task_log": {
      "post": {
        "summary": "Returns the run log for a Task Instance",
        "operationId": "post-get_task_log",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Returns the run log for a Task Instance\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "instance": {
                    "type": "string",
                    "description": "The Task Instance identifier"
                  }
                },
                "required": [
                  "instance"
                ]
              }
            }
          }
        }
      }
    },
    "/get_task_parameters": {
      "post": {
        "summary": "Returns a Parameters template for a Task",
        "operationId": "post-get_task_parameters",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Returns a Parameters template for a Task\n\nToDo: the basic parameter description seems to conflict with the description in the body section?\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "task": {
                    "type": "string",
                    "description": "Value can be either a Task ID, Code or Name"
                  },
                  "basic": {
                    "type": "boolean",
                    "description": "in JSON mode, if provided, will omit descriptive details"
                  }
                },
                "required": [
                  "task"
                ]
              }
            }
          },
          "description": "This function is not affected by the output_format option.  The Response is always an XML document"
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/get_task_plans": {
      "post": {
        "summary": "Returns a list of the queued execution plans for a Task",
        "operationId": "post-get_task_plans",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Returns a list of the queued execution plans for a Task\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "task": {
                    "type": "string",
                    "description": "Value can be either a Task ID or Name"
                  }
                },
                "required": [
                  "task"
                ]
              }
            }
          }
        }
      }
    },
    "/get_task_schedules": {
      "post": {
        "summary": "Returns a list of Schedule definitions for a Task",
        "operationId": "post-get_task_schedules",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Returns a list of Schedule definitions for a Task\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "task": {
                    "type": "string",
                    "description": "Value can be either a Task ID or Name"
                  }
                },
                "required": [
                  "task"
                ]
              }
            }
          },
          "description": "* Text results do not include timing details.\n* JSON results include Schedule definitions suitable for use in the 'schedule_task' function."
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/get_token": {
      "post": {
        "summary": "Returns an authentication token",
        "operationId": "post-get_token",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Returns an authentication token for the API\nA token is the preferred alternative to 'Basic' authorization\n\nThis function requires Basic authorization to be enabled.\nPass an `Authorization` header of type `Basic` to retrieve your Token.\nIf a token doesn't exist for the authenticated User, this method will generate a new token.\n\nToDo: responses",
        "tags": [
          "ToDo"
        ]
      }
    },
    "/get_transformer_assets": {
      "post": {
        "summary": "Returns all asset types in the selected transformer plugin instance",
        "operationId": "post-get_transformer_assets",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Returns all asset types for the selected project in the selected transformer plugin instance\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "plugin_id": {
                    "type": "string",
                    "description": "The id of the plugin"
                  },
                  "instance_id": {
                    "type": "string",
                    "description": "The id of the instance of the plugin"
                  },
                  "project_id": {
                    "type": "string",
                    "description": "The id of the selected project"
                  }
                },
                "required": [
                  "plugin_id",
                  "instance_id",
                  "project_id"
                ]
              }
            }
          }
        }
      }
    },
    "/get_transformer_automap": {
      "post": {
        "summary": "Returns a data map for automapped fields",
        "operationId": "post-get_transformer_automap",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Returns a data map for automapped fields\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "source_field_id": {
                    "type": "string",
                    "description": "The field id of the source system"
                  },
                  "target_field_id": {
                    "type": "string",
                    "description": "The field id of the target system"
                  }
                },
                "required": [
                  "source_field_id",
                  "target_field_id"
                ]
              }
            }
          }
        }
      }
    },
    "/get_transformer_data_map": {
      "post": {
        "summary": "Returns a data map for listing",
        "operationId": "post-get_transformer_data_map",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Returns a data map for listing\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the data map to be retrieved"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        }
      }
    },
    "/get_transformer_data_map_all_sync_log": {
      "post": {
        "summary": "Gets synchronization log records",
        "operationId": "post-get_transformer_data_map_all_sync_log",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets synchronization log records",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the data map whose logs will be returned"
                  },
                  "status": {
                    "type": "string",
                    "description": "Status value by which to filter returned records"
                  },
                  "gt_id": {
                    "type": "integer",
                    "description": "If provided, return only records whose IDs are greater than this value"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          },
          "description": "Returns up to 50 syncronization log records.  Use `gt_id` to fetch additional \"pages\" of records"
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/get_transformer_data_map_sync_log_by_inbound": {
      "post": {
        "summary": "Gets synchronization log records for specific inbound event",
        "operationId": "post-get_transformer_data_map_sync_log_by_inbound",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets synchronization log records for specific inbound event\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the data map whose logs will be returned"
                  },
                  "inbound_id": {
                    "type": "string",
                    "description": "The inbound event id whose logs will be returned"
                  },
                  "status": {
                    "type": "string",
                    "description": "Status value by which to filter returned records"
                  }
                },
                "required": [
                  "id",
                  "inbound_id"
                ]
              }
            }
          }
        }
      }
    },
    "/get_transformer_data_maps": {
      "post": {
        "summary": "Gets all the available data maps",
        "operationId": "post-get_transformer_data_maps",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets all the available data maps\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ]
      }
    },
    "/get_transformer_datamap_for_edit": {
      "post": {
        "summary": "Gets a data map for editing",
        "operationId": "post-get_transformer_datamap_for_edit",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the data map to be retrieved"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        },
        "description": "Gets a data map for editing\n\nToDo: responses",
        "tags": [
          "ToDo"
        ]
      }
    },
    "/get_transformer_fields": {
      "post": {
        "summary": "Gets all asset types in the selected transformer plugin instance",
        "operationId": "post-get_transformer_fields",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Gets all asset types for the selected project in the selected transformer plugin instance\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "plugin_id": {
                    "type": "string",
                    "description": "The id of the plugin"
                  },
                  "instance_id": {
                    "type": "string",
                    "description": "The id of the instance of the plugin"
                  },
                  "project_id": {
                    "type": "string",
                    "description": "The id of the selected project"
                  },
                  "project_name": {
                    "type": "string",
                    "description": "The name of the selected project"
                  },
                  "tracker_id": {
                    "type": "string",
                    "description": "The id of the selected tracker. (Mandatory for TF)"
                  },
                  "tracker_name": {
                    "type": "string",
                    "description": "The name of the selected tracker. (Mandatory for TF)"
                  },
                  "issuetype_id": {
                    "type": "string",
                    "description": "The id of the selected issyuetype. (Mandatory for Jira)"
                  },
                  "issuetype_name": {
                    "type": "string",
                    "description": "The name of the selected issyuetype. (Mandatory for Jira)"
                  },
                  "asset_type_id": {
                    "type": "string",
                    "description": "The id of the selected asset type. (Mandatory for V1)"
                  },
                  "asset_type": {
                    "type": "string",
                    "description": "The name of the selected asset type. (Mandatory for V1)"
                  },
                  "workitemtype_id": {
                    "type": "string",
                    "description": "The id of the selected workitem type. (Mandatory for Azure Devops)"
                  },
                  "workitemtype_name": {
                    "type": "string",
                    "description": "The name of the selected workitem type. (Mandatory for Azure Devops)"
                  }
                },
                "required": [
                  "plugin_id",
                  "instance_id",
                  "project_id",
                  "project_name"
                ]
              }
            }
          }
        }
      }
    },
    "/get_transformer_fields_for_create": {
      "post": {
        "summary": "Gets all asset types for the 2 selected transformer plugin instances",
        "operationId": "post-get_transformer_fields_for_create",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Gets all asset types for the selected project for the 2 selected transformer plugin instances\n\nToDo: responses\nToDo: asset_type (last argument in asset object) seems incomplete - should be asset_type_name)?",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "system_1": {
                    "type": "object",
                    "description": "Details of the first plugin instance",
                    "required": [
                      "plugin_id",
                      "instance_id",
                      "asset"
                    ],
                    "properties": {
                      "plugin_id": {
                        "type": "string",
                        "description": "The id of the plugin"
                      },
                      "instance_id": {
                        "type": "string",
                        "description": "The id of the instance of the plugin"
                      },
                      "asset": {
                        "type": "object",
                        "required": [
                          "project_id",
                          "project_name"
                        ],
                        "properties": {
                          "project_id": {
                            "type": "string",
                            "description": "The id of the selected project"
                          },
                          "project_name": {
                            "type": "string",
                            "description": "The name of the selected project"
                          },
                          "tracker_id": {
                            "type": "string",
                            "description": "The id of the selected tracker. (Mandatory for TF)"
                          },
                          "tracker_name": {
                            "type": "string",
                            "description": "The name of the selected tracker. (Mandatory for TF)"
                          },
                          "issuetype_id": {
                            "type": "string",
                            "description": "The id of the selected issyuetype. (Mandatory for Jira)"
                          },
                          "issuetype_name": {
                            "type": "string",
                            "description": "The name of the selected issyuetype. (Mandatory for Jira)"
                          },
                          "asset_type_id": {
                            "type": "string",
                            "description": "The id of the selected asset type. (Mandatory for V1)"
                          },
                          "asset_type": {
                            "type": "string",
                            "description": "The name of the selected asset type. (Mandatory for V1)"
                          }
                        }
                      }
                    }
                  },
                  "system_2": {
                    "type": "object",
                    "description": "Details of the second plugin instance",
                    "required": [
                      "plugin_id",
                      "instance_id",
                      "asset"
                    ],
                    "properties": {
                      "plugin_id": {
                        "type": "string",
                        "description": "The id of the plugin"
                      },
                      "instance_id": {
                        "type": "string",
                        "description": "The id of the instance of the plugin"
                      },
                      "asset": {
                        "type": "object",
                        "required": [
                          "project_id",
                          "project_name"
                        ],
                        "properties": {
                          "project_id": {
                            "type": "string",
                            "description": "The id of the selected project"
                          },
                          "project_name": {
                            "type": "string",
                            "description": "The name of the selected project"
                          },
                          "tracker_id": {
                            "type": "string",
                            "description": "The id of the selected tracker. (Mandatory for TF)"
                          },
                          "tracker_name": {
                            "type": "string",
                            "description": "The name of the selected tracker. (Mandatory for TF)"
                          },
                          "issuetype_id": {
                            "type": "string",
                            "description": "The id of the selected issyuetype. (Mandatory for Jira)"
                          },
                          "issuetype_name": {
                            "type": "string",
                            "description": "The name of the selected issyuetype. (Mandatory for Jira)"
                          },
                          "asset_type_id": {
                            "type": "string",
                            "description": "The id of the selected asset type. (Mandatory for V1)"
                          },
                          "asset_type": {
                            "type": "string",
                            "description": "The name of the selected asset type. (Mandatory for V1)"
                          }
                        }
                      }
                    }
                  }
                },
                "required": [
                  "system_1",
                  "system_2"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "system_1": {
                      "plugin_id": "string",
                      "instance_id": "string",
                      "asset": {
                        "project_id": "string",
                        "project_name": "string",
                        "tracker_id": "string",
                        "tracker_name": "string",
                        "issuetype_id": "string",
                        "issuetype_name": "string",
                        "asset_type_id": "string",
                        "asset_type": "string"
                      }
                    },
                    "system_2": {
                      "plugin_id": "string",
                      "instance_id": "string",
                      "asset": {
                        "project_id": "string",
                        "project_name": "string",
                        "tracker_id": "string",
                        "tracker_name": "string",
                        "issuetype_id": "string",
                        "issuetype_name": "string",
                        "asset_type_id": "string",
                        "asset_type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/get_transformer_instances": {
      "post": {
        "summary": "Gets all plugin instances that support transformer functionality",
        "operationId": "post-get_transformer_instances",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "instances": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "id": "string",
                      "name": "string",
                      "instances": {
                        "id": "string",
                        "name": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Gets all plugin instances that support transformer functionality\n\nToDo: additional responses?  response codes",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "tags": [
          "ToDo"
        ]
      }
    },
    "/get_transformer_projects": {
      "post": {
        "summary": "Gets all projects in the selected transformer plugin instance",
        "operationId": "post-get_transformer_projects",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Gets all projects in the selected transformer plugin instance\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "plugin_id": {
                    "type": "string",
                    "description": "The id of the plugin"
                  },
                  "instance_id": {
                    "type": "string",
                    "description": "The id of the instance of the plugin"
                  }
                },
                "required": [
                  "plugin_id",
                  "instance_id"
                ]
              }
            }
          }
        }
      }
    },
    "/get_transformer_system_info_for_edit": {
      "post": {
        "summary": "Gets a data map for listing without the field mapping info",
        "operationId": "post-get_transformer_system_info_for_edit",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Gets a data map for listing without the field mapping info\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the data map to be retrieved"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        }
      }
    },
    "/get_transformer_workflow": {
      "post": {
        "summary": "Gets the workflow for given projects and asset type",
        "operationId": "post-get_transformer_workflow",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets the workflow for given projects and asset type\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "instance_id": {
                    "type": "string",
                    "description": "The system instance id"
                  },
                  "plugin_id": {
                    "type": "string",
                    "description": "The system plugin id"
                  },
                  "projects": {
                    "type": "string",
                    "description": "selected projects"
                  },
                  "assets": {
                    "type": "string",
                    "description": "selected asset"
                  }
                },
                "required": [
                  "instance_id",
                  "plugin_id",
                  "projects",
                  "assets"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/get_user_teams": {
      "post": {
        "summary": "Get a list of all Teams of which the  API user is a member",
        "operationId": "post-get_user_teams",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Get a list of all Teams of which the authenticated API user is a member, and their assigned Role\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ]
      }
    },
    "/get_workitem": {
      "post": {
        "summary": "Gets the details of a specific workitem",
        "operationId": "post-get_workitem",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string"
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "object",
                      "required": [
                        "_id",
                        "artifacts",
                        "buckets",
                        "cc_duration",
                        "cc_duration_label",
                        "change_count",
                        "changes",
                        "created_by",
                        "created_dt",
                        "created_dt2",
                        "environment_xrefs",
                        "environments",
                        "external_id",
                        "external_key",
                        "external_reporter",
                        "external_reporter_name",
                        "external_url",
                        "fileobjects",
                        "first_touch",
                        "last_pi_id",
                        "last_touch",
                        "origin",
                        "origin_url",
                        "package_revisions",
                        "packages",
                        "pipeline_instances",
                        "pipelines",
                        "products",
                        "progression_phases",
                        "progressions",
                        "projects",
                        "source_project",
                        "source_project_id",
                        "source_submission_id",
                        "status",
                        "submissions",
                        "team_id",
                        "title",
                        "type",
                        "value_goal",
                        "workitem"
                      ],
                      "properties": {
                        "_id": {
                          "type": "string",
                          "minLength": 1
                        },
                        "artifacts": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        },
                        "buckets": {
                          "type": "array",
                          "uniqueItems": true,
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "properties": {
                              "added_dt": {
                                "type": "string",
                                "minLength": 1
                              },
                              "bucket": {
                                "type": "string",
                                "minLength": 1
                              },
                              "bucket_id": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "required": [
                              "added_dt",
                              "bucket",
                              "bucket_id"
                            ]
                          }
                        },
                        "cc_duration": {
                          "type": "number"
                        },
                        "cc_duration_label": {
                          "type": "string",
                          "minLength": 1
                        },
                        "change_count": {
                          "type": "number"
                        },
                        "changes": {
                          "type": "array",
                          "uniqueItems": true,
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "branch": {
                                "type": "string",
                                "minLength": 1
                              },
                              "contributor_name": {
                                "type": "string",
                                "minLength": 1
                              },
                              "created_dt": {
                                "type": "string",
                                "minLength": 1
                              },
                              "created_dt2": {
                                "type": "string",
                                "minLength": 1
                              },
                              "external_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "external_url": {
                                "type": "string",
                                "minLength": 1
                              },
                              "message": {
                                "type": "string",
                                "minLength": 1
                              },
                              "origin": {
                                "type": "string",
                                "minLength": 1
                              },
                              "origin_repo": {
                                "type": "string",
                                "minLength": 1
                              },
                              "source_group": {
                                "type": "string",
                                "minLength": 1
                              },
                              "source_project": {
                                "type": "string",
                                "minLength": 1
                              },
                              "source_project_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "submission_id": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "required": [
                              "_id",
                              "branch",
                              "contributor_name",
                              "created_dt",
                              "created_dt2",
                              "external_id",
                              "external_url",
                              "message",
                              "origin",
                              "origin_repo",
                              "source_group",
                              "source_project",
                              "source_project_id",
                              "submission_id"
                            ]
                          }
                        },
                        "created_by": {
                          "type": "string",
                          "minLength": 1
                        },
                        "created_dt": {
                          "type": "string",
                          "minLength": 1
                        },
                        "created_dt2": {
                          "type": "string",
                          "minLength": 1
                        },
                        "environment_xrefs": {
                          "type": "array",
                          "uniqueItems": true,
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "artifacts": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "changes": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "created_by": {
                                "type": "object",
                                "properties": {
                                  "pi_id": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "pi_name": {
                                    "type": "string",
                                    "minLength": 1
                                  }
                                },
                                "required": [
                                  "pi_id",
                                  "pi_name"
                                ]
                              },
                              "created_by_type": {
                                "type": "string",
                                "minLength": 1
                              },
                              "created_dt": {
                                "type": "string",
                                "minLength": 1
                              },
                              "created_dt2": {
                                "type": "string",
                                "minLength": 1
                              },
                              "item": {
                                "type": "object",
                                "properties": {
                                  "full_version": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "package_id": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "package_name": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "revision": {
                                    "type": "number"
                                  },
                                  "revision_id": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "version": {
                                    "type": "string",
                                    "minLength": 1
                                  }
                                },
                                "required": [
                                  "full_version",
                                  "package_id",
                                  "package_name",
                                  "revision",
                                  "revision_id",
                                  "version"
                                ]
                              },
                              "item_type": {
                                "type": "string",
                                "minLength": 1
                              },
                              "target": {
                                "type": "object",
                                "properties": {
                                  "delivery_category": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "environment_id": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "host": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "path": {
                                    "type": "string"
                                  },
                                  "url": {
                                    "type": "string",
                                    "minLength": 1
                                  }
                                },
                                "required": [
                                  "delivery_category",
                                  "description",
                                  "environment_id",
                                  "host",
                                  "name",
                                  "path",
                                  "url"
                                ]
                              },
                              "target_type": {
                                "type": "string",
                                "minLength": 1
                              },
                              "workitems": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              }
                            },
                            "required": [
                              "_id",
                              "created_by_type",
                              "created_dt",
                              "created_dt2",
                              "item_type",
                              "target_type"
                            ]
                          }
                        },
                        "environments": {
                          "type": "array",
                          "uniqueItems": true,
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "created_dt": {
                                "type": "string",
                                "minLength": 1
                              },
                              "created_dt2": {
                                "type": "string",
                                "minLength": 1
                              },
                              "delivery_category": {
                                "type": "string",
                                "minLength": 1
                              },
                              "last_update_dt": {
                                "type": "string",
                                "minLength": 1
                              },
                              "last_update_dt2": {
                                "type": "string",
                                "minLength": 1
                              },
                              "name": {
                                "type": "string",
                                "minLength": 1
                              },
                              "status": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "required": [
                              "_id",
                              "created_dt",
                              "created_dt2",
                              "delivery_category",
                              "last_update_dt",
                              "last_update_dt2",
                              "name",
                              "status"
                            ]
                          }
                        },
                        "external_id": {
                          "type": "string",
                          "minLength": 1
                        },
                        "external_key": {
                          "type": "string",
                          "minLength": 1
                        },
                        "external_reporter": {
                          "type": "string",
                          "minLength": 1
                        },
                        "external_reporter_name": {
                          "type": "string",
                          "minLength": 1
                        },
                        "external_url": {
                          "type": "string",
                          "minLength": 1
                        },
                        "fileobjects": {
                          "type": "array",
                          "uniqueItems": true,
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "full_path": {
                                "type": "string",
                                "minLength": 1
                              },
                              "object_name": {
                                "type": "string",
                                "minLength": 1
                              },
                              "object_path": {
                                "type": "string",
                                "minLength": 1
                              },
                              "repository": {
                                "type": "object",
                                "properties": {
                                  "full_name": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "name": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "url": {
                                    "type": "string",
                                    "minLength": 1
                                  }
                                },
                                "required": [
                                  "full_name",
                                  "name",
                                  "url"
                                ]
                              },
                              "risk_factor": {
                                "type": "number"
                              },
                              "source_project": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "required": [
                              "_id",
                              "full_path",
                              "object_name",
                              "object_path",
                              "risk_factor",
                              "source_project"
                            ]
                          }
                        },
                        "first_touch": {
                          "type": "object",
                          "required": [
                            "date",
                            "date2",
                            "group",
                            "name",
                            "pi_id",
                            "pipeline_id",
                            "project",
                            "project_id"
                          ],
                          "properties": {
                            "date": {
                              "type": "string",
                              "minLength": 1
                            },
                            "date2": {
                              "type": "string",
                              "minLength": 1
                            },
                            "group": {
                              "type": "string",
                              "minLength": 1
                            },
                            "name": {
                              "type": "string",
                              "minLength": 1
                            },
                            "pi_id": {
                              "type": "string",
                              "minLength": 1
                            },
                            "pipeline_id": {
                              "type": "string",
                              "minLength": 1
                            },
                            "project": {
                              "type": "string",
                              "minLength": 1
                            },
                            "project_id": {
                              "type": "string",
                              "minLength": 1
                            }
                          }
                        },
                        "last_pi_id": {
                          "type": "string",
                          "minLength": 1
                        },
                        "last_touch": {
                          "type": "object",
                          "required": [
                            "date",
                            "date2",
                            "group",
                            "name",
                            "pi_id",
                            "pipeline_id",
                            "project",
                            "project_id"
                          ],
                          "properties": {
                            "date": {
                              "type": "string",
                              "minLength": 1
                            },
                            "date2": {
                              "type": "string",
                              "minLength": 1
                            },
                            "group": {
                              "type": "string",
                              "minLength": 1
                            },
                            "name": {
                              "type": "string",
                              "minLength": 1
                            },
                            "pi_id": {
                              "type": "string",
                              "minLength": 1
                            },
                            "pipeline_id": {
                              "type": "string",
                              "minLength": 1
                            },
                            "project": {
                              "type": "string",
                              "minLength": 1
                            },
                            "project_id": {
                              "type": "string",
                              "minLength": 1
                            }
                          }
                        },
                        "origin": {
                          "type": "string",
                          "minLength": 1
                        },
                        "origin_url": {
                          "type": "string",
                          "minLength": 1
                        },
                        "package_revisions": {
                          "type": "array",
                          "uniqueItems": true,
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "properties": {
                              "created_dt": {
                                "type": "string",
                                "minLength": 1
                              },
                              "full_version": {
                                "type": "string",
                                "minLength": 1
                              },
                              "name": {
                                "type": "string",
                                "minLength": 1
                              },
                              "package_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "revision": {
                                "type": "number"
                              },
                              "revision_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "version": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "required": [
                              "created_dt",
                              "full_version",
                              "name",
                              "package_id",
                              "revision",
                              "revision_id",
                              "version"
                            ]
                          }
                        },
                        "packages": {
                          "type": "array",
                          "uniqueItems": true,
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "actions": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "artifacts": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "description": {
                                "type": "string"
                              },
                              "globals": {
                                "type": "object",
                                "properties": {
                                  "failed_tests_threshold": {
                                    "type": "number"
                                  },
                                  "phase_thresholds": {
                                    "type": "string"
                                  },
                                  "project": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "you_can_put": {
                                    "type": "object",
                                    "required": [
                                      "anything_in",
                                      "so"
                                    ],
                                    "properties": {
                                      "anything_in": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "so": {
                                        "type": "string",
                                        "minLength": 1
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "failed_tests_threshold",
                                  "phase_thresholds",
                                  "project",
                                  "you_can_put"
                                ]
                              },
                              "last_revised_by": {
                                "type": "object",
                                "properties": {
                                  "_id": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": {
                                    "type": "string",
                                    "minLength": 1
                                  }
                                },
                                "required": [
                                  "_id",
                                  "type"
                                ]
                              },
                              "last_revision": {
                                "type": "number"
                              },
                              "last_revision_dt": {
                                "type": "string",
                                "minLength": 1
                              },
                              "name": {
                                "type": "string",
                                "minLength": 1
                              },
                              "progression_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "team_id": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "required": [
                              "_id",
                              "description",
                              "last_revision",
                              "last_revision_dt",
                              "name",
                              "progression_id",
                              "team_id"
                            ]
                          }
                        },
                        "pipeline_instances": {
                          "type": "array",
                          "uniqueItems": true,
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "properties": {
                              "_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "definition": {
                                "type": "string",
                                "minLength": 1
                              },
                              "duration": {
                                "type": "number"
                              },
                              "duration_label": {
                                "type": "string",
                                "minLength": 1
                              },
                              "end_dt": {
                                "type": "string",
                                "minLength": 1
                              },
                              "group": {
                                "type": "string",
                                "minLength": 1
                              },
                              "initiated_by": {
                                "type": "object",
                                "properties": {
                                  "category": {},
                                  "index": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "name": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "package_revision": {
                                    "type": "object",
                                    "required": [
                                      "full_version",
                                      "name",
                                      "promoted_by",
                                      "revision",
                                      "revision_id",
                                      "version"
                                    ],
                                    "properties": {
                                      "full_version": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "name": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "promoted_by": {
                                        "type": "object",
                                        "required": [
                                          "data",
                                          "phase_name",
                                          "promoted_dt",
                                          "submission_id",
                                          "submission_type",
                                          "type"
                                        ],
                                        "properties": {
                                          "data": {
                                            "type": "object",
                                            "required": [
                                              "LOGFILE_ID",
                                              "REQUEST_HEADERS",
                                              "X_EVENT_TYPE",
                                              "_fake",
                                              "_id",
                                              "_load_number",
                                              "_package",
                                              "_package_label",
                                              "_package_version",
                                              "_project_name",
                                              "after",
                                              "before",
                                              "branch",
                                              "commits",
                                              "pusher",
                                              "ref",
                                              "repository",
                                              "team_id",
                                              "toproject",
                                              "toproject_id"
                                            ],
                                            "properties": {
                                              "LOGFILE_ID": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "REQUEST_HEADERS": {
                                                "type": "object",
                                                "required": [
                                                  "ACTUAL_SERVER_PROTOCOL",
                                                  "CONTENT_TYPE",
                                                  "HTTP_ACCEPT",
                                                  "HTTP_ACCEPT_ENCODING",
                                                  "HTTP_AUTHORIZATION",
                                                  "HTTP_CONNECTION",
                                                  "HTTP_HOST",
                                                  "HTTP_USER_AGENT",
                                                  "HTTP_X_GITLAB_EVENT",
                                                  "PATH_INFO",
                                                  "QUERY_STRING",
                                                  "REMOTE_ADDR",
                                                  "REMOTE_PORT",
                                                  "REQUEST_METHOD",
                                                  "REQUEST_URI",
                                                  "SERVER_NAME",
                                                  "SERVER_PORT",
                                                  "SERVER_PROTOCOL"
                                                ],
                                                "properties": {
                                                  "ACTUAL_SERVER_PROTOCOL": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "CONTENT_TYPE": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "HTTP_ACCEPT": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "HTTP_ACCEPT_ENCODING": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "HTTP_AUTHORIZATION": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "HTTP_CONNECTION": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "HTTP_HOST": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "HTTP_USER_AGENT": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "HTTP_X_GITLAB_EVENT": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "PATH_INFO": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "QUERY_STRING": {
                                                    "type": "string"
                                                  },
                                                  "REMOTE_ADDR": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "REMOTE_PORT": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "REQUEST_METHOD": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "REQUEST_URI": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "SERVER_NAME": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "SERVER_PORT": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "SERVER_PROTOCOL": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              },
                                              "X_EVENT_TYPE": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "_fake": {
                                                "type": "boolean"
                                              },
                                              "_id": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "_load_number": {
                                                "type": "number"
                                              },
                                              "_package": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "_package_label": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "_package_version": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "_project_name": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "after": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "before": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "branch": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "commits": {
                                                "type": "array",
                                                "uniqueItems": true,
                                                "minItems": 1,
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "_fake": {
                                                      "type": "boolean"
                                                    },
                                                    "added": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object"
                                                      }
                                                    },
                                                    "author": {
                                                      "type": "object",
                                                      "properties": {
                                                        "email": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        },
                                                        "name": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        },
                                                        "username": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        }
                                                      },
                                                      "required": [
                                                        "email",
                                                        "name",
                                                        "username"
                                                      ]
                                                    },
                                                    "committer": {
                                                      "type": "object",
                                                      "properties": {
                                                        "email": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        },
                                                        "name": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        },
                                                        "username": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        }
                                                      },
                                                      "required": [
                                                        "email",
                                                        "name",
                                                        "username"
                                                      ]
                                                    },
                                                    "id": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "message": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "modified": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object"
                                                      }
                                                    },
                                                    "removed": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object"
                                                      }
                                                    },
                                                    "timestamp": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    },
                                                    "url": {
                                                      "type": "string",
                                                      "minLength": 1
                                                    }
                                                  },
                                                  "required": [
                                                    "_fake",
                                                    "id",
                                                    "message",
                                                    "timestamp",
                                                    "url"
                                                  ]
                                                }
                                              },
                                              "pusher": {
                                                "type": "object",
                                                "required": [
                                                  "email",
                                                  "name"
                                                ],
                                                "properties": {
                                                  "email": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "name": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              },
                                              "ref": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "repository": {
                                                "type": "object",
                                                "required": [
                                                  "full_name",
                                                  "id",
                                                  "name",
                                                  "url"
                                                ],
                                                "properties": {
                                                  "full_name": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "id": {
                                                    "type": "number"
                                                  },
                                                  "name": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "url": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              },
                                              "team_id": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "toproject": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "toproject_id": {
                                                "type": "string",
                                                "minLength": 1
                                              }
                                            }
                                          },
                                          "phase_name": {
                                            "type": "string",
                                            "minLength": 1
                                          },
                                          "promoted_dt": {
                                            "type": "string",
                                            "minLength": 1
                                          },
                                          "submission_id": {
                                            "type": "string",
                                            "minLength": 1
                                          },
                                          "submission_type": {
                                            "type": "string",
                                            "minLength": 1
                                          },
                                          "type": {
                                            "type": "string",
                                            "minLength": 1
                                          }
                                        }
                                      },
                                      "revision": {
                                        "type": "number"
                                      },
                                      "revision_id": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "version": {
                                        "type": "string",
                                        "minLength": 1
                                      }
                                    }
                                  },
                                  "phase": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "status_id": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "type": {
                                    "type": "string",
                                    "minLength": 1
                                  }
                                },
                                "required": [
                                  "index",
                                  "name",
                                  "package_revision",
                                  "phase",
                                  "status_id",
                                  "type"
                                ]
                              },
                              "name": {
                                "type": "string",
                                "minLength": 1
                              },
                              "number": {
                                "type": "number"
                              },
                              "project": {
                                "type": "string",
                                "minLength": 1
                              },
                              "start_dt": {
                                "type": "string",
                                "minLength": 1
                              },
                              "start_dt2": {
                                "type": "string",
                                "minLength": 1
                              },
                              "status": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "required": [
                              "_id",
                              "definition",
                              "duration",
                              "duration_label",
                              "end_dt",
                              "group",
                              "name",
                              "number",
                              "project",
                              "start_dt",
                              "start_dt2",
                              "status"
                            ]
                          }
                        },
                        "pipelines": {
                          "type": "array",
                          "uniqueItems": true,
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "properties": {
                              "definition": {
                                "type": "string",
                                "minLength": 1
                              },
                              "group": {
                                "type": "string",
                                "minLength": 1
                              },
                              "instances": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "last_pi": {
                                "type": "object",
                                "properties": {
                                  "_id": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "avg_duration": {
                                    "type": "number"
                                  },
                                  "avg_duration_label": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "category": {
                                    "type": "string"
                                  },
                                  "ce_node": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "changes": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  },
                                  "code": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "duration": {
                                    "type": "number"
                                  },
                                  "duration_label": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "end_dt": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "end_dt2": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "group": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "initiated_by": {
                                    "type": "object",
                                    "required": [
                                      "index",
                                      "name",
                                      "package_revision",
                                      "phase",
                                      "status_id",
                                      "type"
                                    ],
                                    "properties": {
                                      "category": {},
                                      "index": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "name": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "package_revision": {
                                        "type": "object",
                                        "required": [
                                          "full_version",
                                          "name",
                                          "promoted_by",
                                          "revision",
                                          "revision_id",
                                          "version"
                                        ],
                                        "properties": {
                                          "full_version": {
                                            "type": "string",
                                            "minLength": 1
                                          },
                                          "name": {
                                            "type": "string",
                                            "minLength": 1
                                          },
                                          "promoted_by": {
                                            "type": "object",
                                            "required": [
                                              "data",
                                              "phase_name",
                                              "promoted_dt",
                                              "submission_id",
                                              "submission_type",
                                              "type"
                                            ],
                                            "properties": {
                                              "data": {
                                                "type": "object",
                                                "required": [
                                                  "LOGFILE_ID",
                                                  "REQUEST_HEADERS",
                                                  "X_EVENT_TYPE",
                                                  "_fake",
                                                  "_id",
                                                  "_load_number",
                                                  "_package",
                                                  "_package_label",
                                                  "_package_version",
                                                  "_project_name",
                                                  "after",
                                                  "before",
                                                  "branch",
                                                  "commits",
                                                  "pusher",
                                                  "ref",
                                                  "repository",
                                                  "team_id",
                                                  "toproject",
                                                  "toproject_id"
                                                ],
                                                "properties": {
                                                  "LOGFILE_ID": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "REQUEST_HEADERS": {
                                                    "type": "object",
                                                    "required": [
                                                      "ACTUAL_SERVER_PROTOCOL",
                                                      "CONTENT_TYPE",
                                                      "HTTP_ACCEPT",
                                                      "HTTP_ACCEPT_ENCODING",
                                                      "HTTP_AUTHORIZATION",
                                                      "HTTP_CONNECTION",
                                                      "HTTP_HOST",
                                                      "HTTP_USER_AGENT",
                                                      "HTTP_X_GITLAB_EVENT",
                                                      "PATH_INFO",
                                                      "QUERY_STRING",
                                                      "REMOTE_ADDR",
                                                      "REMOTE_PORT",
                                                      "REQUEST_METHOD",
                                                      "REQUEST_URI",
                                                      "SERVER_NAME",
                                                      "SERVER_PORT",
                                                      "SERVER_PROTOCOL"
                                                    ],
                                                    "properties": {
                                                      "ACTUAL_SERVER_PROTOCOL": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "CONTENT_TYPE": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "HTTP_ACCEPT": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "HTTP_ACCEPT_ENCODING": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "HTTP_AUTHORIZATION": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "HTTP_CONNECTION": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "HTTP_HOST": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "HTTP_USER_AGENT": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "HTTP_X_GITLAB_EVENT": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "PATH_INFO": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "QUERY_STRING": {
                                                        "type": "string"
                                                      },
                                                      "REMOTE_ADDR": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "REMOTE_PORT": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "REQUEST_METHOD": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "REQUEST_URI": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "SERVER_NAME": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "SERVER_PORT": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "SERVER_PROTOCOL": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      }
                                                    }
                                                  },
                                                  "X_EVENT_TYPE": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "_fake": {
                                                    "type": "boolean"
                                                  },
                                                  "_id": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "_load_number": {
                                                    "type": "number"
                                                  },
                                                  "_package": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "_package_label": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "_package_version": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "_project_name": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "after": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "before": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "branch": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "commits": {
                                                    "type": "array",
                                                    "uniqueItems": true,
                                                    "minItems": 1,
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "_fake": {
                                                          "type": "boolean"
                                                        },
                                                        "added": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object"
                                                          }
                                                        },
                                                        "author": {
                                                          "type": "object",
                                                          "properties": {
                                                            "email": {
                                                              "type": "string",
                                                              "minLength": 1
                                                            },
                                                            "name": {
                                                              "type": "string",
                                                              "minLength": 1
                                                            },
                                                            "username": {
                                                              "type": "string",
                                                              "minLength": 1
                                                            }
                                                          },
                                                          "required": [
                                                            "email",
                                                            "name",
                                                            "username"
                                                          ]
                                                        },
                                                        "committer": {
                                                          "type": "object",
                                                          "properties": {
                                                            "email": {
                                                              "type": "string",
                                                              "minLength": 1
                                                            },
                                                            "name": {
                                                              "type": "string",
                                                              "minLength": 1
                                                            },
                                                            "username": {
                                                              "type": "string",
                                                              "minLength": 1
                                                            }
                                                          },
                                                          "required": [
                                                            "email",
                                                            "name",
                                                            "username"
                                                          ]
                                                        },
                                                        "id": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        },
                                                        "message": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        },
                                                        "modified": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object"
                                                          }
                                                        },
                                                        "removed": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object"
                                                          }
                                                        },
                                                        "timestamp": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        },
                                                        "url": {
                                                          "type": "string",
                                                          "minLength": 1
                                                        }
                                                      },
                                                      "required": [
                                                        "_fake",
                                                        "id",
                                                        "message",
                                                        "timestamp",
                                                        "url"
                                                      ]
                                                    }
                                                  },
                                                  "pusher": {
                                                    "type": "object",
                                                    "required": [
                                                      "email",
                                                      "name"
                                                    ],
                                                    "properties": {
                                                      "email": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "name": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      }
                                                    }
                                                  },
                                                  "ref": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "repository": {
                                                    "type": "object",
                                                    "required": [
                                                      "full_name",
                                                      "id",
                                                      "name",
                                                      "url"
                                                    ],
                                                    "properties": {
                                                      "full_name": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "id": {
                                                        "type": "number"
                                                      },
                                                      "name": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      },
                                                      "url": {
                                                        "type": "string",
                                                        "minLength": 1
                                                      }
                                                    }
                                                  },
                                                  "team_id": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "toproject": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  },
                                                  "toproject_id": {
                                                    "type": "string",
                                                    "minLength": 1
                                                  }
                                                }
                                              },
                                              "phase_name": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "promoted_dt": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "submission_id": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "submission_type": {
                                                "type": "string",
                                                "minLength": 1
                                              },
                                              "type": {
                                                "type": "string",
                                                "minLength": 1
                                              }
                                            }
                                          },
                                          "revision": {
                                            "type": "number"
                                          },
                                          "revision_id": {
                                            "type": "string",
                                            "minLength": 1
                                          },
                                          "version": {
                                            "type": "string",
                                            "minLength": 1
                                          }
                                        }
                                      },
                                      "phase": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "status_id": {
                                        "type": "string",
                                        "minLength": 1
                                      },
                                      "type": {
                                        "type": "string",
                                        "minLength": 1
                                      }
                                    }
                                  },
                                  "labels": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "minLength": 1
                                        },
                                        "value": {
                                          "type": "string",
                                          "minLength": 1
                                        }
                                      },
                                      "required": [
                                        "name",
                                        "value"
                                      ]
                                    }
                                  },
                                  "name": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "number": {
                                    "type": "number"
                                  },
                                  "phases": {
                                    "type": "array",
                                    "uniqueItems": true,
                                    "minItems": 1,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "duration": {
                                          "type": "number"
                                        },
                                        "duration_label": {
                                          "type": "string",
                                          "minLength": 1
                                        },
                                        "end_dt": {
                                          "type": "string",
                                          "minLength": 1
                                        },
                                        "end_dt2": {
                                          "type": "string",
                                          "minLength": 1
                                        },
                                        "name": {
                                          "type": "string",
                                          "minLength": 1
                                        },
                                        "start_dt": {
                                          "type": "string",
                                          "minLength": 1
                                        },
                                        "start_dt2": {
                                          "type": "string",
                                          "minLength": 1
                                        },
                                        "status": {
                                          "type": "string",
                                          "minLength": 1
                                        }
                                      },
                                      "required": [
                                        "duration",
                                        "duration_label",
                                        "end_dt",
                                        "end_dt2",
                                        "name",
                                        "start_dt",
                                        "start_dt2",
                                        "status"
                                      ]
                                    }
                                  },
                                  "pi_group_id": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "pipeline_id": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "pipeline_name": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "pipeline_team_id": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "project": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "project_id": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "project_team_id": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "project_version": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "start_dt": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "start_dt2": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "status": {
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "summary": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  },
                                  "workitems": {
                                    "type": "array",
                                    "items": {
                                      "type": "object"
                                    }
                                  }
                                },
                                "required": [
                                  "_id",
                                  "avg_duration",
                                  "avg_duration_label",
                                  "category",
                                  "ce_node",
                                  "changes",
                                  "code",
                                  "duration",
                                  "duration_label",
                                  "end_dt",
                                  "end_dt2",
                                  "group",
                                  "initiated_by",
                                  "labels",
                                  "name",
                                  "number",
                                  "phases",
                                  "pi_group_id",
                                  "pipeline_id",
                                  "pipeline_name",
                                  "pipeline_team_id",
                                  "project",
                                  "project_id",
                                  "project_team_id",
                                  "project_version",
                                  "start_dt",
                                  "start_dt2",
                                  "status",
                                  "summary",
                                  "workitems"
                                ]
                              },
                              "last_pi_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "pi_group_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "pipeline_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "project": {
                                "type": "string",
                                "minLength": 1
                              },
                              "project_id": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "required": [
                              "definition",
                              "group",
                              "last_pi_id",
                              "pi_group_id",
                              "pipeline_id",
                              "project",
                              "project_id"
                            ]
                          }
                        },
                        "products": {
                          "type": "array",
                          "uniqueItems": true,
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "properties": {
                              "product": {
                                "type": "string",
                                "minLength": 1
                              },
                              "product_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "version": {
                                "type": "string",
                                "minLength": 1
                              },
                              "version_rc": {
                                "type": "number"
                              }
                            },
                            "required": [
                              "product",
                              "product_id",
                              "version",
                              "version_rc"
                            ]
                          }
                        },
                        "progression_phases": {
                          "type": "array",
                          "uniqueItems": true,
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "properties": {
                              "code_complete": {
                                "type": "boolean"
                              },
                              "delivery_category": {
                                "type": "string",
                                "minLength": 1
                              },
                              "from_revision": {
                                "type": "number"
                              },
                              "from_revision_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "name": {
                                "type": "string",
                                "minLength": 1
                              },
                              "progression_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "progression_name": {
                                "type": "string",
                                "minLength": 1
                              },
                              "to_revision": {
                                "type": "number"
                              },
                              "to_revision_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "via_package_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "via_package_name": {
                                "type": "string",
                                "minLength": 1
                              },
                              "via_package_version": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "required": [
                              "code_complete",
                              "delivery_category",
                              "from_revision",
                              "from_revision_id",
                              "name",
                              "progression_id",
                              "progression_name",
                              "to_revision",
                              "to_revision_id",
                              "via_package_id",
                              "via_package_name",
                              "via_package_version"
                            ]
                          }
                        },
                        "progressions": {
                          "type": "array",
                          "uniqueItems": true,
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "properties": {
                              "progression_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "progression_name": {
                                "type": "string",
                                "minLength": 1
                              },
                              "via_package_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "via_package_name": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "required": [
                              "progression_id",
                              "progression_name",
                              "via_package_id",
                              "via_package_name"
                            ]
                          }
                        },
                        "projects": {
                          "type": "array",
                          "uniqueItems": true,
                          "minItems": 1,
                          "items": {
                            "type": "object",
                            "properties": {
                              "project": {
                                "type": "string",
                                "minLength": 1
                              },
                              "project_id": {
                                "type": "string",
                                "minLength": 1
                              },
                              "version": {
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "required": [
                              "project",
                              "project_id",
                              "version"
                            ]
                          }
                        },
                        "source_project": {
                          "type": "string",
                          "minLength": 1
                        },
                        "source_project_id": {
                          "type": "string",
                          "minLength": 1
                        },
                        "source_project_version": {},
                        "source_submission_id": {
                          "type": "string",
                          "minLength": 1
                        },
                        "status": {
                          "type": "string",
                          "minLength": 1
                        },
                        "submissions": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        },
                        "team_id": {
                          "type": "string",
                          "minLength": 1
                        },
                        "title": {
                          "type": "string",
                          "minLength": 1
                        },
                        "type": {
                          "type": "string",
                          "minLength": 1
                        },
                        "value_goal": {
                          "type": "string",
                          "minLength": 1
                        },
                        "workitem": {
                          "type": "object",
                          "required": [
                            "BlockingIssuesCount",
                            "CompletedInBuildRuns",
                            "CreatedBy_Name",
                            "CreatedBy_Username",
                            "DependenciesClosedCount",
                            "DependenciesCount",
                            "Description",
                            "EffectiveAssetState",
                            "IsClosed",
                            "Name",
                            "Number",
                            "Status_Name",
                            "SuperBlockingIssuesCount",
                            "SuperClosedPWIsCount",
                            "SuperPWIsBlockingIssuesCount",
                            "SuperTotalPWIsCount",
                            "Team_Name",
                            "_oid"
                          ],
                          "properties": {
                            "BlockingIssuesCount": {
                              "type": "string",
                              "minLength": 1
                            },
                            "CompletedInBuildRuns": {
                              "type": "array",
                              "items": {
                                "type": "object"
                              }
                            },
                            "CreatedBy_Name": {
                              "type": "string",
                              "minLength": 1
                            },
                            "CreatedBy_Username": {
                              "type": "string",
                              "minLength": 1
                            },
                            "DependenciesClosedCount": {
                              "type": "string",
                              "minLength": 1
                            },
                            "DependenciesCount": {
                              "type": "string",
                              "minLength": 1
                            },
                            "Description": {
                              "type": "string",
                              "minLength": 1
                            },
                            "EffectiveAssetState": {
                              "type": "string",
                              "minLength": 1
                            },
                            "IsClosed": {
                              "type": "string",
                              "minLength": 1
                            },
                            "Name": {
                              "type": "string",
                              "minLength": 1
                            },
                            "Number": {
                              "type": "string",
                              "minLength": 1
                            },
                            "Status_Name": {
                              "type": "string",
                              "minLength": 1
                            },
                            "SuperBlockingIssuesCount": {
                              "type": "string",
                              "minLength": 1
                            },
                            "SuperClosedPWIsCount": {
                              "type": "string",
                              "minLength": 1
                            },
                            "SuperPWIsBlockingIssuesCount": {
                              "type": "string",
                              "minLength": 1
                            },
                            "SuperTotalPWIsCount": {
                              "type": "string",
                              "minLength": 1
                            },
                            "Team_Name": {
                              "type": "string",
                              "minLength": 1
                            },
                            "_oid": {
                              "type": "string",
                              "minLength": 1
                            }
                          }
                        }
                      }
                    },
                    "": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                },
                "examples": {
                  "Story": {
                    "value": {
                      "ErrorCode": "string",
                      "ErrorDetail": "string",
                      "ErrorMessage": "string",
                      "Method": "string",
                      "Response": {
                        "_id": "string",
                        "artifacts": [
                          {}
                        ],
                        "buckets": [
                          {
                            "added_dt": "string",
                            "bucket": "string",
                            "bucket_id": "string"
                          }
                        ],
                        "cc_duration": 0,
                        "cc_duration_label": "string",
                        "change_count": 0,
                        "changes": [
                          {
                            "_id": "string",
                            "branch": "string",
                            "contributor_name": "string",
                            "created_dt": "string",
                            "created_dt2": "string",
                            "external_id": "string",
                            "external_url": "string",
                            "message": "string",
                            "origin": "string",
                            "origin_repo": "string",
                            "source_group": "string",
                            "source_project": "string",
                            "source_project_id": "string",
                            "submission_id": "string"
                          }
                        ],
                        "created_by": "string",
                        "created_dt": "string",
                        "created_dt2": "string",
                        "environment_xrefs": [
                          {
                            "_id": "string",
                            "artifacts": [
                              {}
                            ],
                            "changes": [
                              {}
                            ],
                            "created_by": {
                              "pi_id": "string",
                              "pi_name": "string"
                            },
                            "created_by_type": "string",
                            "created_dt": "string",
                            "created_dt2": "string",
                            "item": {
                              "full_version": "string",
                              "package_id": "string",
                              "package_name": "string",
                              "revision": 0,
                              "revision_id": "string",
                              "version": "string"
                            },
                            "item_type": "string",
                            "target": {
                              "delivery_category": "string",
                              "description": "string",
                              "environment_id": "string",
                              "host": "string",
                              "name": "string",
                              "path": "string",
                              "url": "string"
                            },
                            "target_type": "string",
                            "workitems": [
                              {}
                            ]
                          }
                        ],
                        "environments": [
                          {
                            "_id": "string",
                            "created_dt": "string",
                            "created_dt2": "string",
                            "delivery_category": "string",
                            "last_update_dt": "string",
                            "last_update_dt2": "string",
                            "name": "string",
                            "status": "string"
                          }
                        ],
                        "external_id": "string",
                        "external_key": "string",
                        "external_reporter": "string",
                        "external_reporter_name": "string",
                        "external_url": "string",
                        "fileobjects": [
                          {
                            "_id": "string",
                            "full_path": "string",
                            "object_name": "string",
                            "object_path": "string",
                            "repository": {
                              "full_name": "string",
                              "name": "string",
                              "url": "string"
                            },
                            "risk_factor": 0,
                            "source_project": "string"
                          }
                        ],
                        "first_touch": {
                          "date": "string",
                          "date2": "string",
                          "group": "string",
                          "name": "string",
                          "pi_id": "string",
                          "pipeline_id": "string",
                          "project": "string",
                          "project_id": "string"
                        },
                        "last_pi_id": "string",
                        "last_touch": {
                          "date": "string",
                          "date2": "string",
                          "group": "string",
                          "name": "string",
                          "pi_id": "string",
                          "pipeline_id": "string",
                          "project": "string",
                          "project_id": "string"
                        },
                        "origin": "string",
                        "origin_url": "string",
                        "package_revisions": [
                          {
                            "created_dt": "string",
                            "full_version": "string",
                            "name": "string",
                            "package_id": "string",
                            "revision": 0,
                            "revision_id": "string",
                            "version": "string"
                          }
                        ],
                        "packages": [
                          {
                            "_id": "string",
                            "actions": [
                              {}
                            ],
                            "artifacts": [
                              {}
                            ],
                            "description": "string",
                            "globals": {
                              "failed_tests_threshold": 0,
                              "phase_thresholds": "string",
                              "project": "string",
                              "you_can_put": {
                                "anything_in": "string",
                                "so": "string"
                              }
                            },
                            "last_revised_by": {
                              "_id": "string",
                              "type": "string"
                            },
                            "last_revision": 0,
                            "last_revision_dt": "string",
                            "name": "string",
                            "progression_id": "string",
                            "team_id": "string"
                          }
                        ],
                        "pipeline_instances": [
                          {
                            "_id": "string",
                            "definition": "string",
                            "duration": 0,
                            "duration_label": "string",
                            "end_dt": "string",
                            "group": "string",
                            "initiated_by": {
                              "category": null,
                              "index": "string",
                              "name": "string",
                              "package_revision": {
                                "full_version": "string",
                                "name": "string",
                                "promoted_by": {
                                  "data": {
                                    "LOGFILE_ID": "string",
                                    "REQUEST_HEADERS": {
                                      "ACTUAL_SERVER_PROTOCOL": "string",
                                      "CONTENT_TYPE": "string",
                                      "HTTP_ACCEPT": "string",
                                      "HTTP_ACCEPT_ENCODING": "string",
                                      "HTTP_AUTHORIZATION": "string",
                                      "HTTP_CONNECTION": "string",
                                      "HTTP_HOST": "string",
                                      "HTTP_USER_AGENT": "string",
                                      "HTTP_X_GITLAB_EVENT": "string",
                                      "PATH_INFO": "string",
                                      "QUERY_STRING": "string",
                                      "REMOTE_ADDR": "string",
                                      "REMOTE_PORT": "string",
                                      "REQUEST_METHOD": "string",
                                      "REQUEST_URI": "string",
                                      "SERVER_NAME": "string",
                                      "SERVER_PORT": "string",
                                      "SERVER_PROTOCOL": "string"
                                    },
                                    "X_EVENT_TYPE": "string",
                                    "_fake": true,
                                    "_id": "string",
                                    "_load_number": 0,
                                    "_package": "string",
                                    "_package_label": "string",
                                    "_package_version": "string",
                                    "_project_name": "string",
                                    "after": "string",
                                    "before": "string",
                                    "branch": "string",
                                    "commits": [
                                      {
                                        "_fake": true,
                                        "added": [
                                          {}
                                        ],
                                        "author": {
                                          "email": "string",
                                          "name": "string",
                                          "username": "string"
                                        },
                                        "committer": {
                                          "email": "string",
                                          "name": "string",
                                          "username": "string"
                                        },
                                        "id": "string",
                                        "message": "string",
                                        "modified": [
                                          {}
                                        ],
                                        "removed": [
                                          {}
                                        ],
                                        "timestamp": "string",
                                        "url": "string"
                                      }
                                    ],
                                    "pusher": {
                                      "email": "string",
                                      "name": "string"
                                    },
                                    "ref": "string",
                                    "repository": {
                                      "full_name": "string",
                                      "id": 0,
                                      "name": "string",
                                      "url": "string"
                                    },
                                    "team_id": "string",
                                    "toproject": "string",
                                    "toproject_id": "string"
                                  },
                                  "phase_name": "string",
                                  "promoted_dt": "string",
                                  "submission_id": "string",
                                  "submission_type": "string",
                                  "type": "string"
                                },
                                "revision": 0,
                                "revision_id": "string",
                                "version": "string"
                              },
                              "phase": "string",
                              "status_id": "string",
                              "type": "string"
                            },
                            "name": "string",
                            "number": 0,
                            "project": "string",
                            "start_dt": "string",
                            "start_dt2": "string",
                            "status": "string"
                          }
                        ],
                        "pipelines": [
                          {
                            "definition": "string",
                            "group": "string",
                            "instances": [
                              {}
                            ],
                            "last_pi": {
                              "_id": "string",
                              "avg_duration": 0,
                              "avg_duration_label": "string",
                              "category": "string",
                              "ce_node": "string",
                              "changes": [
                                {}
                              ],
                              "code": "string",
                              "duration": 0,
                              "duration_label": "string",
                              "end_dt": "string",
                              "end_dt2": "string",
                              "group": "string",
                              "initiated_by": {
                                "category": null,
                                "index": "string",
                                "name": "string",
                                "package_revision": {
                                  "full_version": "string",
                                  "name": "string",
                                  "promoted_by": {
                                    "data": {
                                      "LOGFILE_ID": "string",
                                      "REQUEST_HEADERS": {
                                        "ACTUAL_SERVER_PROTOCOL": "string",
                                        "CONTENT_TYPE": "string",
                                        "HTTP_ACCEPT": "string",
                                        "HTTP_ACCEPT_ENCODING": "string",
                                        "HTTP_AUTHORIZATION": "string",
                                        "HTTP_CONNECTION": "string",
                                        "HTTP_HOST": "string",
                                        "HTTP_USER_AGENT": "string",
                                        "HTTP_X_GITLAB_EVENT": "string",
                                        "PATH_INFO": "string",
                                        "QUERY_STRING": "string",
                                        "REMOTE_ADDR": "string",
                                        "REMOTE_PORT": "string",
                                        "REQUEST_METHOD": "string",
                                        "REQUEST_URI": "string",
                                        "SERVER_NAME": "string",
                                        "SERVER_PORT": "string",
                                        "SERVER_PROTOCOL": "string"
                                      },
                                      "X_EVENT_TYPE": "string",
                                      "_fake": true,
                                      "_id": "string",
                                      "_load_number": 0,
                                      "_package": "string",
                                      "_package_label": "string",
                                      "_package_version": "string",
                                      "_project_name": "string",
                                      "after": "string",
                                      "before": "string",
                                      "branch": "string",
                                      "commits": [
                                        {
                                          "_fake": true,
                                          "added": [
                                            {}
                                          ],
                                          "author": {
                                            "email": "string",
                                            "name": "string",
                                            "username": "string"
                                          },
                                          "committer": {
                                            "email": "string",
                                            "name": "string",
                                            "username": "string"
                                          },
                                          "id": "string",
                                          "message": "string",
                                          "modified": [
                                            {}
                                          ],
                                          "removed": [
                                            {}
                                          ],
                                          "timestamp": "string",
                                          "url": "string"
                                        }
                                      ],
                                      "pusher": {
                                        "email": "string",
                                        "name": "string"
                                      },
                                      "ref": "string",
                                      "repository": {
                                        "full_name": "string",
                                        "id": 0,
                                        "name": "string",
                                        "url": "string"
                                      },
                                      "team_id": "string",
                                      "toproject": "string",
                                      "toproject_id": "string"
                                    },
                                    "phase_name": "string",
                                    "promoted_dt": "string",
                                    "submission_id": "string",
                                    "submission_type": "string",
                                    "type": "string"
                                  },
                                  "revision": 0,
                                  "revision_id": "string",
                                  "version": "string"
                                },
                                "phase": "string",
                                "status_id": "string",
                                "type": "string"
                              },
                              "labels": [
                                {
                                  "name": "string",
                                  "value": "string"
                                }
                              ],
                              "name": "string",
                              "number": 0,
                              "phases": [
                                {
                                  "duration": 0,
                                  "duration_label": "string",
                                  "end_dt": "string",
                                  "end_dt2": "string",
                                  "name": "string",
                                  "start_dt": "string",
                                  "start_dt2": "string",
                                  "status": "string"
                                }
                              ],
                              "pi_group_id": "string",
                              "pipeline_id": "string",
                              "pipeline_name": "string",
                              "pipeline_team_id": "string",
                              "project": "string",
                              "project_id": "string",
                              "project_team_id": "string",
                              "project_version": "string",
                              "start_dt": "string",
                              "start_dt2": "string",
                              "status": "string",
                              "summary": [
                                {}
                              ],
                              "workitems": [
                                {}
                              ]
                            },
                            "last_pi_id": "string",
                            "pi_group_id": "string",
                            "pipeline_id": "string",
                            "project": "string",
                            "project_id": "string"
                          }
                        ],
                        "products": [
                          {
                            "product": "string",
                            "product_id": "string",
                            "version": "string",
                            "version_rc": 0
                          }
                        ],
                        "progression_phases": [
                          {
                            "code_complete": true,
                            "delivery_category": "string",
                            "from_revision": 0,
                            "from_revision_id": "string",
                            "name": "string",
                            "progression_id": "string",
                            "progression_name": "string",
                            "to_revision": 0,
                            "to_revision_id": "string",
                            "via_package_id": "string",
                            "via_package_name": "string",
                            "via_package_version": "string"
                          }
                        ],
                        "progressions": [
                          {
                            "progression_id": "string",
                            "progression_name": "string",
                            "via_package_id": "string",
                            "via_package_name": "string"
                          }
                        ],
                        "projects": [
                          {
                            "project": "string",
                            "project_id": "string",
                            "version": "string"
                          }
                        ],
                        "source_project": "string",
                        "source_project_id": "string",
                        "source_project_version": null,
                        "source_submission_id": "string",
                        "status": "string",
                        "submissions": [
                          {}
                        ],
                        "team_id": "string",
                        "title": "string",
                        "type": "string",
                        "value_goal": "string",
                        "workitem": {
                          "BlockingIssuesCount": "string",
                          "CompletedInBuildRuns": [
                            {}
                          ],
                          "CreatedBy_Name": "string",
                          "CreatedBy_Username": "string",
                          "DependenciesClosedCount": "string",
                          "DependenciesCount": "string",
                          "Description": "string",
                          "EffectiveAssetState": "string",
                          "IsClosed": "string",
                          "Name": "string",
                          "Number": "string",
                          "Status_Name": "string",
                          "SuperBlockingIssuesCount": "string",
                          "SuperClosedPWIsCount": "string",
                          "SuperPWIsBlockingIssuesCount": "string",
                          "SuperTotalPWIsCount": "string",
                          "Team_Name": "string",
                          "_oid": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorDetail": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string",
                      "minLength": 1
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Method": {
                      "type": "string"
                    },
                    "Response": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                }
              }
            }
          }
        },
        "description": "Gets the details of a specific workitem",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The internal `_id` of the workitem OR the authoritative `ID` from the origin system OR the `key` (user facing identifier) from the origin system"
                  }
                },
                "required": [
                  "id"
                ]
              },
              "examples": {
                "Story": {
                  "value": {
                    "id": "S-01026"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "application/json"
          }
        ]
      }
    },
    "/get_workitem_deliverycategory": {
      "post": {
        "summary": "Get all the packages a workitem is in",
        "operationId": "post-get_workitem_deliverycategory",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Get all the packages a workitem is in, and the 'effective delivery category' for the workitem\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The internal `_id` of the workitem OR the authoritative `ID` from the origin system OR the `key` (user facing identifier) from the origin system"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        }
      }
    },
    "/get_workitem_parent": {
      "post": {
        "summary": "",
        "operationId": "post-get_workitem_parent",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "ToDo: everything?\n\nthe description of this method seems to be wrong:\n\nget_workitem_parent\n----------\n\nGet the details of a specific feature.\n\nRequired Arguments:\n\n* `id` - The internal `_id` of the feature OR the authoritative `ID` from the origin system OR the `key` (user facing identifier) from the origin system.",
        "tags": [
          "ToDo"
        ]
      },
      "get": {
        "summary": "",
        "operationId": "get-get_workitem_parent",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": ""
      }
    },
    "/get_workitem_timeline": {
      "post": {
        "summary": "Get the timeline of a specific workitem",
        "operationId": "post-get_workitem_timeline",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Get the timeline of a specific workitem\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The internal `_id` of the workitem OR the authoritative `ID` from the origin system OR the `key` (user facing identifier) from the origin system"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        }
      }
    },
    "/get_worklist": {
      "post": {
        "summary": "Gets a list of Pipeline in 'pending' status",
        "operationId": "post-get_worklist",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets a list of Pipeline in 'pending' status",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "type": "string",
                    "description": "a key:value filter to limit the results"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/healthcheck": {
      "post": {
        "summary": "Performs a 'health check' on the system",
        "operationId": "post-healthcheck",
        "responses": {
          "200": {
            "description": "true/false",
            "content": {
              "application/json": {
                "schema": {
                  "description": "",
                  "type": "object",
                  "properties": {
                    "ErrorCode": {
                      "type": "string"
                    },
                    "ErrorDetail": {
                      "type": "string"
                    },
                    "ErrorMessage": {
                      "type": "string"
                    },
                    "Method": {
                      "type": "string",
                      "minLength": 1
                    },
                    "Response": {
                      "type": "object",
                      "properties": {
                        "active_users": {
                          "type": "number"
                        },
                        "healthy": {
                          "type": "boolean"
                        },
                        "queues": {
                          "type": "object",
                          "properties": {
                            "ciqueue": {
                              "type": "object",
                              "properties": {
                                "depth": {
                                  "type": "number"
                                },
                                "lag": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "depth",
                                "lag"
                              ]
                            },
                            "commandqueue": {
                              "type": "object",
                              "properties": {
                                "depth": {
                                  "type": "number"
                                },
                                "lag": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "depth",
                                "lag"
                              ]
                            },
                            "jobqueue": {
                              "type": "object",
                              "properties": {
                                "depth": {
                                  "type": "number"
                                },
                                "lag": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "depth",
                                "lag"
                              ]
                            },
                            "pi_stepqueue": {
                              "type": "object",
                              "properties": {
                                "depth": {
                                  "type": "number"
                                },
                                "lag": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "depth",
                                "lag"
                              ]
                            },
                            "taskqueue": {
                              "type": "object",
                              "properties": {
                                "depth": {
                                  "type": "number"
                                },
                                "lag": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "depth",
                                "lag"
                              ]
                            }
                          },
                          "required": [
                            "ciqueue",
                            "commandqueue",
                            "jobqueue",
                            "pi_stepqueue",
                            "taskqueue"
                          ]
                        },
                        "services": {
                          "type": "object",
                          "properties": {
                            "ctm-core": {
                              "type": "object",
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "count": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "active",
                                "count"
                              ]
                            },
                            "ctm-jobhandler": {
                              "type": "object",
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "count": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "active",
                                "count"
                              ]
                            },
                            "ctm-msghub": {
                              "type": "object",
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "count": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "active",
                                "count"
                              ]
                            },
                            "ctm-poller": {
                              "type": "object",
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "count": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "active",
                                "count"
                              ]
                            },
                            "ctm-ui": {
                              "type": "object",
                              "properties": {
                                "active": {
                                  "type": "boolean"
                                },
                                "count": {
                                  "type": "number"
                                }
                              },
                              "required": [
                                "active",
                                "count"
                              ]
                            }
                          },
                          "required": [
                            "ctm-core",
                            "ctm-jobhandler",
                            "ctm-msghub",
                            "ctm-poller",
                            "ctm-ui"
                          ]
                        },
                        "time": {
                          "type": "string",
                          "minLength": 1
                        }
                      },
                      "required": [
                        "active_users",
                        "healthy",
                        "queues",
                        "services",
                        "time"
                      ]
                    }
                  },
                  "required": [
                    "ErrorCode",
                    "ErrorDetail",
                    "ErrorMessage",
                    "Method",
                    "Response"
                  ]
                },
                "examples": {}
              }
            }
          }
        },
        "description": "Performs a 'health check' on the system",
        "security": [
          {
            "ctm_token": []
          }
        ]
      }
    },
    "/import_backup": {
      "post": {
        "summary": "Imports a backup file",
        "operationId": "post-import_backup",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Imports an XML or JSON backup file.\n\nDEPRECATED: this function is deprecated.  Use `import_task` instead",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "deprecated": true,
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "import_text": {
                    "type": "string",
                    "description": "An XML or JSON document in the format of a Task backup file"
                  }
                },
                "required": [
                  "import_text"
                ]
              }
            }
          }
        }
      }
    },
    "/import_catalog": {
      "post": {
        "summary": "Import all Project, Pipeline, Package, and Task definitions",
        "operationId": "post-import_catalog",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Import all Project, Pipeline, Package, and Task definitions from a catalog as a JSON document\n\nToDo: responses",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "projects": {
                    "type": "array",
                    "description": "An array of project JSON objects to import",
                    "items": {
                      "type": "object"
                    }
                  },
                  "pipelines": {
                    "type": "array",
                    "description": "An array of pipeline JSON objects to import",
                    "items": {
                      "type": "object"
                    }
                  },
                  "packages": {
                    "type": "array",
                    "description": "An array of package JSON objects to import",
                    "items": {
                      "type": "object"
                    }
                  },
                  "tasks": {
                    "type": "array",
                    "description": "An array of task JSON objects to import",
                    "items": {
                      "type": "object"
                    }
                  },
                  "overwrite": {
                    "type": "boolean",
                    "description": "If 'overwrite' is 'true' and the Definition exists, it will be replaced."
                  },
                  "human_readable": {
                    "type": "boolean",
                    "description": "Whether to provide output as name/message or id"
                  },
                  "import_into_team": {
                    "type": "string",
                    "description": "Team \"name\" or id. If specified, the catalog will be imported into the specified team, rather than the teams specified in the input.\nThis may be useful if you wish to import items from another team or Continuum instance"
                  }
                }
              },
              "examples": {
                "example-1": {
                  "value": {
                    "projects": [
                      {}
                    ],
                    "pipelines": [
                      {}
                    ],
                    "packages": [
                      {}
                    ],
                    "tasks": [
                      {}
                    ],
                    "overwrite": true,
                    "human_readable": true,
                    "import_into_team": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/import_mapping": {
      "post": {
        "summary": "Extracts relevant information from imported mapping",
        "operationId": "post-import_mapping",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Extracts relevant information from imported Mapping from ALMC mapping\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Source": {
                    "type": "string",
                    "description": "Source to which imported mapping belongs"
                  },
                  "MappingData": {
                    "type": "string",
                    "description": "Data from Mapping XML"
                  },
                  "IntegrationData": {
                    "type": "string",
                    "description": "Data from Integration json"
                  }
                },
                "required": [
                  "Source"
                ]
              }
            }
          },
          "description": "MappingData and IntegrationData are required for ALMC"
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/import_package": {
      "post": {
        "summary": "Import a Package",
        "operationId": "post-import_package",
        "responses": {
          "200": {
            "description": "success or error"
          }
        },
        "description": "Import a Package Definition from a backup file\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "backup": {
                    "type": "object",
                    "description": "A JSON document formatted as a Package Definition backup"
                  },
                  "overwrite": {
                    "type": "boolean",
                    "description": "If 'overwrite' is 'true' and the Definition exists, it will be replaced."
                  }
                }
              }
            }
          },
          "description": ""
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/import_pipeline": {
      "post": {
        "summary": "Import a Pipeline Definition",
        "operationId": "post-import_pipeline",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Import a Pipeline Definition\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "backup": {
                    "type": "string",
                    "description": " A JSON document formatted as a complete Continuum Pipeline Definition backup"
                  },
                  "overwrite": {
                    "type": "boolean",
                    "description": "If 'overwrite' is 'true' and the Definition exists, it will be replaced"
                  }
                },
                "required": [
                  "backup"
                ]
              }
            }
          }
        }
      }
    },
    "/import_progression": {
      "post": {
        "summary": "Import a Progression Definition",
        "operationId": "post-import_progression",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Import a Progression Definition from a backup file\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "backup": {
                    "type": "string",
                    "description": "A JSON document formatted as a Progression Definition backup"
                  },
                  "overwrite": {
                    "type": "boolean",
                    "description": "If 'overwrite' is 'true' and the Progression exists, it will be replaced"
                  }
                },
                "required": [
                  "backup"
                ]
              }
            }
          }
        }
      }
    },
    "/import_project": {
      "post": {
        "summary": "Import a Project",
        "operationId": "post-import_project",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Import a Project Definition from a backup file\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "backup": {
                    "type": "string",
                    "description": "A JSON document formatted as a complete Project backup"
                  },
                  "overwrite": {
                    "type": "boolean",
                    "description": "If 'overwrite' is 'true' the Project will be replaced"
                  }
                },
                "required": [
                  "backup"
                ]
              }
            }
          }
        }
      }
    },
    "/import_task": {
      "post": {
        "summary": "Imports a Task",
        "operationId": "post-import_task",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Imports a Task Definition from backup file\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "backup": {
                    "type": "string",
                    "description": "A JSON document in the format of a Task backup file"
                  },
                  "overwrite": {
                    "type": "boolean",
                    "description": "If 'overwrite' is 'true' the Task(s) will be replaced"
                  }
                },
                "required": [
                  "backup"
                ]
              }
            }
          },
          "description": "NOTE: There may be multiple Tasks in a single backup file, as often Tasks have dependencies on other Tasks, so all are included."
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/initiate_pipeline": {
      "post": {
        "summary": "Initiates a Pipeline Definition",
        "operationId": "post-initiate_pipeline",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Initiates a Pipeline Definition\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "defintion": {
                    "type": "string",
                    "description": "ID or Name of a Pipeline Definition to initiate"
                  },
                  "project": {
                    "type": "string",
                    "description": "An identifying name for a Project. (ie: repo name)  Useful if a single pipeline definition supports multiple projects"
                  },
                  "group": {
                    "type": "string",
                    "description": "Summary name, (ie: branch name) used to group all runs of this definition/project combination. Describes your 'use' of this Pipeline"
                  },
                  "instance_name": {
                    "type": "string",
                    "description": "An explicit name to use for this unique run.  (ie: commit id)"
                  },
                  "details": {
                    "type": "object",
                    "description": "a JSON object with additional properties for the Pipeline Instance, often required by specific plugins"
                  }
                },
                "required": [
                  "defintion",
                  "project",
                  "group"
                ]
              }
            }
          }
        }
      }
    },
    "/install_add_on": {
      "post": {
        "summary": "Installs an Add-On",
        "operationId": "post-install_add_on",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Installs an Add-On from the vs-exchange\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the Add-On to install"
                  },
                  "team": {
                    "type": "string",
                    "description": "Team to which to add parts of the Add-On that are scoped to a team. Required if the Add-On contains any such parts"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        }
      }
    },
    "/install_license": {
      "post": {
        "summary": "Installs a license",
        "operationId": "post-install_license",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Installs a license\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "license": {
                    "type": "string",
                    "description": "The text of a license key provided by Continuum"
                  }
                },
                "required": [
                  "license"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/invoke_plugin": {
      "post": {
        "summary": "Invokes a Plugin Function",
        "operationId": "post-invoke_plugin",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Invokes a Plugin Function\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "plugin": {
                    "type": "string",
                    "description": "The name of the Plugin PLUS the Module. (ex: github.main)"
                  },
                  "method": {
                    "type": "string",
                    "description": "The method to invoke. (ex \"test_connection\")"
                  },
                  "args": {
                    "type": "string",
                    "description": "A JSON formatted string of arguments which will be sent to the Plugin Function"
                  },
                  "team": {
                    "type": "string",
                    "description": "The Team in which to search for the Plugin Instance to use when invoking a Plugin Function that requires an Instance. Defaults to Plugins available to All Teams"
                  },
                  "instance_name": {
                    "type": "string",
                    "description": "A named Plugin instance in the Continuum configuration. Defaults to the Plugin Instance marked as default either within the specified Team or All Teams"
                  },
                  "timeout": {
                    "type": "integer",
                    "description": "The number of seconds to wait for the Plugin Function to execute before returning a timeout error.\n      Defaults to 60 seconds"
                  }
                },
                "required": [
                  "plugin",
                  "method"
                ]
              }
            }
          },
          "description": "This API call will block the thread while it waits for the Plugin Function to execute. Therefore, the timeout argument should be kept reasonably small based on the Plugin Function being executed to reduce the amount of time the thread remains blocked. This API cannot invoke Pipeline Step Plugin Functions. Pipeline Step Plugin Functions require the context of a Step to run successfully."
        }
      }
    },
    "/list_add_ons": {
      "post": {
        "summary": "Lists all Add-Ons",
        "operationId": "post-list_add_ons",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Lists all Add-Ons installed in this Continuum instance\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "": {
                    "type": "string",
                    "description": "If true, lists the names of all parts of each of the Add-Ons. Defaults to false"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/list_assets": {
      "post": {
        "summary": "Lists all Assets",
        "operationId": "post-list_assets",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Lists all Assets\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "type": "string",
                    "description": "will filter a value match on: (Multiple filter arguments can be provided, delimited by spaces)",
                    "enum": [
                      "Asset Name",
                      "Port",
                      "Address",
                      "DB Name",
                      "Status",
                      "Credential Username"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/list_canvas_items": {
      "post": {
        "summary": "Gets a list of all elements in the Canvas feature",
        "operationId": "post-list_canvas_items",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets a list of all elements in the Canvas feature\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "type": "string",
                    "description": "filter by a Canvas Project name"
                  },
                  "component": {
                    "type": "string",
                    "description": "filter by a Canvas Component. (Project is required)"
                  },
                  "repository": {
                    "type": "string",
                    "description": "specify the repository ('file' or 'db', 'db' if omitted)",
                    "enum": [
                      "file",
                      "db"
                    ]
                  }
                }
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/list_changes": {
      "post": {
        "summary": "Gets all Changes",
        "operationId": "post-list_changes",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Gets all Changes\n\nToDo: responses\nToDo: managed and unmanaged are two separate arguments?",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "type": "string",
                    "description": "will limit the results to a specific 'project'"
                  },
                  "group": {
                    "type": "string",
                    "description": "will limit the results to a specific 'group'"
                  },
                  "since": {
                    "type": "string",
                    "description": "will only return changes since the provided timestamp"
                  },
                  "managed": {
                    "type": "string",
                    "description": "will list only the managed changes"
                  },
                  "unmanaged": {
                    "type": "string",
                    "description": "will list only the unmanaged changes"
                  },
                  "limit": {
                    "type": "string",
                    "description": "will limit the number of changes"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/list_cloud_accounts": {
      "post": {
        "summary": "Gets all Cloud Accounts",
        "operationId": "post-list_cloud_accounts",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets all Cloud Accounts\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "type": "string",
                    "description": "will filter a value match on one or more filter arguments, delimited by spaces. Account Name\nAccount Number / Provider / Login ID / Default Cloud Name"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/list_cloud_keypairs": {
      "post": {
        "summary": "Gets all the Key Pairs defined on a Cloud",
        "operationId": "post-list_cloud_keypairs",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Gets all the Key Pairs defined on a Cloud\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "cloud": {
                    "type": "string",
                    "description": "Name or ID of a Cloud"
                  }
                },
                "required": [
                  "cloud"
                ]
              }
            }
          }
        }
      }
    },
    "/list_clouds": {
      "post": {
        "summary": "Gets all Clouds",
        "operationId": "post-list_clouds",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets all Clouds\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "type": "string",
                    "description": "will filter a value match on one or more filter arguments, delimited by spaces. Cloud Name / Provider / Default Account Name / API URL"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/list_credentials": {
      "post": {
        "summary": "Gets all Shared Credentials",
        "operationId": "post-list_credentials",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets all Shared Credentials\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "type": "string",
                    "description": "will filter a value match on one or more filter arguments, delimited by spaces. Credential Name / Username / Domain / Description"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/list_packages": {
      "post": {
        "summary": "Gets all Package Definitions",
        "operationId": "post-list_packages",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets all Package Definitions\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ]
      }
    },
    "/list_pipelinegroups": {
      "post": {
        "summary": "Gets all Pipeline Instance Groups",
        "operationId": "post-list_pipelinegroups",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets all Pipeline Instance Groups\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pipeline": {
                    "type": "string",
                    "description": "will limit the results a specific Pipeline Definition"
                  },
                  "project": {
                    "type": "string",
                    "description": "will limit the results a specific 'project'"
                  },
                  "group": {
                    "type": "string",
                    "description": "will limit the results to a specific 'group'"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/list_pipelineinstances": {
      "post": {
        "summary": "Gets all Pipeline Instances",
        "operationId": "post-list_pipelineinstances",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Gets all Pipeline Instances\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "definition": {
                    "type": "string",
                    "description": "will limit the results a specific Pipeline Definition"
                  },
                  "project": {
                    "type": "string",
                    "description": "will limit the results to a specific project"
                  },
                  "group": {
                    "type": "string",
                    "description": "will limit the results to a specific group"
                  },
                  "since": {
                    "type": "string",
                    "description": "Will only return instances since the provided timestamp"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Limit the number of results (0 for all results, 100 if omitted)",
                    "default": 100
                  }
                }
              }
            }
          }
        }
      }
    },
    "/list_pipelines": {
      "post": {
        "summary": "Gets all Pipeline Definitions",
        "operationId": "post-list_pipelines",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Gets all Pipeline Definitions\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ]
      }
    },
    "/list_processes": {
      "post": {
        "summary": "Gets all running processes",
        "operationId": "post-list_processes",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Gets all running processes\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ]
      }
    },
    "/list_progressions": {
      "post": {
        "summary": "Gets all Progressions",
        "operationId": "post-list_progressions",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Gets all Progressions\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ]
      }
    },
    "/list_projects": {
      "post": {
        "summary": "Gets all Projects",
        "operationId": "post-list_projects",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets all Projects\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ]
      }
    },
    "/list_registries": {
      "post": {
        "summary": "Gets all Registries",
        "operationId": "post-list_registries",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Gets all Registries\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ]
      }
    },
    "/list_tags": {
      "post": {
        "summary": "Gets all Assignment Groups",
        "operationId": "post-list_tags",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets all Assignment Groups (formerly known as Tags)\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "tags": [
          "ToDo"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "type": "string",
                    "description": "will filter a value match in Tag Name - multiple filter arguments can be provided, delimited by spaces"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/list_tasks": {
      "post": {
        "summary": "Gets all Tasks",
        "operationId": "post-list_tasks",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Gets all Tasks\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "type": "string",
                    "description": "will filter a value match in Task Name, Code or Description - multiple filter arguments can be provided, delimited by spaces"
                  }
                }
              }
            }
          },
          "description": "The Task Objects returned to this function are streamlined - they do not contain all the properties available in the `get_task` endpoint."
        }
      }
    },
    "/list_users": {
      "post": {
        "summary": "Gets all Users",
        "operationId": "post-list_users",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Gets all registered Users\n\nOnly users with the role \"System Administrator\" can list all registered users.  If the credentials used for this API call do not have the proper permission, the call will not succeed.\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filter": {
                    "type": "string",
                    "description": "will filter a value match on: \n\n- Full Name\n- Login ID\n- Role\n- Email address\n\n(multiple filter arguments can be provided, delimited by spaces.)"
                  }
                }
              }
            }
          },
          "description": ""
        }
      }
    },
    "/metric": {
      "post": {
        "summary": "Gets value of metric",
        "operationId": "post-metric",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Given a named metric and required context retrieve the value of that metric\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The name of the desired metric"
                  },
                  "context": {
                    "type": "string",
                    "description": "A collection of key value pairs specific to the type provided"
                  }
                },
                "required": [
                  "type",
                  "context"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/new_revision": {
      "post": {
        "summary": "Creates a new Revision",
        "operationId": "post-new_revision",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Creates a new Revision of a specified Version of a Package\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "package": {
                    "type": "string",
                    "description": "Name of the Package to revise"
                  },
                  "version": {
                    "type": "string",
                    "description": "Version in which to create a new Revision (Package Revisions increment _within_ specific Versions"
                  },
                  "full_version": {
                    "type": "string",
                    "description": "Full Version of package to promote, optional alternative selector to `revision`"
                  }
                },
                "required": [
                  "package"
                ]
              }
            }
          },
          "description": "Note: Often, it is desireable that the `full_version` actually contain the number of the newly created Revision.  A special keyword, \n `__NEWREVISION`, is recognized in the value provided for `full_version` and will be replaced with the new Revision number."
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/override_control": {
      "post": {
        "summary": "Override a Control",
        "operationId": "post-override_control",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Given a Package Revision, a Phase and a Control Name, will override that Control if it exists and is failed\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "package": {
                    "type": "string",
                    "description": "Name of the Package to promote to a progression Phase"
                  },
                  "revision": {
                    "type": "string",
                    "description": "Revision number of a Package to promote, takes precedence over `full_version`"
                  },
                  "full_version": {
                    "type": "string",
                    "description": "Full Version of package to promote, optional alternative selector to `revision`"
                  },
                  "phase": {
                    "type": "string",
                    "description": "Name of the Phase containing the Activity of the Control to override"
                  },
                  "activity": {
                    "type": "string",
                    "description": "Name of the Activity containing the Control to override"
                  },
                  "control": {
                    "type": "string",
                    "description": "Name of the Control to override"
                  },
                  "reason": {
                    "type": "string",
                    "description": "Description of the reason for overriding the Control"
                  }
                },
                "required": [
                  "package",
                  "revision",
                  "full_version",
                  "phase",
                  "activity",
                  "control",
                  "reason"
                ]
              }
            }
          }
        }
      }
    },
    "/post_pi_data": {
      "post": {
        "summary": "Post data to the Workspace on a running Pipeline Instance",
        "operationId": "post-post_pi_data",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Post data to the Workspace on a running Pipeline Instance\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pi": {
                    "type": "string",
                    "description": "the id or name of a Pipeline Instance"
                  },
                  "key": {
                    "type": "string",
                    "description": "key to set in the Workspace data"
                  },
                  "value": {
                    "type": "string",
                    "description": "value for the provided key"
                  }
                },
                "required": [
                  "pi",
                  "key",
                  "value"
                ]
              }
            }
          },
          "description": "All data is posted under a parent key - 'returns', to protect the overall Workspace."
        }
      }
    },
    "/promote_revision": {
      "post": {
        "summary": "Promotes a Package Revision",
        "operationId": "post-promote_revision",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Promotes a Package Revision to a particular Phase\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "tags": [
          "ToDo"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "package": {
                    "type": "string",
                    "description": "Name of the Package to promote to a Progression Phase"
                  },
                  "revision": {
                    "type": "string",
                    "description": "Revision number of a Package to promote, takes precedence over `full_version`"
                  },
                  "full_version": {
                    "type": "string",
                    "description": "Optional Full Version of package to promote, optional alternative selector to `revision`"
                  },
                  "phase": {
                    "type": "string",
                    "description": "Name of the Phase to which the specified Package Revision will be promoted"
                  },
                  "new_version": {
                    "type": "string",
                    "description": "If provided, all Revisions being promoted will be updated to the provided `new_version` - will attempt to also update `full_version` if possible"
                  }
                },
                "required": [
                  "package",
                  "revision",
                  "full_version",
                  "phase"
                ]
              }
            }
          }
        }
      }
    },
    "/register_artifact": {
      "post": {
        "summary": "Record a new revision of a specific Artifact",
        "operationId": "post-register_artifact",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Record a new revision of a specific Artifact\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "project": {
                    "type": "string",
                    "description": "Name or ID of the Project where this Artifact is defined"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the Artifact to revise"
                  },
                  "branch": {
                    "type": "string",
                    "description": "Branch in the repository from which this artifact was built"
                  },
                  "location": {
                    "type": "string",
                    "description": "Optional URL or path to where this Artifact can be found"
                  },
                  "build_data": {
                    "type": "object",
                    "description": "Optional JSON object additional data about the build"
                  }
                },
                "required": [
                  "project",
                  "name",
                  "branch",
                  "location"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/remove_object_tag": {
      "post": {
        "summary": "Removes a Tag from an object",
        "operationId": "post-remove_object_tag",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Removes an Tag from an object\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag": {
                    "type": "string",
                    "description": "The name of the Tag"
                  },
                  "object_id": {
                    "type": "string",
                    "description": "The ID of the object"
                  },
                  "object_type": {
                    "type": "string",
                    "description": "The numeric type of the object"
                  }
                },
                "required": [
                  "tag",
                  "object_id",
                  "object_type"
                ]
              }
            }
          }
        }
      }
    },
    "/remove_team": {
      "post": {
        "summary": "Remove an empty Team",
        "operationId": "post-remove_team",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Remove an empty Team\n\nOnly a 'System Administrator' can remove a team.  If the credentials used for this API call\nare not a Syetem Administrator, the call will not succeed.\n\nToDo: responses",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "team": {
                    "type": "string",
                    "description": "Name or ID of the Team to change"
                  }
                },
                "required": [
                  "team"
                ]
              }
            }
          }
        },
        "security": [
          {
            "ctm_token": []
          }
        ],
        "tags": [
          "ToDo"
        ]
      }
    },
    "/remove_team_user": {
      "post": {
        "summary": "Removes a User from a Team",
        "operationId": "post-remove_team_user",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Removes a User from a Team\n\nOnly a 'Team Administrator' can manage Team membership.  If the credentials used for this API call\nare not a Team Administrator for the specified Team, the call will not succeed.\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "team": {
                    "type": "string",
                    "description": "Name or ID of the Team to change"
                  },
                  "user": {
                    "type": "string",
                    "description": "Name or ID of the User to remove"
                  },
                  "default": {
                    "type": "string",
                    "description": "Users must be in at least one Team.  If the removal operation would leave this User Teamless, specify a new default Team Name for the User. Will attempt to use `Default` if omitted.",
                    "default": "Default"
                  }
                },
                "required": [
                  "team",
                  "user"
                ]
              }
            }
          },
          "description": "NOTE: if a new Default Team is assigned, the User will be given the `User` role in the Default Team"
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/rerun_pipelineinstance": {
      "post": {
        "summary": "Rerun an Instance",
        "operationId": "post-rerun_pipelineinstance",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Rerun an Instance, using the saved 'initial data'. This creates a new Instance exactly as the provided one was started\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pi": {
                    "type": "string"
                  }
                },
                "required": [
                  "pi"
                ]
              }
            }
          },
          "description": ""
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/reset_password": {
      "post": {
        "summary": "Resets the password",
        "operationId": "post-reset_password",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Resets the password of the authenticated, or a specified User.\n\nIf a user is specified, and the authenticated user is an Administrator,\nthis will reset the password of the specified user to the provided value.\n\nIf no user is specified, the password of the authenticated user will be changed.\n\n> NOTE: to prevent accidental change of an Administrators password, an extra trap is in place: the username (or id) MUST be provided, even if the authenticated user is the user being changed.\n\nToDo: responses\nToDo: verify 'generate' argument\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "the new password"
                  },
                  "generate": {
                    "type": "boolean",
                    "description": "generate a random password"
                  }
                },
                "required": [
                  "password",
                  "generate"
                ]
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "the new password "
                  },
                  "generate": {
                    "type": "boolean",
                    "description": "generate a random password"
                  },
                  "user": {
                    "type": "string",
                    "description": "Either the User ID or Name"
                  }
                },
                "required": [
                  "password",
                  "generate"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "password": "string",
                    "generate": true,
                    "user": "string"
                  }
                }
              }
            }
          },
          "description": "Specify either `password` or `generate`"
        },
        "security": [
          {
            "ctm_token": []
          }
        ],
        "tags": [
          "ToDo"
        ]
      }
    },
    "/resubmit_change": {
      "post": {
        "summary": "Resubmits a change",
        "operationId": "post-resubmit_change",
        "responses": {
          "200": {
            "description": "true/errors"
          }
        },
        "description": "Resubmits a change 'Submission' payload to the specified Project.\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "query": {
                    "type": "string",
                    "description": "Valid MongoDB query to identify the previous payload to resubmit"
                  }
                },
                "required": [
                  "query"
                ]
              }
            }
          },
          "description": "If the query would return multiple submissions, the newest one is matched"
        }
      }
    },
    "/resubmit_task_instance": {
      "post": {
        "summary": "Resubmits a Task Instance",
        "operationId": "post-resubmit_task_instance",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Resubmits an Errored or Cancelled Task Instance.  Resubmit is only valid on Errored or Cancelled Task Instances.\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "instance": {
                    "type": "string",
                    "description": "The Task Instance identifier"
                  }
                },
                "required": [
                  "instance"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/resync_transformer_event": {
      "post": {
        "summary": "Resyncs a failed event",
        "operationId": "post-resync_transformer_event",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Resyncs a failed Transformer event\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inbound_id": {
                    "type": "string",
                    "description": "The inbound id of the failed event"
                  }
                },
                "required": [
                  "inbound_id"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/retry_pipelineinstance": {
      "post": {
        "summary": "Retries a Pipeline Instance",
        "operationId": "post-retry_pipelineinstance",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Attempt to retry a failed Pipeline Instance.  Simply restarts it again at Phase One.\n\n> CAUTION: The Workspace data is not cleared or reset.  Depending on the design of the Pipeline,\nthis may not succeed, or might produce unexpected results.\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pi": {
                    "type": "string",
                    "description": "The Name or ID of a Pipeline Instance"
                  }
                },
                "required": [
                  "pi"
                ]
              }
            },
            "application/xml": {
              "schema": {
                "type": "object",
                "properties": {
                  "pi": {
                    "type": "string",
                    "description": "The Name or ID of a Pipeline Instance"
                  }
                },
                "required": [
                  "pi"
                ]
              },
              "examples": {
                "example-1": {
                  "value": {
                    "pi": "string"
                  }
                }
              }
            }
          },
          "description": ""
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/reversion_packagerevision": {
      "post": {
        "summary": "Changes the version of a Package Revision",
        "operationId": "post-reversion_packagerevision",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Changes the Version of the specified (and all matching previous) Package Revisions\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "package": {
                    "type": "string",
                    "description": "Name of the Package to promote to a Progression Phase"
                  },
                  "revision": {
                    "type": "string",
                    "description": "Revision number of a Package to promote, takes precedence over `full_version`"
                  },
                  "full_version": {
                    "type": "string",
                    "description": "Optional Full Version of package to promote, optional alternative selector to `revision`"
                  },
                  "new_version": {
                    "type": "string",
                    "description": "If provided, all Revisions being promoted will be updated to the provided `new_version` - will attempt to also update `full_version` if possible"
                  }
                },
                "required": [
                  "package",
                  "revision",
                  "full_version",
                  "new_version"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/run_metric": {
      "post": {
        "summary": "Runs a specific metric",
        "operationId": "post-run_metric",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Runs a specific metric\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "module": {
                    "type": "string",
                    "description": "Name of the metrics module that contains the metric function to run"
                  },
                  "metric": {
                    "type": "string",
                    "description": "Name of a function definition in the specified module"
                  }
                },
                "required": [
                  "module",
                  "metric"
                ]
              }
            }
          }
        }
      }
    },
    "/run_task": {
      "post": {
        "summary": "Runs a Task",
        "operationId": "post-run_task",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "initialdata": {
                    "type": "string",
                    "description": "A JSON document defining the intial Runtime Variable environment for this Task"
                  },
                  "log_level": {
                    "type": "string",
                    "description": "an integer (0-4) where 0 is none, 2 is normal and 4 is verbose",
                    "default": "2"
                  },
                  "parameters": {
                    "type": "string",
                    "description": "A JSON or XML document defining parameters for the Task"
                  },
                  "options": {
                    "type": "object",
                    "description": "a JSON object defining certain options for this Task.  Typically used to provide scope for extensions to the Task Engine"
                  },
                  "run_later": {
                    "type": "string",
                    "description": "if provided, the Task will be scheduled to run at the specified date/time",
                    "format": "date-time"
                  },
                  "run_on_worker": {
                    "type": "string",
                    "description": "if provided, the Task will be explicitly assigned to the specified worker - use the 'user@host' format to identify the target worker"
                  }
                }
              }
            }
          },
          "description": "* If `output_format` is set to `text`, returns only a Task Instance ID.\n* If `run_later` was specified, will return a success or error message."
        },
        "description": "Runs a Task\n\nToDo: responses\nToDo: isd initialdata a reference to a document, or a json object?",
        "tags": [
          "ToDo"
        ]
      }
    },
    "/save_email_configuration": {
      "post": {
        "summary": "Save email notification",
        "operationId": "post-save_email_configuration",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Configure email notification for the data map\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the data map"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/schedule_tasks": {
      "post": {
        "summary": "Schedules one or more Tasks",
        "operationId": "post-schedule_tasks",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Schedules one or more Tasks\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tasks": {
                    "type": "string",
                    "description": "a JSON document containing a list of Tasks and schedule details"
                  }
                },
                "required": [
                  "tasks"
                ]
              }
            }
          },
          "description": "Schedule definition format:\n\nAll lists are _zero based_ integers.\n\nThe [Task Schedule Object](api-response-objects#task-schedule) response from the `get_task_schedules` command in JSON format\n can provide schedule definition examples for this command.\n\n{\n    \"Task\" : *task name*,\n    \"Version\" : *optional*,\n    \"Months\": \"*\" or [list of months],\n    \"DaysOrWeekdays\": \"Days\" = days of the month, \"Weekdays\" = days of the week (default),\n    \"Days\": \"*\" or [list of days],\n    \"Hours\": \"*\" or [list of hours],\n    \"Minutes\": \"*\" or [list of minutes]\n},\n{\n    ...\n}\n\nToDo: responses\nToDo: payload examples\n\n"
        }
      }
    },
    "/send_message": {
      "post": {
        "summary": "Sends a message to a user",
        "operationId": "post-send_message",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Sends a message to a registered user.  Message will be 'From' the authenticated API user.\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "to": {
                    "type": "string",
                    "description": "a single or comma-separated list of valid email addresses or Continuum Users"
                  },
                  "subject": {
                    "type": "string",
                    "description": "a subject line"
                  },
                  "message": {
                    "type": "string",
                    "description": "the message body"
                  },
                  "cc": {
                    "type": "string",
                    "description": "a carbon copy list of comma-separated email addresses or Continuum Users"
                  },
                  "bcc": {
                    "type": "string",
                    "description": "a blind carbon copy list of comma-separated email addresses or Continuum Users"
                  }
                },
                "required": [
                  "to",
                  "subject",
                  "message"
                ]
              }
            }
          },
          "description": "The 'to' argument accepts both email addresses AND Continuum Users.  Each item in the 'to' list will try to look up a Continuum User, and if it doesn't match, will assume the entry is an email address."
        }
      }
    },
    "/set_pi_data": {
      "post": {
        "summary": "Set data on a Pipeline Instance",
        "operationId": "post-set_pi_data",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Set Workspace data on a running Pipeline Instance\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pi": {
                    "type": "string",
                    "description": "the id or name of a Pipeline Instance"
                  },
                  "key": {
                    "type": "string",
                    "description": "key to set in the Workspace data - certain internal keys are restricted and cannot be overridden"
                  },
                  "value": {
                    "type": "string",
                    "description": "value for the provided key"
                  }
                },
                "required": [
                  "pi",
                  "key",
                  "value"
                ]
              }
            }
          },
          "description": "> NOTE: USE WITH CAUTION! This function has the ability to overwrite values anywhere in\nthe Workspace.  For safer and more common cases, use 'post_pi_data'."
        }
      }
    },
    "/set_pi_description": {
      "post": {
        "summary": "Set the Pipeline Instance description",
        "operationId": "post-set_pi_description",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Set the description of a specific Pipeline Instance.\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pi": {
                    "type": "string",
                    "description": "the id or name of a Pipeline Instance"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description to set (HTML allowed)"
                  }
                },
                "required": [
                  "pi",
                  "description"
                ]
              }
            }
          }
        }
      }
    },
    "/set_pi_global_summary": {
      "post": {
        "summary": "Set global summary on a Pipeline Instance",
        "operationId": "post-set_pi_global_summary",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Set global summary data on a pipeline instance\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "tags": [
          "ToDo"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pi": {
                    "type": "string",
                    "description": "the id or name of a pipeline instance"
                  },
                  "key": {
                    "type": "string",
                    "description": "key to set in the global summary"
                  },
                  "value": {
                    "type": "string",
                    "description": "value for the provided key"
                  }
                },
                "required": [
                  "pi",
                  "key",
                  "value"
                ]
              }
            }
          }
        }
      }
    },
    "/set_pipelinegroup_number": {
      "post": {
        "summary": "Set the autonumber root on a Pipeline Instance Group",
        "operationId": "post-set_pipelinegroup_number",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Set the autonumber root on Pipeline Instance Group. (Used to issue ascending numbers to Instances in the Group)\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pg": {
                    "type": "string",
                    "description": "The ID of a Pipeline Instance Group"
                  },
                  "newnumber": {
                    "type": "string",
                    "description": "The new number to set as the autonumber root"
                  }
                },
                "required": [
                  "pg",
                  "newnumber"
                ]
              }
            }
          }
        }
      }
    },
    "/set_registry": {
      "post": {
        "summary": "Sets Registry values",
        "operationId": "post-set_registry",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Sets values in a specific Registry document\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "tags": [
          "ToDo"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the Registry document"
                  },
                  "value": {
                    "type": "string",
                    "description": "Value to set at specified path, or entire document - if omitted, target key or document will be cleared"
                  },
                  "path": {
                    "type": "string",
                    "description": "If specified, will place `value` at this path - if omitted, will update the entire document"
                  },
                  "action": {
                    "type": "string",
                    "enum": [
                      "set",
                      "unset",
                      "addtoset",
                      "push",
                      "pull",
                      "merge"
                    ]
                  },
                  "create": {
                    "type": "boolean",
                    "description": "Create named Registry if it doesn't exist"
                  },
                  "options": {
                    "type": "string",
                    "description": "Additional Options. Dependent on the value of `action`"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "description": "* if `action: merge` is specified, the available options are:\n* `overwrite` - Overwrite exisiting keys on conflict? Valid values: true|false (default).\n* `deep` - Perform a shallow or deep merge when merging objects Valid values: true|false (default)."
        }
      }
    },
    "/stop_task": {
      "post": {
        "summary": "Stops a Task",
        "operationId": "post-stop_task",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Stops a running Task Instance\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "instance": {
                    "type": "string",
                    "description": "The Task Instance identifier"
                  }
                },
                "required": [
                  "instance"
                ]
              }
            }
          }
        }
      }
    },
    "/submit_change": {
      "post": {
        "summary": "Submits a change payload",
        "operationId": "post-submit_change",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Submits a change payload to the specified Project\n\nToDo: responses\nToDo: payload (example)",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "toproject": {
                    "type": "string",
                    "description": "the ID or Name of a Project"
                  }
                },
                "required": [
                  "toproject"
                ]
              }
            }
          },
          "description": "> NOTE: This API is different than most others.  It's expecting a JSON\ndocument as HTTP POST data.  The required `toproject` argument can either beprovided inside the POST data, or on the URL querystring.\n"
        }
      }
    },
    "/test_plugin_connection": {
      "post": {
        "summary": "Tests connectivity to a Plugin instance",
        "operationId": "post-test_plugin_connection",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Tests connectivity to a Plugin instance defined in the Continuum configuration\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "plugin_name": {
                    "type": "string",
                    "description": "the name of a Plugin (ex: v1plugin) - this will look up the proper Module"
                  },
                  "plugin": {
                    "type": "string",
                    "description": "the name of the Plugin PLUS the Module. (ex: v1plugin.main)",
                    "deprecated": true
                  },
                  "instance": {
                    "type": "string",
                    "description": "A named Plugin instance in the Continuum configuration - if not used, the default instance will be tested"
                  },
                  "team": {
                    "type": "string",
                    "description": "the Team to search for the Plugin Instance. Defaults to plugins available to All Teams"
                  }
                },
                "required": [
                  "plugin_name",
                  "plugin"
                ]
              }
            }
          }
        }
      }
    },
    "/uninstall_add_on": {
      "post": {
        "summary": "Uninstalls an Add-On",
        "operationId": "post-uninstall_add_on",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Uninstalls an Add-On\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the Add-On to uninstall"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/update_cloud": {
      "post": {
        "summary": "Updates a Cloud",
        "operationId": "post-update_cloud",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Updates a Cloud\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name or ID of the Cloud to update"
                  },
                  "apiurl": {
                    "type": "string",
                    "description": "URL of the Cloud API endpoint"
                  },
                  "apiprotocol": {
                    "type": "string",
                    "description": "Cloud API endpoint protocol"
                  },
                  "default_account": {
                    "type": "string",
                    "description": "the name of a default Account for this Cloud"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "security": [
          {
            "ctm_token": []
          }
        ]
      }
    },
    "/update_settings": {
      "post": {
        "summary": "Updates the settings",
        "operationId": "post-update_settings",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Updates the settings of a process or module\n\nToDo: responses\nToDo: settings argument (string/arraylist?)",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "module": {
                    "type": "string",
                    "description": "name of the module to apply the settings"
                  },
                  "settings": {
                    "type": "string",
                    "description": "a list of name:value setting objects"
                  }
                },
                "required": [
                  "module",
                  "settings"
                ]
              }
            }
          },
          "description": "NOTE: the update_settings command requires submission of a JSON settings object. As a guide for updating settings, first execute this command with the `Accept: application/json` header (or output_format=json argument).\n\nFor example, to update Messenger settings, first do:\n\nget_settings?module=messenger&output_format=json\n\n...then use the result as a template for update_settings."
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/update_transformer_data_map": {
      "post": {
        "summary": "Updates a data map",
        "operationId": "post-update_transformer_data_map",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Updates a data map\n\nToDo: responses\nToDo: forward-direction and backwad-direction arguments",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the data map"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the data map"
                  },
                  "direction_type": {
                    "type": "string",
                    "description": "The direction of the mapping",
                    "enum": [
                      "forward-direction",
                      "backward-direction",
                      "bi-direction"
                    ]
                  },
                  "forward-direction": {
                    "type": "string",
                    "description": "The field mappings for the forward direction"
                  },
                  "backward-direction": {
                    "type": "string",
                    "description": "The field mappings for the backward direction"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/update_transformer_data_map_with_new_fields": {
      "post": {
        "summary": "Updates data map",
        "operationId": "post-update_transformer_data_map_with_new_fields",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Updates data map by fetching new fields from the target systems\n\nToDo: responses",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The id of the data map"
                  }
                },
                "required": [
                  "id"
                ]
              }
            }
          }
        },
        "tags": [
          "ToDo"
        ]
      }
    },
    "/update_user": {
      "post": {
        "summary": "Updates a user account",
        "operationId": "post-update_user",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Updates a user account\n\nToDo: responses",
        "tags": [
          "ToDo"
        ],
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "string",
                    "description": "ID or Name of the User to update"
                  },
                  "name": {
                    "type": "string",
                    "description": "The full name of the user"
                  },
                  "role": {
                    "type": "string",
                    "description": "The user's role",
                    "enum": [
                      "Administrator",
                      "Developer",
                      "User"
                    ]
                  },
                  "teams": {
                    "type": "string",
                    "description": "A list of teams the user belongs to, along with a role for each team. Teams and roles are separated by a colon. Team/role pairs are separated by commas."
                  },
                  "is_system_administrator": {
                    "type": "boolean",
                    "description": "Whether the user should have system administrator privileges - default is false"
                  },
                  "is_shared_asset_manager": {
                    "type": "boolean",
                    "description": "Whether the user should have shared asset manager privileges - default is false"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email address for the user.  Can be cleared with \"None\""
                  },
                  "authtype": {
                    "type": "string",
                    "enum": [
                      "local",
                      "ldap"
                    ]
                  },
                  "forcechange": {
                    "type": "boolean",
                    "description": "Require user to change password on next login"
                  },
                  "status": {
                    "type": "string",
                    "description": "Status of the account",
                    "enum": [
                      "enabled",
                      "disabled",
                      "locked"
                    ]
                  },
                  "expires": {
                    "type": "string",
                    "description": "Expiration date for this account.  Must be in mm/dd/yyyy format. Can be cleared with \"None\""
                  },
                  "groups": {
                    "type": "string",
                    "description": "Add to the list of assignment groups the user belongs to. Group names cannot contain spaces. Comma delimited list"
                  },
                  "contributors": {
                    "type": "string",
                    "description": "Contributors are usernames in source control management systems related to this User - enter one or more comma-separated Contributor 'aliases'"
                  },
                  "password": {
                    "type": "string",
                    "description": "The new password. If a password is set then the 'generate' option is ignored"
                  },
                  "generate": {
                    "type": "boolean",
                    "description": "Generate a random password - this only works if no password is provided via the 'password' option"
                  }
                },
                "required": [
                  "user"
                ]
              }
            }
          },
          "description": "Only users with the role \"System Administrator\" can update users.  If the credentials used for this API call\ndo not have the proper permission, the call will not succeed.\n\nProperties will only be updated if the option is provided.  Omitted properties will not be changed.\n\nNOTE: the \"username\" of a user cannot be changed.\n\nIf a user has 'locked' their account by numerous failed login attempts, the flag is reset\nby setting any property.  It's easiest to just set the status to 'enabled'."
        }
      }
    },
    "/v1_workitem_sync": {
      "post": {
        "summary": "Accepts telemetry from Agility",
        "operationId": "post-v1_workitem_sync",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Accepts telemetry from Digital.ai Agility regarding changes to Workitems\n\n> NOTE: This API is specifically bound to the format of Digital.ai Agility webhooks.  It's expecting a JSON\ndocument as HTTP POST data.  See the Digital.ai Agility webhooks documentation for the actual schema.\n\n> This API hands processing off to a jobhandler thread.  Therefore it will always return 'success' in accepting the payload, or an error.\nA 'success'ful API transaction does not mean that Continuum successfully processed the payload - watch the jobhandler log for details.\n\nToDo: responses",
        "tags": [
          "ToDo"
        ]
      }
    },
    "/validate_instance": {
      "post": {
        "summary": "Validate an instance of Continuum exists",
        "operationId": "post-validate_instance",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "ToDo"
        ],
        "description": "Validate an instance of Continuum exists and the request is authenticated\n\nToDo: responses\nToDo: do I need a token here?",
        "security": [
          {
            "ctm_token": []
          }
        ]
      }
    },
    "/version": {
      "get": {
        "summary": "Gets the Continuum version",
        "tags": [],
        "responses": {
          "200": {
            "description": "Continuum version number"
          }
        },
        "operationId": "get-version",
        "description": "Gets the Continuum version"
      }
    },
    "/winrm_command": {
      "post": {
        "summary": "Test connectivity or issue Windows Remote Management commands on a defined Asset",
        "operationId": "post-winrm_command",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Test connectivity or issue Windows Remote Management commands on a defined Asset",
        "security": [
          {
            "ctm_token": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "asset": {
                    "type": "string",
                    "description": "Asset ID or Name of an Asset to use for the connection"
                  },
                  "server": {
                    "type": "string",
                    "description": "WinRM Server FQDN or IP address"
                  },
                  "user": {
                    "type": "string",
                    "description": "User account"
                  },
                  "password": {
                    "type": "string",
                    "description": "User password"
                  },
                  "kerberos": {
                    "type": "boolean",
                    "description": "Use Kerberos authentication if 'True', basic authentication if omitted"
                  },
                  "command": {
                    "type": "string",
                    "description": "The command to execute - will connection test only if omitted"
                  },
                  "pwershell": {
                    "type": "boolean",
                    "description": "will execute the command as a PowerShell command"
                  }
                },
                "required": [
                  "asset",
                  "server",
                  "user",
                  "password"
                ]
              }
            }
          },
          "description": "Specify either the `asset` or `server` + `user` + `password`"
        },
        "tags": [
          "Internal",
          "ToDo"
        ]
      }
    },
    "/xlrelease_status": {
      "get": {
        "summary": "Your GET endpoint",
        "tags": [
          "Internal",
          "ToDo"
        ],
        "responses": {},
        "operationId": "get-xlrelease_status",
        "description": "ToDo: everything :-)\n\n\nThis endpoint expects a customized response from XL Release.\n\nThis payload will be evaluated and mapped (if possible) to the appropriate Continuum context,\nbe that a Pipeline Instance, Package Revision, or other asset.\n\nThis payload must be an JSON object with the following two root level keys:\n\n* `continuum_context` - All of the Continuum context that was passed to the XL Release when it was triggered.\n* `xlrelease_details` - A document containing all the details of the XL Release - phases, tasks, status indicators, etc.\n\nExample Payload:\n\n```\n{\n    \"continuum_context\": {\n\"project_id\": \"abc123\",\n\"pipeline_id\": \"\"zyx890\",\n\"all the other\": \"data in the context\"\n    },\n    \"xlrelease_details\": {\n\"all the details\": \"of the release\"\n    }\n}\n```\n\nReturns: HTTP Return Code, no data."
      }
    }
  },
  "tags": [
    {
      "name": "Internal"
    },
    {
      "name": "ToDo"
    }
  ],
  "security": [
    {
      "Token 559589e35fb284021f6aa2ca": []
    }
  ]
}