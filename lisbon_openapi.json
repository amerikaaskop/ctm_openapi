{
  "paths": {
    "/api/configuration": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "category",
            "required": false,
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "type_name",
            "required": false,
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          }
        ],
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationItemPagedResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The configuration could not be found."
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "configuration"
        ],
        "summary": "Gets configurations by the query parameter",
        "description": "Return to the caller a configuration, using one of the query parameters."
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Created configuration item",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationItems"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "409": {
            "description": "If a duplicated item was detected."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationItems"
              }
            }
          }
        },
        "tags": [
          "configuration"
        ],
        "summary": "Creates a configuration item",
        "description": "Creates a configuration item"
      }
    },
    "/api/configuration/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationItems"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The configuration could not be found."
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "configuration"
        ],
        "summary": "Gets a configuration by id",
        "description": "Return to the caller a configuration document."
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Updated configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationItems"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The configuration could not be found."
          },
          "409": {
            "description": "Unable to update object because IDs are different"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigurationItems"
              }
            }
          }
        },
        "tags": [
          "configuration"
        ],
        "summary": "Updates an existing configuration.",
        "description": "Updates an existing configuration."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Configuration deleted"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The configuration could not be found."
          }
        },
        "tags": [
          "configuration"
        ],
        "summary": "Removes a configuration from the system.",
        "description": "Removes a configuration from the system."
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/worker/{worker_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "500": {
            "description": "There was an error querying mongo"
          }
        },
        "tags": [
          "worker"
        ],
        "summary": "Get a job document",
        "description": "Return to the worker a job document. Empty if nothing"
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Bad request data"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobResult"
              }
            }
          }
        },
        "tags": [
          "worker"
        ],
        "summary": "Accept a job status update",
        "description": "Accept a job status update (typically completion) from a worker."
      },
      "parameters": [
        {
          "in": "path",
          "name": "worker_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/worker/register": {
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Update result.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Worker"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Worker"
              }
            }
          }
        },
        "tags": [
          "worker"
        ],
        "summary": "Register worker connections",
        "description": "Registers worker connections in the database"
      }
    },
    "/api/globalregistry": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          }
        ],
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalRegistryPagedResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "If no Global Registries were found."
          }
        },
        "tags": [
          "globalregistry"
        ],
        "summary": "Lists Global Registries",
        "description": "Returns a list of Global Registries."
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Global Registry created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalRegistry"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "The provided data is not valid."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalRegistry"
              }
            }
          }
        },
        "tags": [
          "globalregistry"
        ],
        "summary": "Creates a Global Registry",
        "description": "Creates a Global Registry."
      }
    },
    "/api/globalregistry/{identifier}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalRegistry"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The item could not be found."
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "globalregistry"
        ],
        "summary": "Gets one Global Registry",
        "description": "Return a Global Registry document, using the `id` or `name` in the URL."
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Global Registry updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalRegistry"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The item could not be found."
          },
          "400": {
            "description": "The provided data is not valid."
          },
          "409": {
            "description": "Unable to update object because IDs are different"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalRegistry"
              }
            }
          }
        },
        "tags": [
          "globalregistry"
        ],
        "summary": "Updates a Global Registry",
        "description": "Updates a Global Registry."
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Global Registry deleted"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The Global Registry could not be found."
          }
        },
        "tags": [
          "globalregistry"
        ],
        "summary": "Deletes a Global Registry",
        "description": "Removes a Global Registry from the system, using the `id` or `name` in the URL."
      },
      "parameters": [
        {
          "in": "path",
          "name": "identifier",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/globalregistry/{identifier}/data/{key}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalRegistryDataItem"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The specified Global Registry, or the specified key could not be found."
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "globalregistry"
        ],
        "summary": "Gets one Global Registry Key",
        "description": "Returns the value of the specified Global Registry key."
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Global Registry Key deleted"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The Global Registry could not be found."
          }
        },
        "tags": [
          "globalregistry"
        ],
        "summary": "Delete a Global Registry Key",
        "description": "Deletes the specified key from the specified Global Registry."
      },
      "parameters": [
        {
          "in": "path",
          "name": "identifier",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "key",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/globalregistry/{identifier}/data": {
      "get": {
        "tags": [
          "globalregistry"
        ],
        "summary": "Gets all Global Registry data",
        "description": "Returns the entire data object of the specified Global Registry.",
        "responses": {
          "404": {
            "description": "If the specified Global Registry was not found."
          }
        }
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Global Registry Key updated."
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The item could not be found."
          },
          "400": {
            "description": "The provided data is not valid."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalRegistryDataItem"
              }
            }
          }
        },
        "tags": [
          "globalregistry"
        ],
        "summary": "Update Global Registry Key",
        "description": "Updates a Global Registry Key with the provided value."
      },
      "parameters": [
        {
          "in": "path",
          "name": "identifier",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/user": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "username",
            "required": false,
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "token",
            "required": false,
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          }
        ],
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPagedResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "user"
        ],
        "summary": "Gets users by the query parameter",
        "description": "Return to the caller Users, using the query parameters."
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Saved User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "409": {
            "description": "If a duplicated user was detected."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "summary": "Inserts a user into the database",
        "tags": [
          "user"
        ],
        "description": "Inserts a user into the database"
      }
    },
    "/api/user/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The user could not be found."
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "user"
        ],
        "summary": "Gets a user by id",
        "description": "Return to the caller a User document."
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Updated user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The user could not be found."
          },
          "409": {
            "description": "Unable to update object because IDs are different"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "summary": "Updates an existing user already present in the database.",
        "tags": [
          "user"
        ],
        "description": "Updates an existing user already present in the database."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "User deleted"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "403": {
            "description": "A user can not delete itself with the same _id."
          },
          "404": {
            "description": "The user could not be found."
          }
        },
        "tags": [
          "user"
        ],
        "summary": "Removes a user from the system.",
        "description": "Removes a user from the system. Uses the mongo _id specified in the URL."
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/mock-api/": {
      "get": {
        "tags": [
          "mock"
        ],
        "summary": "Mock GET operation",
        "description": "Returns some response"
      }
    },
    "/api/repository": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "default": null,
              "nullable": true,
              "type": "string",
              "enum": [
                "GIT",
                "GITHUB",
                "GITLAB"
              ]
            }
          },
          {
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          }
        ],
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryPagedResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The item could not be found."
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "repository"
        ],
        "summary": "Gets a repository by the query parameter",
        "description": "Return to the caller a Repository document, using one of the query parameters."
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Repository created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The item could not be found."
          },
          "400": {
            "description": "The provided data is not valid."
          },
          "409": {
            "description": "Repository names should be unique"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Repository"
              }
            }
          }
        },
        "tags": [
          "repository"
        ],
        "summary": "Creates a repository in the database.",
        "description": "Creates a repository in the database."
      }
    },
    "/api/repository/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The item could not be found."
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "repository"
        ],
        "summary": "Gets one repository by ID",
        "description": "Return to the caller a Repository document, using the ID in the URL"
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Repository updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Repository"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The item could not be found."
          },
          "400": {
            "description": "The provided data is not valid."
          },
          "409": {
            "description": "Unable to update object because IDs are different"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Repository"
              }
            }
          }
        },
        "tags": [
          "repository"
        ],
        "summary": "Updates a repository in the database.",
        "description": "Updates a repository in the database."
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Repository deleted"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The repository could not be found."
          }
        },
        "tags": [
          "repository"
        ],
        "summary": "Removes a repository from the system.",
        "description": "Removes a repository from the system. Uses the mongo id specified in the URL."
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/repository/{repo_id}/directives": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DirectiveItems"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The item could not be found."
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "repository"
        ],
        "summary": "Gets the list of directives from one repository by ID",
        "description": "Return to the caller a list of Directive documents, using the Repository ID in the URL"
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Directive created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectiveItems"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The item could not be found."
          },
          "400": {
            "description": "The provided data is not valid."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectiveItems"
              }
            }
          }
        },
        "tags": [
          "repository"
        ],
        "summary": "Creates a directive in the database.",
        "description": "Creates a directive in the database."
      },
      "parameters": [
        {
          "in": "path",
          "name": "repo_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/repository/{repo_id}/directives/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectiveItems"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The item could not be found."
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "repository"
        ],
        "summary": "Gets one directive",
        "description": "Return to the caller a Directive document"
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Directive updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectiveItems"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The item could not be found."
          },
          "400": {
            "description": "The provided data is not valid."
          },
          "409": {
            "description": "Unable to update object because IDs are different"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DirectiveItems"
              }
            }
          }
        },
        "tags": [
          "repository"
        ],
        "summary": "Updates a directive in the database.",
        "description": "Updates a directive in the database."
      },
      "delete": {
        "responses": {
          "204": {
            "description": "Directive deleted"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The directive could not be found."
          }
        },
        "tags": [
          "repository"
        ],
        "summary": "Removes a directive from the system.",
        "description": "Removes a directive from the system. Uses the mongo id specified in the URL."
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "repo_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/webhook": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          }
        ],
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookPagedResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The webhook configuration could not be found."
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "webhook"
        ],
        "summary": "Gets a webhook configuration by the query parameter",
        "description": "Return to the caller a Webhook document, using one of the query parameters."
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Saved Webhook",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInstance"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "409": {
            "description": "If a duplicated webhook configuration was detected."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookInstance"
              },
              "example": {
                "name": "webhook1",
                "auth": {
                  "type": "NoAuth"
                },
                "description": "github webhook",
                "handlers": [
                  "github_event"
                ],
                "id": null
              }
            }
          }
        },
        "summary": "Inserts a webhook configuration into the database",
        "tags": [
          "webhook"
        ],
        "description": "Inserts a webhook configuration into the database"
      }
    },
    "/api/webhook/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInstance"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The webhook configuration could not be found."
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "webhook"
        ],
        "summary": "Gets a webhook configuration by id",
        "description": "Return to the caller a Webhook document."
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Updated webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookInstance"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The webhook configuration could not be found."
          },
          "409": {
            "description": "Unable to update object because IDs are different"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookInstance"
              }
            }
          }
        },
        "summary": "Updates an existing webhook configuration already present in the database.",
        "tags": [
          "webhook"
        ],
        "description": "Updates an existing webhook configuration already present in the database."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Webhook deleted"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The webhook configuration could not be found."
          }
        },
        "tags": [
          "webhook"
        ],
        "summary": "Removes a webhook configuration from the system.",
        "description": "Removes a webhook configuration from the system. Uses the mongo _id specified in the URL."
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/incoming_webhook/{name}": {
      "post": {
        "responses": {
          "204": {
            "description": "Event received."
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "If no webhook configuration was previously defined"
          },
          "415": {
            "description": "If the post body is not JSON content."
          }
        },
        "tags": [
          "incoming_webhook"
        ],
        "summary": "Accepts a webhook from an external system",
        "description": "Inserts a webhook payload into the database",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {}
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "name",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/ui-config/": {
      "get": {
        "responses": {
          "200": {
            "description": "UI configuration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UiConfiguration"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "tags": [
          "ui_config"
        ],
        "summary": "UI Configuration GET operation",
        "description": "Returns data which is necessary for UI to be able to connect to other APIs; e.g. auth/keycloak properties."
      }
    },
    "/api/jobs/{job_name}": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Submitted job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResult"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobParameters"
              }
            }
          }
        },
        "tags": [
          "jobs"
        ],
        "summary": "Submits a job to be be run at some point in time.",
        "description": "Submits a job to be be run at some point in time."
      },
      "parameters": [
        {
          "in": "path",
          "name": "job_name",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/jobs/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResult"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The job could not be found."
          }
        },
        "tags": [
          "jobs"
        ],
        "summary": "Gets the results of a job",
        "description": "Return to the caller a Job result document."
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/process_design": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "description": "Name of the process design. Use + as a space in the URL parameter.",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          }
        ],
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessDesignPagedResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "process_design"
        ],
        "summary": "Gets basic process design information by the query parameter",
        "description": "Return to the caller a list of reduced views of process design, using one of the query parameters."
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Created a process design",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessDesignCreateResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "409": {
            "description": "Process names should be unique."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessDesignCreate"
              },
              "example": {
                "name": "App1 release process",
                "id": null
              }
            }
          }
        },
        "summary": "Creates a process design",
        "tags": [
          "process_design"
        ],
        "description": "Creates a process design. Phases and top-level groups may be included or added later. Individual steps are created via the /step API."
      }
    },
    "/api/process_design/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessDesignView"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "An unknown parameter was specified."
          },
          "404": {
            "description": "The process design could not be found."
          }
        },
        "tags": [
          "process_design"
        ],
        "description": "Gets a fully defined process design by id. 'steps' field will contain all step groups and steps mapped by id.",
        "summary": "Return to the caller a ProcessDesign document."
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Updated process design.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessDesignPut"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Missing or invalid phase ids"
          },
          "404": {
            "description": "The process design could not be found."
          },
          "409": {
            "description": "Outdated version number provided."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessDesignPut"
              }
            }
          }
        },
        "summary": "Updates an existing process design already present in the database.Phases may be reordered, but must be added or removed via the /phase API.",
        "tags": [
          "process_design"
        ],
        "description": "Updates attributes such as name as well as re-ordering phases."
      },
      "delete": {
        "responses": {
          "200": {
            "description": "Process design deleted"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The process design could not be found."
          }
        },
        "tags": [
          "process_design"
        ],
        "summary": "Removes a process design from the system.",
        "description": "Removes a process design from the system. Uses the id; specified in the URL."
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/process_design/{process_design_id}/phase": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "description": "Name of the process design.",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          }
        ],
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhaseView"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          }
        },
        "tags": [
          "process_design"
        ],
        "summary": "Gets phase information for the process design provided via the URL.",
        "description": "Return to the caller a view of phases, using one of the query parameters."
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Created process design phase",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhaseCreateResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "If _process_design_version is null"
          },
          "409": {
            "description": "If process design version is outdated."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhaseCreate"
              },
              "example": {
                "name": "Pre-build",
                "description": "Aggregates some steps needed prior to build into groups"
              }
            }
          }
        },
        "summary": "Creates a process design phase",
        "tags": [
          "process_design"
        ],
        "description": "Creates a process design phase"
      },
      "parameters": [
        {
          "in": "path",
          "name": "process_design_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/process_design/{process_design_id}/phase/{phase_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhaseView"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The process design step phase could not be found."
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "process_design"
        ],
        "summary": "Gets a process design phase by id",
        "description": "Return to the caller a Phase document."
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Updated process design.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhasePut"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The phase could not be found by ID."
          },
          "400": {
            "description": "_process_design_version was null, and one or more step groups are being moved"
          },
          "409": {
            "description": "Outdated version number provided."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhasePut"
              }
            }
          }
        },
        "summary": "Updates an existing Phase",
        "tags": [
          "process_design"
        ],
        "description": "Update attributes like name and re-ordering of steps. If a step group is included which currently belongs to a different phase, it will be moved here."
      },
      "delete": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Process design phase deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhaseDelete"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "409": {
            "description": "The given process design version was invalid."
          },
          "404": {
            "description": "The phase could not be found."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhaseDelete"
              }
            }
          }
        },
        "tags": [
          "process_design"
        ],
        "summary": "Removes a process design phase.",
        "description": "Removes a process design phase from the system. Uses the id; specified in the URL."
      },
      "parameters": [
        {
          "in": "path",
          "name": "phase_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "process_design_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/process_design/{process_design_id}/group": {
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Created process design group of steps",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StepGroupCreateResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "If _parent_version is null"
          },
          "409": {
            "description": "If a _parent_version is outdated."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StepGroupCreate"
              },
              "example": {
                "name": "Aggregate some steps",
                "id": null
              }
            }
          }
        },
        "summary": "Creates a process design group of steps",
        "tags": [
          "process_design"
        ],
        "description": "Creates a process design group of steps. The group will initially be empty; use the /step API to add steps or use PUT to movesteps here after creating the group."
      },
      "parameters": [
        {
          "in": "path",
          "name": "process_design_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/process_design/{process_design_id}/group/{group_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StepGroupView"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The process design step group could not be found."
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "process_design"
        ],
        "summary": "Gets a process design step grouping by id",
        "description": "Return to the caller a StepGroup document."
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Updated process design step group.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StepGroupPut"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The process design step group could not be found."
          },
          "400": {
            "description": "_process_design_version was null, and one or more steps are being moved"
          },
          "409": {
            "description": "Outdated version number provided."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StepGroupPut"
              }
            }
          }
        },
        "summary": "Updates an existing process design step group.",
        "tags": [
          "process_design"
        ],
        "description": "Update attributes like name and re-ordering of steps. If a step is included which currently belongs to a different group, it will be moved here."
      },
      "delete": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Process design step group deleted"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "409": {
            "description": "The parent phase or step group version must be valid."
          },
          "404": {
            "description": "The step group could not be found."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StepDelete"
              }
            }
          }
        },
        "tags": [
          "process_design"
        ],
        "summary": "Removes a process design step group from the system.",
        "description": "Removes a process design step group from the system. Uses the id; specified in the URL."
      },
      "parameters": [
        {
          "in": "path",
          "name": "group_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "process_design_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/process_design/{process_design_id}/step": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": false,
            "description": "Name of the step. Use + as a space in the URL parameter.",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "step_type",
            "required": false,
            "description": "The type of step",
            "schema": {
              "default": null,
              "nullable": true,
              "type": "string",
              "enum": [
                "SEQUENTIAL_GROUP",
                "PARALLEL_GROUP",
                "MANUAL"
              ]
            }
          }
        ],
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StepView"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "process_design"
        ],
        "summary": "Gets basic process design step information by the query parameter",
        "description": "Return to the caller a view of the steps of the process design, given by the URL, using one of the query parameters."
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Created process design step",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StepCreateResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "409": {
            "description": "If a _parent_version is outdated."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StepCreate"
              },
              "example": {
                "name": "Release manager sign-off",
                "description": "Get release manager sign-off",
                "step_type": "MANUAL"
              }
            }
          }
        },
        "summary": "Creates a process design step",
        "tags": [
          "process_design"
        ],
        "description": "Creates a process design step"
      },
      "parameters": [
        {
          "in": "path",
          "name": "process_design_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/process_design/{process_design_id}/step/{step_id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StepView"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The step could not be found."
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "process_design"
        ],
        "summary": "Gets a process design step by id",
        "description": "Return to the caller a Step document."
      },
      "put": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Updated process design step.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StepView"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "400": {
            "description": "Unable to update object because ids in payload do not match expectations"
          },
          "409": {
            "description": "Unable to update object because version is outdated"
          },
          "404": {
            "description": "The process design step could not be found."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StepView"
              }
            }
          }
        },
        "summary": "Updates an existing process design step.",
        "tags": [
          "process_design"
        ],
        "description": "Updates an existing process design step."
      },
      "delete": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Process design step deleted"
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "409": {
            "description": "The parent phase or step group version must be valid"
          },
          "404": {
            "description": "The process design step could not be found."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StepDelete"
              }
            }
          }
        },
        "tags": [
          "process_design"
        ],
        "summary": "Removes a process design step from the system.",
        "description": "Removes a process design step from the system. Uses the id; specified in the URL."
      },
      "parameters": [
        {
          "in": "path",
          "name": "process_design_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "step_id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/code_change": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "contributor_name",
            "required": false,
            "description": "Case-sensitive search by contributor.",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "external_id",
            "required": false,
            "description": "Case-insensitive search of ID; 'startswith' match.",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "message",
            "required": false,
            "description": "Case-insensitive search of code change message.",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "q",
            "required": false,
            "description": "Case-insensitive search of all text fields.",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "repo_name",
            "required": false,
            "description": "Case-sensitive search by repository name.",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "ts_begin",
            "required": false,
            "description": "Match code changes created on or after the given date/time.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "ts_end",
            "required": false,
            "description": "Match code changes created on or before the given date/time.",
            "schema": {
              "type": "string",
              "format": "date-time",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "id",
            "required": false,
            "description": "Return a single code change record by internal ObjectID.",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          }
        ],
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeChangesPagedResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The item could not be found."
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "code_change"
        ],
        "summary": "Gets code changes by the query parameter",
        "description": "Return to the caller code change documents, using the query\n        parameters. Code changes are generally VC commit or push data.\n        By default, results are ordered by created date, most recent first."
      },
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "Code change created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeChange"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The item could not be found."
          },
          "400": {
            "description": "The provided data is not valid."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeChange"
              }
            }
          }
        },
        "tags": [
          "code_change"
        ],
        "summary": "Creates a code change in the database.",
        "description": "Creates a code change in the database. Code changes are normally created via webhook submissions, just including this for dev/test"
      }
    },
    "/api/code_change/{id}": {
      "get": {
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeChange"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The item could not be found."
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "code_change"
        ],
        "summary": "Gets one code change by ID",
        "description": "Return to the caller a code change document, using the ID in the URL"
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/log/{origin}/{identity}": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "user_host",
            "required": false,
            "description": "User and host the log entry came from.",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "level_no",
            "required": false,
            "description": "Level number (returns all records with a level equal of greater than this value).",
            "schema": {
              "type": "integer",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "from_dt",
            "required": false,
            "description": "From date",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "to_dt",
            "required": false,
            "description": "To date",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "id",
            "required": false,
            "description": "Document id of the log entry.",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          }
        ],
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryPagedResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The item could not be found."
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "log"
        ],
        "summary": "Gets log entries from the given `origin` filtered by `identity` if given and by the query parameters",
        "description": "Return to the caller a list of LogEntry documents from the given `origin` filtered by `identity` if given and by the query parameters."
      },
      "parameters": [
        {
          "in": "path",
          "name": "identity",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        },
        {
          "in": "path",
          "name": "origin",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ]
    },
    "/api/log/{origin}": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "in": "query",
            "name": "order_by",
            "required": false,
            "explode": true,
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "user_host",
            "required": false,
            "description": "User and host the log entry came from.",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "level_no",
            "required": false,
            "description": "Level number (returns all records with a level equal of greater than this value).",
            "schema": {
              "type": "integer",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "from_dt",
            "required": false,
            "description": "From date",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "to_dt",
            "required": false,
            "description": "To date",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          },
          {
            "in": "query",
            "name": "id",
            "required": false,
            "description": "Document id of the log entry.",
            "schema": {
              "type": "string",
              "default": null,
              "nullable": true
            }
          }
        ],
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntryPagedResponse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The item could not be found."
          },
          "400": {
            "description": "An unknown parameter was specified."
          }
        },
        "tags": [
          "log"
        ],
        "summary": "Gets log entries from the given `origin` filtered by `identity` if given and by the query parameters",
        "description": "Return to the caller a list of LogEntry documents from the given `origin` filtered by `identity` if given and by the query parameters."
      },
      "parameters": [
        {
          "in": "path",
          "name": "origin",
          "required": true,
          "schema": {
            "type": "string",
            "minLength": 1
          }
        }
      ],
      "post": {
        "responses": {
          "422": {
            "$ref": "#/components/responses/UNPROCESSABLE_ENTITY"
          },
          "200": {
            "description": "LogEntry created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogEntry"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/DEFAULT_ERROR"
          },
          "404": {
            "description": "The item could not be found."
          },
          "400": {
            "description": "The provided data is not valid."
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogEntry"
              }
            }
          }
        },
        "tags": [
          "log"
        ],
        "summary": "Creates a log entry in the database.",
        "description": "Creates a log entry in the database."
      }
    }
  },
  "info": {
    "title": "Project Lisbon",
    "version": "0.0.1"
  },
  "tags": [
    {
      "name": "configuration",
      "description": "Operations related to configuration of integrations"
    },
    {
      "name": "worker",
      "description": "Operations related to work items"
    },
    {
      "name": "globalregistry",
      "description": "Global Registry endpoint"
    },
    {
      "name": "user",
      "description": "Operations related to Users"
    },
    {
      "name": "mock",
      "description": "Mock operations"
    },
    {
      "name": "repository",
      "description": "Repository endpoint"
    },
    {
      "name": "webhook",
      "description": "Operations related to Webhook configuration"
    },
    {
      "name": "incoming_webhook",
      "description": "Accepts webhooks from external systems"
    },
    {
      "name": "ui_config",
      "description": "Configuration settings needed for the web UI"
    },
    {
      "name": "jobs",
      "description": "Allows the submission and viewing status of jobs"
    },
    {
      "name": "process_design",
      "description": "Operations related to Process design"
    },
    {
      "name": "repository",
      "description": "Repository endpoint"
    },
    {
      "name": "code_change",
      "description": "Code Change Endpoint"
    },
    {
      "name": "log",
      "description": "LogEntry endpoint"
    }
  ],
  "openapi": "3.0.3",
  "components": {
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "code": {
            "type": "integer",
            "description": "Error code"
          },
          "errors": {
            "type": "object",
            "description": "Errors"
          },
          "status": {
            "type": "string",
            "description": "Error name"
          }
        }
      },
      "VersionOneConfig": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "name",
          "token",
          "url"
        ]
      },
      "ConfigurationItems": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/VersionOneConfig"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "versionone.VersionOneConfig": "#/components/schemas/VersionOneConfig"
          }
        }
      },
      "PaginationHeaders": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "default": 0
          },
          "total_pages": {
            "type": "integer",
            "default": 0
          },
          "total_elements": {
            "type": "integer",
            "default": 0
          },
          "current_page": {
            "type": "integer",
            "default": 0
          },
          "has_previous": {
            "type": "boolean",
            "default": false
          },
          "has_next": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "ConfigurationItemPagedResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigurationItems"
            }
          },
          "pagination_headers": {
            "$ref": "#/components/schemas/PaginationHeaders"
          }
        }
      },
      "Job": {
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string"
          },
          "job_name": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "default": null,
            "nullable": true,
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "required": [
          "job_id",
          "job_name"
        ]
      },
      "JobResult": {
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string"
          },
          "job_name": {
            "type": "string"
          },
          "job_status": {
            "default": "SUBMITTED",
            "type": "string",
            "enum": [
              "SUBMITTED",
              "PROCESSING",
              "SUCCEEDED",
              "FAILED"
            ]
          },
          "result_data": {
            "type": "object",
            "default": null,
            "nullable": true,
            "additionalProperties": {
              "nullable": true
            }
          },
          "elapsed_seconds": {
            "type": "integer",
            "default": null,
            "nullable": true
          },
          "last_error": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "job_id",
          "job_name"
        ]
      },
      "Worker": {
        "type": "object",
        "properties": {
          "worker_id": {
            "type": "string"
          },
          "connections": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "connections",
          "worker_id"
        ]
      },
      "GlobalRegistry": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 255,
            "pattern": "^[a-zA-Z0-9_-]+$"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          },
          "id": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "GlobalRegistryPagedResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GlobalRegistry"
            }
          },
          "pagination_headers": {
            "$ref": "#/components/schemas/PaginationHeaders"
          }
        },
        "required": [
          "pagination_headers",
          "results"
        ]
      },
      "GlobalRegistryDataItem": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "key"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "full_name": {
            "type": "string",
            "minLength": 0,
            "maxLength": 50
          },
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100
          },
          "id": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "apitoken": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "email": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "full_name",
          "username"
        ]
      },
      "UserPagedResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "pagination_headers": {
            "$ref": "#/components/schemas/PaginationHeaders"
          }
        },
        "required": [
          "pagination_headers",
          "results"
        ]
      },
      "Repository": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 1000,
            "pattern": "^[a-zA-Z0-9._-]+$"
          },
          "type": {
            "type": "string",
            "enum": [
              "GIT",
              "GITHUB",
              "GITLAB"
            ]
          },
          "id": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "RepositoryPagedResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Repository"
            }
          },
          "pagination_headers": {
            "$ref": "#/components/schemas/PaginationHeaders"
          }
        },
        "required": [
          "pagination_headers",
          "results"
        ]
      },
      "GetWorkItem": {
        "type": "object",
        "properties": {
          "v1_config_id": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "name": {
            "type": "string",
            "default": "get_workitem"
          }
        },
        "required": [
          "v1_config_id"
        ]
      },
      "DirectiveItems": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/GetWorkItem"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "versionone.GetWorkItem": "#/components/schemas/GetWorkItem"
          }
        }
      },
      "NoAuth": {
        "type": "object",
        "properties": {}
      },
      "HMacAuth": {
        "type": "object",
        "properties": {
          "shared_secret": {
            "type": "string"
          }
        },
        "required": [
          "shared_secret"
        ]
      },
      "Auth": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/NoAuth"
          },
          {
            "$ref": "#/components/schemas/HMacAuth"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "NoAuth": "#/components/schemas/NoAuth",
            "HMacAuth": "#/components/schemas/HMacAuth"
          }
        }
      },
      "WebhookInstance": {
        "type": "object",
        "properties": {
          "auth": {
            "$ref": "#/components/schemas/Auth"
          },
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200,
            "pattern": "^[\\w]+$"
          },
          "description": {
            "type": "string",
            "default": "",
            "minLength": 0,
            "maxLength": 5000
          },
          "handlers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "WebhookPagedResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookInstance"
            }
          },
          "pagination_headers": {
            "$ref": "#/components/schemas/PaginationHeaders"
          }
        },
        "required": [
          "pagination_headers",
          "results"
        ]
      },
      "AuthConfiguration": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "realm": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          }
        },
        "required": [
          "clientId",
          "realm",
          "url"
        ]
      },
      "BuildInformation": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          },
          "sha": {
            "type": "string"
          }
        },
        "required": [
          "ref",
          "sha",
          "version"
        ]
      },
      "UiConfiguration": {
        "type": "object",
        "properties": {
          "auth": {
            "$ref": "#/components/schemas/AuthConfiguration"
          },
          "build": {
            "$ref": "#/components/schemas/BuildInformation"
          }
        }
      },
      "JobParameters": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "required": [
          "parameters"
        ]
      },
      "PhaseView": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200,
            "pattern": "^[\\w\\s]+$"
          },
          "category": {
            "type": "string"
          },
          "_version": {
            "type": "integer",
            "default": 0
          },
          "description": {
            "type": "string",
            "default": "",
            "minLength": 0,
            "maxLength": 2000
          },
          "step_group_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "category",
          "name"
        ]
      },
      "ProcessDesignView": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200,
            "pattern": "^[\\w\\s]+$"
          },
          "description": {
            "type": "string",
            "minLength": 0,
            "maxLength": 2000
          },
          "id": {
            "type": "string"
          },
          "_version": {
            "type": "integer",
            "default": 0
          },
          "phases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhaseView"
            }
          },
          "steps": {
            "type": "object",
            "default": null,
            "nullable": true,
            "additionalProperties": {}
          }
        },
        "required": [
          "description",
          "id",
          "name"
        ]
      },
      "ProcessDesignPagedResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProcessDesignView"
            }
          },
          "pagination_headers": {
            "$ref": "#/components/schemas/PaginationHeaders"
          }
        },
        "required": [
          "pagination_headers",
          "results"
        ]
      },
      "StepGroupCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200,
            "pattern": "^[\\w\\s]+$"
          },
          "step_type": {
            "type": "string",
            "enum": [
              "SEQUENTIAL_GROUP",
              "PARALLEL_GROUP",
              "MANUAL"
            ]
          },
          "_parent_version": {
            "type": "integer"
          },
          "parent_id": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "default": "",
            "minLength": 0,
            "maxLength": 2000
          }
        },
        "required": [
          "_parent_version",
          "name",
          "parent_id",
          "step_type"
        ]
      },
      "PhaseCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200,
            "pattern": "^[\\w\\s]+$"
          },
          "category": {
            "type": "string"
          },
          "_version": {
            "type": "integer",
            "default": 0
          },
          "description": {
            "type": "string",
            "default": "",
            "minLength": 0,
            "maxLength": 2000
          },
          "_process_design_version": {
            "type": "integer",
            "default": null,
            "nullable": true
          },
          "step_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepGroupCreate"
            }
          }
        },
        "required": [
          "category",
          "name"
        ]
      },
      "ProcessDesignCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200,
            "pattern": "^[\\w\\s]+$"
          },
          "description": {
            "type": "string",
            "minLength": 0,
            "maxLength": 2000
          },
          "phases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhaseCreate"
            }
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "StepGroupCreateResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200,
            "pattern": "^[\\w\\s]+$"
          },
          "step_type": {
            "type": "string",
            "enum": [
              "SEQUENTIAL_GROUP",
              "PARALLEL_GROUP",
              "MANUAL"
            ]
          },
          "_parent_version": {
            "type": "integer"
          },
          "parent_id": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "default": "",
            "minLength": 0,
            "maxLength": 2000
          },
          "id": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "_parent_version",
          "name",
          "parent_id",
          "step_type"
        ]
      },
      "PhaseCreateResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200,
            "pattern": "^[\\w\\s]+$"
          },
          "category": {
            "type": "string"
          },
          "_version": {
            "type": "integer",
            "default": 0
          },
          "description": {
            "type": "string",
            "default": "",
            "minLength": 0,
            "maxLength": 2000
          },
          "_process_design_version": {
            "type": "integer",
            "default": null,
            "nullable": true
          },
          "step_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepGroupCreateResponse"
            }
          },
          "id": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "category",
          "name"
        ]
      },
      "ProcessDesignCreateResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200,
            "pattern": "^[\\w\\s]+$"
          },
          "description": {
            "type": "string",
            "minLength": 0,
            "maxLength": 2000
          },
          "id": {
            "type": "string"
          },
          "phases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhaseCreateResponse"
            }
          }
        },
        "required": [
          "description",
          "id",
          "name"
        ]
      },
      "ProcessDesignPut": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200,
            "pattern": "^[\\w\\s]+$"
          },
          "description": {
            "type": "string",
            "minLength": 0,
            "maxLength": 2000
          },
          "_version": {
            "type": "integer"
          },
          "phase_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "_version",
          "description",
          "name"
        ]
      },
      "PhasePut": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200,
            "pattern": "^[\\w\\s]+$"
          },
          "category": {
            "type": "string"
          },
          "_version": {
            "type": "integer",
            "default": 0
          },
          "description": {
            "type": "string",
            "default": "",
            "minLength": 0,
            "maxLength": 2000
          },
          "_process_design_version": {
            "type": "integer",
            "default": null,
            "nullable": true
          },
          "step_group_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "category",
          "name"
        ]
      },
      "PhaseDelete": {
        "type": "object",
        "properties": {
          "_process_design_version": {
            "type": "integer"
          }
        },
        "required": [
          "_process_design_version"
        ]
      },
      "StepGroupView": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200,
            "pattern": "^[\\w\\s]+$"
          },
          "step_type": {
            "type": "string",
            "enum": [
              "SEQUENTIAL_GROUP",
              "PARALLEL_GROUP",
              "MANUAL"
            ]
          },
          "description": {
            "type": "string",
            "default": "",
            "minLength": 0,
            "maxLength": 2000
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          },
          "id": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "_version": {
            "type": "integer",
            "default": 0
          },
          "step_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "step_type"
        ]
      },
      "StepGroupPut": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200,
            "pattern": "^[\\w\\s]+$"
          },
          "step_type": {
            "type": "string",
            "enum": [
              "SEQUENTIAL_GROUP",
              "PARALLEL_GROUP",
              "MANUAL"
            ]
          },
          "_version": {
            "type": "integer"
          },
          "_process_design_version": {
            "type": "integer",
            "default": null,
            "nullable": true
          },
          "description": {
            "type": "string",
            "default": "",
            "minLength": 0,
            "maxLength": 2000
          },
          "step_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "_version",
          "name",
          "step_type"
        ]
      },
      "StepDelete": {
        "type": "object",
        "properties": {
          "_parent_version": {
            "type": "integer"
          }
        },
        "required": [
          "_parent_version"
        ]
      },
      "StepView": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200,
            "pattern": "^[\\w\\s]+$"
          },
          "step_type": {
            "type": "string",
            "enum": [
              "SEQUENTIAL_GROUP",
              "PARALLEL_GROUP",
              "MANUAL"
            ]
          },
          "description": {
            "type": "string",
            "default": "",
            "minLength": 0,
            "maxLength": 2000
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          },
          "id": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "_version": {
            "type": "integer",
            "default": 0
          }
        },
        "required": [
          "name",
          "step_type"
        ]
      },
      "StepCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200,
            "pattern": "^[\\w\\s]+$"
          },
          "step_type": {
            "type": "string",
            "enum": [
              "SEQUENTIAL_GROUP",
              "PARALLEL_GROUP",
              "MANUAL"
            ]
          },
          "description": {
            "type": "string",
            "default": "",
            "minLength": 0,
            "maxLength": 2000
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          },
          "_parent_version": {
            "type": "integer",
            "default": 0
          },
          "parent_id": {
            "type": "string",
            "default": ""
          }
        },
        "required": [
          "name",
          "step_type"
        ]
      },
      "StepCreateResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 3,
            "maxLength": 200,
            "pattern": "^[\\w\\s]+$"
          },
          "step_type": {
            "type": "string",
            "enum": [
              "SEQUENTIAL_GROUP",
              "PARALLEL_GROUP",
              "MANUAL"
            ]
          },
          "description": {
            "type": "string",
            "default": "",
            "minLength": 0,
            "maxLength": 2000
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          },
          "_parent_version": {
            "type": "integer",
            "default": 0
          },
          "parent_id": {
            "type": "string",
            "default": ""
          },
          "id": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "name",
          "step_type"
        ]
      },
      "CodeChange": {
        "type": "object",
        "properties": {
          "created_dt": {
            "type": "string",
            "format": "date-time"
          },
          "external_id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "contributor_name": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "repo_name": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "id": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "created_dt",
          "external_id",
          "message"
        ]
      },
      "CodeChangesPagedResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeChange"
            }
          },
          "pagination_headers": {
            "$ref": "#/components/schemas/PaginationHeaders"
          }
        },
        "required": [
          "pagination_headers",
          "results"
        ]
      },
      "LogEntry": {
        "type": "object",
        "properties": {
          "user_host": {
            "type": "string"
          },
          "identity": {
            "type": "string"
          },
          "log_dt": {
            "type": "string",
            "format": "date-time"
          },
          "rec_name": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "level_no": {
            "type": "integer"
          },
          "level_name": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "pid": {
            "type": "integer",
            "default": null,
            "nullable": true
          },
          "proc": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "thread": {
            "type": "integer",
            "default": null,
            "nullable": true
          },
          "thread_name": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "module": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "function": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "path": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "filename": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "line_no": {
            "type": "integer",
            "default": null,
            "nullable": true
          },
          "process_name": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "jobid": {
            "type": "string",
            "default": null,
            "nullable": true
          },
          "exception": {
            "type": "object",
            "default": null,
            "nullable": true,
            "additionalProperties": {
              "nullable": true
            }
          },
          "extra": {
            "type": "object",
            "default": null,
            "nullable": true,
            "additionalProperties": {
              "nullable": true
            }
          },
          "id": {
            "type": "string",
            "default": null,
            "nullable": true
          }
        },
        "required": [
          "identity",
          "level_name",
          "level_no",
          "log_dt",
          "message",
          "user_host"
        ]
      },
      "LogEntryPagedResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogEntry"
            }
          },
          "pagination_headers": {
            "$ref": "#/components/schemas/PaginationHeaders"
          }
        },
        "required": [
          "pagination_headers",
          "results"
        ]
      }
    },
    "responses": {
      "CONTINUE": {
        "description": "Continue",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "SWITCHING_PROTOCOLS": {
        "description": "Switching Protocols",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "PROCESSING": {
        "description": "Processing",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "OK": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "CREATED": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ACCEPTED": {
        "description": "Accepted",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NON_AUTHORITATIVE_INFORMATION": {
        "description": "Non-Authoritative Information",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NO_CONTENT": {
        "description": "No Content",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "RESET_CONTENT": {
        "description": "Reset Content",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "PARTIAL_CONTENT": {
        "description": "Partial Content",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "MULTI_STATUS": {
        "description": "Multi-Status",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ALREADY_REPORTED": {
        "description": "Already Reported",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "IM_USED": {
        "description": "IM Used",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "MULTIPLE_CHOICES": {
        "description": "Multiple Choices",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "MOVED_PERMANENTLY": {
        "description": "Moved Permanently",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "FOUND": {
        "description": "Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "SEE_OTHER": {
        "description": "See Other",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NOT_MODIFIED": {
        "description": "Not Modified",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "USE_PROXY": {
        "description": "Use Proxy",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "TEMPORARY_REDIRECT": {
        "description": "Temporary Redirect",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "PERMANENT_REDIRECT": {
        "description": "Permanent Redirect",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "BAD_REQUEST": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UNAUTHORIZED": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "PAYMENT_REQUIRED": {
        "description": "Payment Required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "FORBIDDEN": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NOT_FOUND": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "METHOD_NOT_ALLOWED": {
        "description": "Method Not Allowed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NOT_ACCEPTABLE": {
        "description": "Not Acceptable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "PROXY_AUTHENTICATION_REQUIRED": {
        "description": "Proxy Authentication Required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "REQUEST_TIMEOUT": {
        "description": "Request Timeout",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "CONFLICT": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "GONE": {
        "description": "Gone",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "LENGTH_REQUIRED": {
        "description": "Length Required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "PRECONDITION_FAILED": {
        "description": "Precondition Failed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "REQUEST_ENTITY_TOO_LARGE": {
        "description": "Request Entity Too Large",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "REQUEST_URI_TOO_LONG": {
        "description": "Request-URI Too Long",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UNSUPPORTED_MEDIA_TYPE": {
        "description": "Unsupported Media Type",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "REQUESTED_RANGE_NOT_SATISFIABLE": {
        "description": "Requested Range Not Satisfiable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "EXPECTATION_FAILED": {
        "description": "Expectation Failed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "MISDIRECTED_REQUEST": {
        "description": "Misdirected Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UNPROCESSABLE_ENTITY": {
        "description": "Unprocessable Entity",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "LOCKED": {
        "description": "Locked",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "FAILED_DEPENDENCY": {
        "description": "Failed Dependency",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UPGRADE_REQUIRED": {
        "description": "Upgrade Required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "PRECONDITION_REQUIRED": {
        "description": "Precondition Required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "TOO_MANY_REQUESTS": {
        "description": "Too Many Requests",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "REQUEST_HEADER_FIELDS_TOO_LARGE": {
        "description": "Request Header Fields Too Large",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UNAVAILABLE_FOR_LEGAL_REASONS": {
        "description": "Unavailable For Legal Reasons",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "INTERNAL_SERVER_ERROR": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NOT_IMPLEMENTED": {
        "description": "Not Implemented",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "BAD_GATEWAY": {
        "description": "Bad Gateway",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "SERVICE_UNAVAILABLE": {
        "description": "Service Unavailable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "GATEWAY_TIMEOUT": {
        "description": "Gateway Timeout",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "HTTP_VERSION_NOT_SUPPORTED": {
        "description": "HTTP Version Not Supported",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "VARIANT_ALSO_NEGOTIATES": {
        "description": "Variant Also Negotiates",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "INSUFFICIENT_STORAGE": {
        "description": "Insufficient Storage",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "LOOP_DETECTED": {
        "description": "Loop Detected",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NOT_EXTENDED": {
        "description": "Not Extended",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NETWORK_AUTHENTICATION_REQUIRED": {
        "description": "Network Authentication Required",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "DEFAULT_ERROR": {
        "description": "Default error response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  }
}